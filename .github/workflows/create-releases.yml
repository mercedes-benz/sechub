# SPDX-License-Identifier: MIT
name: Release

on:
  workflow_dispatch:
    inputs:
      server-version:
        description: Server Version (e.g. 0.27.0)
        required: false
      server-milestone-number:
        description: Server Milestone number (e.g. 45)
        required: false
      client-version:
        description: Client Version (e.g. 0.23.0)
        required: false
      client-milestone-number:
        description: Client Milestone number (e.g. 47)
        required: false
      pds-version:
        description: PDS Version (e.g. 0.20.0)
        required: false
      pds-milestone-number:
        description: PDS Milestone number (e.g. 46)
        required: false
jobs:
  release-version:
    name: Create releases
    runs-on: ubuntu-latest
    steps:
      - name: "Show Inputs"
        run: |
          echo "Server '${{ github.event.inputs.server-version }}' - Milestone '${{ github.event.inputs.server-milestone-number }}'"
          echo "Client '${{ github.event.inputs.client-version }}' - Milestone '${{ github.event.inputs.client-milestone-number }}'"
          echo "PDS '${{ github.event.inputs.pds-version }}' - Milestone '${{ github.event.inputs.pds-milestone-number }}'"
      # Check inputs if a milestone number is provided for each version to be released:
      - name: "Verify Input: Server"
        if: (github.event.inputs.server-version != '') && (github.event.inputs.server-milestone-number == '')
        run: |
          echo "For Server release, server-milestone-number must be provided!"
          exit 1
      - name: "Verify Input: Client"
        if: (github.event.inputs.client-version != '') && (github.event.inputs.client-milestone-number == '')
        run: |
          echo "For Client release, client-milestone-number must be provided!"
          exit 1
      - name: "Verify Input: PDS"
        if: (github.event.inputs.pds-version != '') && (github.event.inputs.pds-milestone-number == '')
        run: |
          echo "For PDS release, pds-milestone-number must be provided!"
          exit 1

      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: master
      # Create temporary local tags, so we build documentation for this tag...
      # The final tag on git server side will be done by the release when the draft is saved as "real" release
      # automatically.
      - name: "Temporary tag server version: v${{ github.event.inputs.server-version }}-server - if defined"
        if: github.event.inputs.server-version != ''
        run: git tag v${{ github.event.inputs.server-version }}-server

      - name: "Temporary tag client version: v${{ github.event.inputs.client-version }}-client - if defined"
        if: github.event.inputs.client-version != ''
        run: git tag v${{ github.event.inputs.client-version }}-client

      - name: "Temporary tag PDS version: v${{ github.event.inputs.pds-version }}-pds - if defined"
        if: github.event.inputs.pds-version != ''
        run: git tag v${{ github.event.inputs.pds-version }}-pds

      # ----------------------
      # Setup + Caching
      # ----------------------
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin
          cache: gradle
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.1
      - uses: actions/cache@v3.0.11
        id: go-cache
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Gradle clean
        run: ./gradlew clean

      # ----------------------
      # Create pull request if license headers are missing
      # ----------------------
      - name: run apply-headers.sh
        id: apply-headers
        run: |
          git config user.name "SecHub release job (github-actions)"
          git config user.email github-actions-sechub@users.noreply.github.com
          ./apply-headers.sh
          git commit -am "SPDX headers added by SecHub release job @github-actions" || true
          COMMITS=`git log --oneline --branches --not --remotes`
          echo "::set-output name=commits::$COMMITS"

      - name: Create pull request for SPDX license headers
        id: pr_spdx_headers
        if: steps.apply-headers.outputs.commits != ''
        uses: peter-evans/create-pull-request@v4.2.0
        with:
          branch: release-spdx-headers
          branch-suffix: short-commit-hash
          delete-branch: true
          title: '0 - Before release: Add missing SPDX license headers [auto-generated]'
          body: |
            Auto-generated by Github Actions release job.

            -> Please review and merge **before** publishing the release.

      - name: Print PR infos
        if: steps.apply-headers.outputs.commits != ''
        run: |
          echo "Pull Request Number - ${{ steps.pr_spdx_headers.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.pr_spdx_headers.outputs.pull-request-url }}"

      - name: Switch back to master branch
        run: git checkout master

      # ----------------------
      # SecHub Client
      # ----------------------
      - name: Build Client
        run: ./gradlew :sechub-cli:buildGo :sechub-cli:testGo

      # ----------------------
      # SecHub Server + PDS
      # ----------------------
      - name: Build Server and PDS artifacts
        run: ./gradlew ensureLocalhostCertificate build buildWrapperOwaspZap generateOpenapi buildDeveloperAdminUI -x :sechub-integrationtest:test -x :sechub-cli:build --parallel

      # ----------------------
      # API Java publish
      # ----------------------
      - name: Generate, build (and publish on server release) Java API
        run: ./gradlew :sechub-api-java:buildAPIJava
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      
      # ----------------------
      # Integration test
      # ----------------------
      - name: Integration test
        run: ./gradlew integrationtest

      - name: Create combined test report
        if: always()
        run: ./gradlew createCombinedTestReport

      # To identifiy parts not in git history and leading to "-dirty-$commitId" markern in documentation
      - name: Inspect GIT status
        if: always()
        run: git status > build/reports/git-status.txt

      # -----------------------------------------
      # Upload Build Artifacts
      # -----------------------------------------
      - name: Archive combined test report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: combined-sechub-testreport
          path: build/reports/combined-report
          retention-days: 14

      - name: Archive GIT status
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: git-status.txt
          path: build/reports/git-status.txt
          retention-days: 14

      - name: Archive sechub server artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sechub-server
          path: sechub-server/build/libs
          retention-days: 14

      - name: Archive pds server artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sechub-pds
          path: sechub-pds/build/libs

      - name: Archive developer tools artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sechub-developertools
          path: sechub-developertools/build/libs
          retention-days: 14

      - name: Archive sechub client artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sechub-client
          path: sechub-cli/build/go
          retention-days: 14

      - name: Install graphviz (asciidoc diagrams)
        run: sudo apt-get -qq --assume-yes install graphviz

      # -----------------------------------------
      # Build Documentation
      # -----------------------------------------
      - name: Create documentation
        run: ./gradlew documentation-with-pages

      # -----------------------------------------
      # Upload documentation
      # -----------------------------------------
      - name: Archive documentation HTML
        uses: actions/upload-artifact@v3
        with:
          name: sechub-docs-html
          path: sechub-doc/build/docs/final-html/
          retention-days: 14

      - name: Archive documentation PDF
        uses: actions/upload-artifact@v3
        with:
          name: sechub-docs-pdf
          path: sechub-doc/build/docs/asciidoc/*.pdf
          retention-days: 14

      - name: Archive documentation openAPI3
        uses: actions/upload-artifact@v3
        with:
          name: sechub-api-spec
          path: sechub-doc/build/api-spec/
          retention-days: 14

      # -----------------------------------------
      # Update and commit release documentation for https://mercedes-benz.github.io/sechub/
      # -----------------------------------------
      - name: Update release documentation
        run: |
          git reset --hard
          sechub-doc/helperscripts/publish+git-add-releasedocs.sh
          git commit -m "docs update by SecHub release job @github-actions"

      # -----------------------------------------
      # Create pull request for release documentation
      # -----------------------------------------
      - name: Create pull request for release documentation
        id: pr_release_documentation
        uses: peter-evans/create-pull-request@v4.2.0
        with:
          branch: release-documentation
          branch-suffix: short-commit-hash
          delete-branch: true
          title: '1 - Release documentation [auto-generated]'
          body: |
            Release of SecHub documentation
            - Server "${{ github.event.inputs.server-version }}"
            - Client "${{ github.event.inputs.client-version }}"
            - PDS "${{ github.event.inputs.pds-version }}"

            -> Please review and merge **before** publishing the release.

      - name: Print PR infos
        run: |
          echo "Pull Request Number - ${{ steps.pr_release_documentation.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.pr_release_documentation.outputs.pull-request-url }}"

      - name: Switch back to master branch
        run: git checkout master

      # -----------------------------------------
      # Assert releaseable, so no dirty flags on releases
      # even when all artifact creation parts are done!
      # -----------------------------------------
      - name: Assert releasable
        run: ./gradlew assertReleaseable
      # ******************************************
      # Now let's create a new SERVER release
      # when server version is set
      # ******************************************
      - name: Create server release
        id: create_server_release
        if: github.event.inputs.server-version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ github.event.inputs.server-version }}-server
          commitish: master
          release_name: Server Version ${{ github.event.inputs.server-version }}
          body: |
            Changes in this Release
            - Some minor changes on SecHub server implementation

            For more details please look at [Milestone ${{github.event.inputs.server-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.server-milestone-number}}?closed=1)
          draft: true
          prerelease: false
      - name: Create sha256 checksum file for SecHub server jar
        if: github.event.inputs.server-version != ''
        run: |
          cd sechub-server/build/libs
          sha256sum sechub-server-${{ github.event.inputs.server-version }}.jar > sechub-server-${{ github.event.inputs.server-version }}.jar.sha256sum
      - name: Create sha256 checksum file for SecHub developertools jar
        if: github.event.inputs.server-version != ''
        run: |
          cd sechub-developertools/build/libs/
          sha256sum sechub-developertools-${{ github.event.inputs.server-version }}.jar > sechub-developertools-${{ github.event.inputs.server-version }}.jar.sha256sum
      - name: Upload Server release asset sechub-server-${{ github.event.inputs.server-version }}.jar
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: sechub-server/build/libs/sechub-server-${{ github.event.inputs.server-version }}.jar
          asset_name: sechub-server-${{ github.event.inputs.server-version }}.jar
          asset_content_type: application/zip
      - name: Upload Server release asset sechub-server-${{ github.event.inputs.server-version }}.jar.sha256sum
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: sechub-server/build/libs/sechub-server-${{ github.event.inputs.server-version }}.jar.sha256sum
          asset_name: sechub-server-${{ github.event.inputs.server-version }}.jar.sha256sum
          asset_content_type: text/plain
      - name: Upload SecHub release asset sechub-developertools-${{ github.event.inputs.server-version }}.jar
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: sechub-developertools/build/libs/sechub-developertools-${{ github.event.inputs.server-version }}.jar
          asset_name: sechub-developertools-${{ github.event.inputs.server-version }}.jar
          asset_content_type: application/zip
      - name: Upload Server release asset sechub-developertools-${{ github.event.inputs.server-version }}.jar.sha256sum
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: sechub-developertools/build/libs/sechub-developertools-${{ github.event.inputs.server-version }}.jar.sha256sum
          asset_name: sechub-developertools-${{ github.event.inputs.server-version }}.jar.sha256sum
          asset_content_type: text/plain
      # -----------------------------------------
      # Server documentation:
      # -----------------------------------------
      # sechub-architecture.pdf
      - name: Upload sechub-architecture.pdf release asset
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-architecture.pdf
          asset_name: sechub-architecture-${{ github.event.inputs.server-version }}.pdf
          asset_content_type: application/pdf
      # sechub-operations.pdf
      - name: Upload sechub-operations.pdf release asset
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-operations.pdf
          asset_name: sechub-operations-${{ github.event.inputs.server-version }}.pdf
          asset_content_type: application/pdf
      # sechub-quickstart-guide.pdf
      - name: Upload sechub-quickstart-guide.pdf release asset
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-quickstart-guide.pdf
          asset_name: sechub-quickstart-guide-${{ github.event.inputs.server-version }}.pdf
          asset_content_type: application/pdf

      # sechub-restapi.pdf
      - name: Upload sechub-restapi.pdf release asset
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-restapi.pdf
          asset_name: sechub-restapi-${{ github.event.inputs.server-version }}.pdf
          asset_content_type: application/pdf

      - name: Upload sechub-openapi3.json release asset
        if: github.event.inputs.server-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_server_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/api-spec/openapi3.json
          asset_name: sechub-openapi3-${{ github.event.inputs.server-version }}.json
          asset_content_type: text/plain

      - name: Create Server ${{ github.event.inputs.server-version }} release issue
        if: github.event.inputs.server-version != ''
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Release Server ${{ github.event.inputs.server-version }}
          body: |
            See [Milestone ${{github.event.inputs.server-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.server-milestone-number}}?closed=1) for details.

            Please close this issue after the release.
          milestone: ${{ github.event.inputs.server-milestone-number }}

      # ******************************************
      # Now let's create a new CLIENT release
      # when client version is set
      # ******************************************
      - name: Create client release
        id: create_client_release
        if: github.event.inputs.client-version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ github.event.inputs.client-version }}-client
          commitish: master
          release_name: Client Version ${{ github.event.inputs.client-version }}
          body: |
            Changes in this Release
            - Some minor changes on client implementation

            For more details please look at [Milestone ${{github.event.inputs.client-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.client-milestone-number}}?closed=1)
          draft: true
          prerelease: false
      - name: Create client release asset sechub-cli-${{ github.event.inputs.client-version }}.zip
        if: github.event.inputs.client-version != ''
        run: |
          cd sechub-cli/build/go
          zip -r sechub-cli.zip platform
          sha256sum sechub-cli.zip > sechub-cli.zip.sha256
      - name: Upload Client release asset sechub-cli-${{ github.event.inputs.client-version }}.zip
        if: github.event.inputs.client-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_client_release.outputs.upload_url }}
          asset_path: ./sechub-cli/build/go/sechub-cli.zip
          asset_name: sechub-cli-${{ github.event.inputs.client-version }}.zip
          asset_content_type: application/zip
      - name: Upload Client release asset sechub-cli-${{ github.event.inputs.client-version }}.zip.sha256
        if: github.event.inputs.client-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_client_release.outputs.upload_url }}
          asset_path: ./sechub-cli/build/go/sechub-cli.zip.sha256
          asset_name: sechub-cli-${{ github.event.inputs.client-version }}.zip.sha256
          asset_content_type: text/plain
      # sechub-client.pdf
      - name: Upload sechub-client.pdf release asset
        id: upload-sechub-doc-client-release-asset
        if: github.event.inputs.client-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_client_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-client.pdf
          asset_name: sechub-client-${{ github.event.inputs.client-version }}.pdf
          asset_content_type: application/pdf

      - name: Create Client ${{ github.event.inputs.client-version }} release issue
        if: github.event.inputs.client-version != ''
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Release Client ${{ github.event.inputs.client-version }}
          body: |
            See [Milestone ${{github.event.inputs.client-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.client-milestone-number}}?closed=1) for details.

            Please close this issue after the release.
          milestone: ${{ github.event.inputs.client-milestone-number }}

      # ******************************************
      # Now let's create a new PDS release
      # when pds version is set
      # ******************************************
      - name: Create PDS release
        id: create_pds_release
        if: github.event.inputs.pds-version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ github.event.inputs.pds-version }}-pds
          commitish: master
          release_name: PDS Version ${{ github.event.inputs.pds-version }}
          body: |
            Changes in this Release
            - Some minor changes on PDS server implementation

            For more details please look at [Milestone ${{github.event.inputs.pds-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.pds-milestone-number}}?closed=1)
          draft: true
          prerelease: false
      - name: Create sha256 checksum file for PDS jar
        if: github.event.inputs.pds-version != ''
        run: |
          cd sechub-pds/build/libs/
          sha256sum sechub-pds-${{ github.event.inputs.pds-version }}.jar > sechub-pds-${{ github.event.inputs.pds-version }}.jar.sha256sum
      - name: Upload PDS release asset sechub-pds-${{ github.event.inputs.pds-version }}.jar
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-pds/build/libs/sechub-pds-${{ github.event.inputs.pds-version }}.jar
          asset_name: sechub-pds-${{ github.event.inputs.pds-version }}.jar
          asset_content_type: application/zip
      - name: Upload PDS release asset sechub-pds-${{ github.event.inputs.pds-version }}.jar.sha256sum
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-pds/build/libs/sechub-pds-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_name: sechub-pds-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_content_type: text/plain
          
      # sechub-pds-wrapperowaspzap
      - name: Create files and sha256 checksum for PDS OWASP ZAP wrapper
        if: github.event.inputs.pds-version != ''
        run: |
          cd sechub-wrapper-owasp-zap/build/libs/
          sha256sum sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar > sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar.sha256sum
      - name: Upload PDS release asset sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-wrapper-owasp-zap/build/libs/sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar
          asset_name: sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar
          asset_content_type: application/zip
      - name: Upload PDS release asset sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar.sha256sum
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-wrapper-owasp-zap/build/libs/sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_name: sechub-pds-wrapperowaspzap-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_content_type: text/plain
      
      # sechub-pds-wrapper-checkmarx
      - name: Create files and sha256 checksum for PDS Checkmarx wrapper
        if: github.event.inputs.pds-version != ''
        run: |
          cd sechub-wrapper-checkmarx/build/libs/
          sha256sum sechub-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar > sechub-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar.sha256sum
      - name: Upload PDS release asset sechub-pds-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-wrapper-checkmarx/build/libs/sechub-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar
          asset_name: sechub-pds-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar
          asset_content_type: application/zip
      - name: Upload PDS release asset sechub-pds-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar.sha256sum
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: sechub-wrapper-checkmarx/build/libs/sechub-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_name: sechub-pds-wrapper-checkmarx-${{ github.event.inputs.pds-version }}.jar.sha256sum
          asset_content_type: text/plain
      
      # sechub-product-delegation-server.pdf
      - name: Upload PDS release asset sechub-product-delegation-server-${{ github.event.inputs.pds-version }}.pdf
        if: github.event.inputs.pds-version != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_pds_release.outputs.upload_url }}
          asset_path: ./sechub-doc/build/docs/asciidoc/sechub-product-delegation-server.pdf
          asset_name: /sechub-product-delegation-server-${{ github.event.inputs.pds-version }}.pdf
          asset_content_type: application/pdf

      - name: Create PDS ${{ github.event.inputs.pds-version }} release issue
        if: github.event.inputs.pds-version != ''
        uses: dacbd/create-issue-action@main
        with:
          token: ${{ github.token }}
          title: Release PDS ${{ github.event.inputs.pds-version }}
          body: |
            See [Milestone ${{github.event.inputs.pds-milestone-number}}]( https://github.com/mercedes-benz/sechub/milestone/${{github.event.inputs.pds-milestone-number}}?closed=1) for details.

            Please close this issue after the release.
          milestone: ${{ github.event.inputs.pds-milestone-number }}

      # -----------------------------------------
      # Create a pull request for merging back `master` into `develop`
      # -----------------------------------------
      - name: pull-request master to develop
        id: pr_master_to_develop
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          source_branch: "master"
          destination_branch: "develop"
          pr_allow_empty: true  # should allow an empty PR, but seems not to work
          pr_title: '2 - After release: Merge master back into develop [auto-generated]'
          pr_body: |
            After SecHub release
            - Client '${{ github.event.inputs.client-version }}'
            - Server '${{ github.event.inputs.server-version }}'
            - PDS '${{ github.event.inputs.pds-version }}'

            Merge master branch back into develop

            -> Please merge **after** the release has been published.
      # Remark: Fails silently if there is no difference between the branches.
      #         In that case, you have to create a PR yourself after merging the documentation PR.
      - name: Print PR infos
        run: |
          echo "Pull Request Number - ${{ steps.pr_master_to_develop.outputs.pr_number }}"
          echo "Pull Request URL - ${{ steps.pr_master_to_develop.outputs.pr_url }}"
