# SPDX-License-Identifier: MIT
name: Build and publish one single PDS solution

on:
  workflow_dispatch:
    inputs:
      pds-solution:
        description: pds solution to build (e.g. gosec ; see sechub-pds-solutions/)
        required: true
      pds-version:
        description: pds-base version to use (e.g. 1.0.0)
        required: true
  workflow_call:
    inputs:
      pds-solution:
        required: true
        type: string
      pds-version:
        required: true
        type: string

jobs:
  build-pds-solution:
    name: Build and publish PDS solution
    runs-on: ubuntu-latest
    steps:
      - name: "Show Inputs"
        run: |
          echo "pds-solution '${{ inputs.pds-solution }}'"
          echo "pds-version '${{ inputs.pds-version }}'"

      - name: Checkout git repository
        uses: actions/checkout@v3

      # Build pds-base container image + push to ghcr
      # - name: Build pds-base ${{ github.event.inputs.server-version }} container image + push to ghcr
      #   run: |
      #     PDS_VERSION="${{ github.event.inputs.pds-version }}"
      #     DOCKER_REGISTRY="$ACTIONS_SECHUB_REGISTRY/pds-base"
      #     VERSION_TAG="${PDS_VERSION}"
      #     cp sechub-pds/build/libs/sechub-pds-${PDS_VERSION}.jar sechub-pds-solutions/pds-base/docker/copy/
      #     cd sechub-pds-solutions/pds-base
      #     echo "# Building image $DOCKER_REGISTRY:$VERSION_TAG"
      #     echo "  from $ACTIONS_BASE_IMAGE_DEBIAN"
      #     ./10-create-image.sh $DOCKER_REGISTRY $VERSION_TAG $PDS_VERSION $ACTIONS_BASE_IMAGE_DEBIAN copy
      #     echo "# Pushing image $DOCKER_REGISTRY:$VERSION_TAG (latest)"
      #     ./20-push-image.sh $DOCKER_REGISTRY $VERSION_TAG yes
