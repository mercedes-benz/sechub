# SPDX-License-Identifier: MIT

apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-server
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 49%
  selector:
    matchLabels:
      name: web-server
  template:
    metadata:
      labels:
        name: web-server
{{- if .Values.templateMetadataAnnotations }}
      annotations:
        {{ .Values.templateMetadataAnnotations | indent 8 | trim }}
{{- end }}
    spec:
      securityContext:
        runAsUser: 4242  # uid of the application user. (should be same as in the Dockerfile)
        runAsGroup: 4242 # gid of the application group. (should be same as in the Dockerfile)
        fsGroup: 4242    # This gid has write access to the mounted volumes.
      volumes:
{{- if ne .Values.web_server.ssl.keystoreAlias "undefined" }}
        - name: secret-web-ui-ssl-volume
          secret:
            secretName: secret-web-ui-ssl
{{- end }}
      containers:
      # SecHub web-server container
      - name: web-server
        image: {{ .Values.image }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          # min container memory
          requests:
            memory: "{{ .Values.resources.requests.memory }}"
          # max container memory
          limits:
            memory: "{{ .Values.resources.limits.memory }}"
        ports:
        - name: web-server
          containerPort: 4443
        # startupProbe:
        #   httpGet:
        #     scheme: HTTPS
        #     path: /api/anonymous/check/alive
        #     port: web-server
        #   failureThreshold: 24
        #   periodSeconds: 5
        #   successThreshold: 1
        #   timeoutSeconds: 1
        #   initialDelaySeconds: 5
        # livenessProbe:
        #   httpGet:
        #     scheme: HTTPS
        #     path: /api/anonymous/check/alive
        #     port: web-server
        #   failureThreshold: 3
        #   periodSeconds: 10
        #   successThreshold: 1
        #   timeoutSeconds: 3
        volumeMounts:
{{- if ne .Values.web_server.ssl.keystoreAlias "undefined" }}
          - mountPath: /sechub-web-server/secrets/secret-ssl
            name: secret-web-ui-ssl-volume
{{- end }}
        env:
        # Server start mode
        - name: WEB_SERVER_START_MODE
          value: "{{ .Values.web_server.startMode }}"
        # Spring profiles definition
        - name: SPRING_PROFILES_ACTIVE
          value: "{{ .Values.web_server.spring.profiles }}"
        # Encryption key for access token - a string of 32 characters
        - name: SECHUB_SECURITY_ENCRYPTION_SECRET_KEY
          value: "{{ .Values.web_server.security.encryptionKey }}"
{{- if .Values.env }}
        # ------------------------------------------------------------------------#
        # Scope: Additional environment variables for the SecHub web-server container
        # ----------------------------------------------------------------------- #
        {{ .Values.env | indent 8 | trim }}
{{- end }}
{{- if .Values.deploymentComment }}
        # Setting DEPLOYMENT_COMMENT to a different value every time forces k8s to spin up a new container.
        # This way, you can force deployments e.g. when secrets have changed.
        - name: DEPLOYMENT_COMMENT
          value: "{{ .Values.deploymentComment }}"
{{- end }}
{{- if .Values.web_server.logging.type.enabled }}
        - name: LOGGING_TYPE
          value: "{{ .Values.web_server.logging.type.appenderName }}"
{{- end }}
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# + Connection to SecHub server
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        - name: SECHUB_SERVER_URL
          value: "{{ .Values.web_server.sechubConnection.url }}"
        - name: WEB_SERVER_SECHUB_TRUST_ALL_CERTIFICATES
{{- if .Values.web_server.sechubConnection.trustAllCertificates }}
          value: "true"
{{- else }}
          value: "false"
{{- end }}
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# + SSL certificate
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        - name: SECHUB_WEB_SERVER_SSL_KEYSTORE_TYPE
          value: "PKCS12"
        - name: SECHUB_WEB_SERVER_SSL_KEYSTORE_LOCATION
          value: "/sechub-web-server/{{ .Values.web_server.ssl.keystoreAlias }}.p12"
        - name: SECHUB_WEB_SERVER_SSL_KEYSTORE_ALIAS
          value: "{{ .Values.web_server.ssl.keystoreAlias }}"
        - name: SECHUB_WEB_SERVER_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
               name: secret-web-ui-ssl
               key: keystore_password
{{- if .Values.web_server.spring.embeddedTomcat.logging.enabled }}
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# + Scope: embedded Tomcat
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        # Logging to stdout:
        - name: SERVER_TOMCAT_ACCESSLOG_ENABLED
          value: "{{ .Values.web_server.spring.embeddedTomcat.logging.enabled }}"
        - name: SERVER_TOMCAT_ACCESSLOG_DIRECTORY
          value: "/dev"
        - name: SERVER_TOMCAT_ACCESSLOG_PREFIX
          value: "stdout"
        - name: SERVER_TOMCAT_ACCESSLOG_BUFFERED
          value: "false"
        - name: SERVER_TOMCAT_ACCESSLOG_SUFFIX
          value: ""
        - name: SERVER_TOMCAT_ACCESSLOG_FILE_DATE_FORMAT
          value: ""
        - name: SERVER_TOMCAT_ACCESSLOG_PATTERN
          value: "{{ .Values.web_server.spring.embeddedTomcat.logging.accessLogFormat }}"
{{- end }}
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# + Scope: development
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        - name: JAVA_ENABLE_DEBUG
          value: "{{ .Values.web_server.development.javaDebug | toString }}"
        - name: KEEP_CONTAINER_ALIVE_AFTER_CRASH
          value: "{{ .Values.web_server.development.keepContainerAliveAfterApplicationCrash | toString }}"
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# + end of environment variables section
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{ .Values.imagePullSecrets | indent 8 | trim }}
{{- end }}
