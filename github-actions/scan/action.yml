# SPDX-License-Identifier: MIT

name: sechub scan
description: 'a GitHub actions wrapper for SecHub security scan.'
inputs:
  config-path:
    description: 'Path to a custom SecHub configuration file. If not set, a temporary file will be generated using the input parameters.'
    required: false
  url:
    description: 'SecHub server URL (can alternatively provided via env variable or config file)'
    required: false
  api-token:
    description: 'SecHub API Token (can alternatively provided via env variable)'
    required: false
  user:
    description: 'SecHub user ID (can alternatively provided via env variable or config file)'
    required: false
  project-name:
    description: 'SecHub project name (can alternatively provided via env variable or config file)'
    required: false
  version:
    description: 'Which version of the SecHub client to use'
    required: false
    default: 'latest'
  add-scm-history:
    description: 'Whether scm history should be uploaded or not'
    required: false
    default: false
  scan-types:
    description: 'Scan types to use for generated SecHub configuration file (ignored in the case of a custom configuration file). Supported types are: codeScan, licenseScan and secretScan. Can be combined by ,'
    required: false
    default: 'codeScan'
  content-type:
    description: 'Content type to use for generated SecHub configuration file (ignored in the case of a custom configuration file). Supported types: source, binaries. Cannot be combined.'
    required: false
    default: 'source'
  include-folders:
    description: 'A list of folders to include (ignored in the case of a custom configuration file)'
    required: false
    default: '.'
  exclude-folders:
    description: 'A list of folders to exclude (ignored in the case of a custom configuration file)'
    required: false
  report-formats:
    description: 'A list of report formats to fetch'
    required: false
    default: 'html,json'
  trust-all:
    description: 'Trust unknown HTTPS certificates'
    required: false
    default: false
  debug:
    description: 'SecHub debug output on/off'
    required: false
    default: ${{ runner.debug == 1 }}
  fail-job-with-findings:
    description: 'Job will be marked as failed if SecHub finds something'
    required: false
    default: true

outputs:
  scan-trafficlight:
    description: 'Color of the traffic light reported by SecHub'
  scan-findings-count:
    description: 'Total number of findings reported by SecHub'
  scan-findings-high:
    description: 'Number of high findings reported by SecHub'
  scan-findings-medium:
    description: 'Number of medium findings reported by SecHub'
  scan-findings-low:
    description: 'Number of low findings reported by SecHub'
  scan-readable-summary:
    description: 'Readable summary of the findings reported by SecHub'

runs:
  # Instead of using the 'node' image, we use the 'composite' strategy to build & cache the artifacts before running the scan
  # By doing this we don't have to manually build & check-in the artifacts anymore
  using: composite
  steps:
    - name: Overview of setup
      run: |
        echo "CWD=`pwd`"
        echo "---"
        find ~ -type f
        echo "---"
      shell: bash

    - name: Set GitHub Path
      run: |
        echo "$GITHUB_ACTION_PATH" >> $GITHUB_PATH
        echo "GITHUB_ACTION_PATH=$GITHUB_ACTION_PATH"
        echo "---"
        find "$GITHUB_ACTION_PATH" -type f
        echo "---"
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    # Cache the 'sechub/github-actions/scan' subdirectory of the SecHub repository to speed up the checkout process
    - name: Cache SecHub client
      uses: actions/cache@v3
      with:
        path: ${{ github.workspace }}/.sechub-gha/client/
        key: ${{ runner.os }}-sechub-client-cache

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: ${{ github.action_path }}

    # Copy the index.js to the root of the repository
    # By doing this any file and folder references inside the scan action will be relative to the root of the repository
    # The index.js file will be copied as 'sechub-scan.js' and the 'exec-child.js' file will be copied as 'sechub-exec-child.js'
    # This is done to avoid any conflicts with existing 'index.js' & 'exec-child.js' files in the repository
    - name: Copy index.js To root of repository
      run: |
        cp "$GITHUB_ACTION_PATH"/dist/index.js sechub-scan.js
        sed -i 's/exec-child/sechub-exec-child/g' sechub-scan.js
        chmod +x sechub-scan.js
        cp "$GITHUB_ACTION_PATH"/dist/exec-child.js sechub-exec-child.js
        ls -al
      working-directory: ${{ github.workspace }}
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}

    - name: Set GitHub Environment Variables
      uses: actions/github-script@v7
      env:
        github-token: ${{ github.token }}
      with:
        script: |
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env['ACTIONS_RUNTIME_TOKEN'])
          core.exportVariable('ACTIONS_RUNTIME_URL', process.env['ACTIONS_RUNTIME_URL'])
          core.exportVariable('ACTIONS_CACHE_URL', process.env['ACTIONS_CACHE_URL'])

    - name: Run SecHub Scan
      run: node sechub-scan.js
      env:
        config-path: ${{ inputs.config-path }}
        url: ${{ inputs.url }}
        api-token: ${{ inputs.api-token }}
        user: ${{ inputs.user }}
        project-name: ${{ inputs.project-name }}
        version: ${{ inputs.version }}
        add-scm-history: ${{ inputs.add-scm-history }}
        scan-types: ${{ inputs.scan-types }}
        content-type: ${{ inputs.content-type }}
        include-folders: ${{ inputs.include-folders }}
        exclude-folders: ${{ inputs.exclude-folders }}
        report-formats: ${{ inputs.report-formats }}
        trust-all: ${{ inputs.trust-all }}
        debug: ${{ inputs.debug }}
        fail-job-with-findings: ${{ inputs.fail-job-with-findings }}
        ACTIONS_RUNTIME_TOKEN: ${{ env.ACTIONS_RUNTIME_TOKEN }}
        ACTIONS_RUNTIME_URL: ${{ env.ACTIONS_RUNTIME_URL }}
        ACTIONS_CACHE_URL: ${{ env.ACTIONS_CACHE_URL }}
      shell: bash
