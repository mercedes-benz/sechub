# SPDX-License-Identifier: MIT

# This is a sample values file containing the defaults.

name: sechub-webui

image: "ghcr.io/mercedes-benz/sechub/sechub-webui:latest"
# Optional: If your image is in a private registry, you can specify pull secrets defined in k8s
#   Docs: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#   Example:
# imagePullSecrets: |-
#   - name: sechub-pull-secret
#   - name: sps2

# Number of instances to spin up
replicaCount: 1

resources:
  requests:
    # Initial container memory size
    memory: 256Mi
  limits:
    # Maximum container memory size
    memory: 1Gi

webui:
  # Possible values: server, development
  startMode: server
  sechubConnection:
    # "sechub-server:8443" works when the server is deployed in the same k8s cluster
    url: "https://sechub-server:8443/"
    # trustAllCertificates - 'true' if server is deployed in the same k8s cluster
    trustAllCertificates: false
    # Put the SecHub user id  in k8s secret secret-webui-connect:sechub_userid
    # Put the SecHub apitoken in k8s secret secret-webui-connect:sechub_apitoken
  logging:
    type:
      enabled: false
      appenderName: "LOGSTASH_JSON"
  spring:
    # Spring profiles (comma-separated list):
    # - Server mode: 'webui_localserver' (self-signed cert) or 'webui_server' (provide SSL certificate)
    # - SecHub connection: 'webui_mocked' or leave empty for connect to configured SecHub server
    profiles: "webui_localserver"
    # Configure Spring Boot's embedded Tomcat
    embeddedTomcat:
      logging:
        enabled: false
        accessLogFormat: "[ACCESS] %a %{org.apache.catalina.AccessLog.RemoteAddr}r %{X-Forwarded-For}i %{X-Forwarded-Host}i %l %t %D %F %B %S %u %r %s %b %{User-Agent}i"
  ssl:
    keystoreAlias: "undefined"
    # Alias in .p12 keystore.
    # - On `undefined`, a self-signed certificate will be used.
    # - otherwise, k8s secret `secret-webui-ssl` must be defined containing
    #   - `keystore_file` (containing the ssl certificate chain)
    #     Inside the .p12 keystore, an alias with this name is expected
    #     pointing to the ssl certificate to use
    #   - `keystore_password`
  # Development-only parameters:
  development:
    javaDebug: false
    # Enables analysis after application exit
    keepContainerAliveAfterApplicationCrash: false

# deploymentComment (optional):
#  When setting to a different value than before, it forces k8s to spin up a new container.
#  This way, you can force deployments e.g. when only secrets have changed.
deploymentComment: "my deployment comment"

service:
  loadbalancer:
    ip: ""
    port:
      name: webui-https
      number: 443
  # optional: Add annotations (goes to metadata.annotations)
  #           Can contain multiple lines. Example:
  # annotations: |-
  #   loadbalancer.openstack.org/keep-floatingip: "true"
  #   loadbalancer.openstack.org/proxy-protocol: "true"
  #
  # optional: Add finalizers (goes to metadata.finalizers)
  #           Can contain multiple lines. Example:
  # finalizers: |-
  #   - service.kubernetes.io/load-balancer-cleanup

# optional: Add annotations to template.metadata.annotations
#           Can contain multiple lines. Example for Prometheus actuator:
# templateMetadataAnnotations: |-
#   prometheus.io/scrape: "true"
#   prometheus.io/probe: "true"
#   prometheus.io/port: "10250"
#   prometheus.io/path: "/actuator/prometheus"

go_mmproxy:
  # Log the real client IP addresses via a go-mmproxy sidecar container
  # Otherwise one sees only the loadbalancer's IP in the logs.
  # go-mmproxy -> https://github.com/path-network/go-mmproxy
  # Spoofs the real client address taken from proxy-protocol so the SecHub server will log correctly.
  # (needs annotation loadbalancer.openstack.org/proxy-protocol: "true" - see above)
  enabled: false
  # Choose a "go-mmproxy" docker image. See e.g. https://hub.docker.com/search?q=go-mmproxy
  image: "example.org/go-mmproxy:2.1.0"
