// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject sechub-api-java
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */

// see https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-gradle-plugin/README.adoc
plugins {
	id 'org.openapi.generator'          
}

dependencies {
    implementation project(':sechub-commons-model')
    implementation project(':sechub-commons-archive')
    
    testImplementation project(':sechub-testframework')
    testImplementation spring_boot_dependency.junit_jupiter
    testImplementation spring_boot_dependency.junit_jupiter
    testImplementation library.apache_commons_io
    testImplementation library.mockito_inline
}

/*
 * ATTENTION: 
 * 
 * The next block is copied from sechub-api-java/gen/build.gradle and must be copied  
 * again when a new open apigenerator version is used and new generated.
 * 
 * Just call `./gradlew callOpenAPIJavaGenerator` and the use the new output in this case.
 * 
**/

ext {
    swagger_annotations_version = "1.6.3"
    jackson_version = "2.13.0"
    jackson_databind_version = "2.13.0"
    jackson_databind_nullable_version = "0.2.2"
    jakarta_annotation_version = "1.3.5"
    jersey_version = "2.35"
    junit_version = "4.13.2"
}

dependencies {
    implementation "io.swagger:swagger-annotations:$swagger_annotations_version"
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation "org.glassfish.jersey.core:jersey-client:$jersey_version"
    implementation "org.glassfish.jersey.inject:jersey-hk2:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:$jersey_version"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:$jersey_version"
    implementation "org.glassfish.jersey.connectors:jersey-apache-connector:$jersey_version"
    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_databind_version"
    implementation "org.openapitools:jackson-databind-nullable:$jackson_databind_nullable_version"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
    testImplementation "junit:junit:$junit_version"
}

/* END of copied part */

sourceSets {
    main {
    	java {
    	    srcDir 'gen/src/main/java'
    	}
    }
    
}

def specFilePath = "$rootDir/sechub-doc/build/api-spec/openapi3.json"

openApiValidate {
    inputSpec = "$specFilePath"
}

task cleanUpGenFolder(type: Delete) {
    delete "gen"
}

// For details about GeneratorTask options look at
// https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
task callOpenAPIJavaGenerator(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    dependsOn cleanUpGenFolder
    
    generatorName =      "java"
                         
    inputSpec =          "$specFilePath"
    outputDir =          "$rootDir/sechub-api-java/gen"
    apiPackage =         "com.mercedesbenz.sechub.api.internal.gen"
    invokerPackage =     "com.mercedesbenz.sechub.api.internal.gen.invoker"
    modelPackage =       "com.mercedesbenz.sechub.api.internal.gen.model"
                         
    modelNamePrefix =    "OpenApi"
    
    generateModelTests = false
    generateApiTests   = false
    
    globalProperties = [
            validateSpec       : "true",
            modelDocs          : "false",
            models             : "",  // generate all
            apis               : "", // generate all
            supportingFiles    : "",  // generate all
    ]
    // java generator: https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md
    configOptions = [
    		groupId 					: "com.mercedesbenz.sechub",
    		version                     : "${project.version}",
            performBeanValidation		: "false",
            useBeanValidation    		: "false",
            dateLibrary          		: "java8",
            serializableModel    		: "true",
            serializationLibrary 		: "jackson",
            artifactId           		: "sechub-api-java",
            artifactDescription			: "The SecHub API library for Java",
            artifactUrl					: "https://github.com/mercedes-benz/sechub",
            legacyDiscriminatorBehavior : "false",
            library 					: "native", // Uses the Java HTTP Client (available in Java 11+)
            licenseName 				: "MIT",
            licenseUrl					: "https://github.com/mercedes-benz/sechub/blob/develop/LICENSE",
            developerEmail				: "",
            developerName				: "",
            developerOrganization       : "Mercedes-Benz Tech Innovation",
            developerOrganizationUrl    : "https://www.mercedes-benz-techinnovation.com/",
            scmConnection				: "",
            scmDeveloperConnection		: "",
            scmUrl						: "https://github.com/mercedes-benz/sechub"
    ]

	doFirst {
        //cleanup openapi gen folder if present
        delete fileTree ( dir: outputDir )
    }
}


tasks.withType(org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

ext.apiPublishNecessary = "${project.version}" != "0.0.0";

task generateAPIJava(){
    dependsOn callOpenAPIJavaGenerator
}

/* 
 * The assemble task will normally be called from IDE integrations (eclipse buildship, intellij) to setup parts
 */
tasks.named("assemble") {
   dependsOn generateAPIJava // an assemble shall always generate all parts
}

tasks.named("compileJava") {
    dependsOn generateAPIJava, spotlessApply  // define this task NEEDS THE OUTPUT (avoid build warnings/errors) + spotless   
}

tasks.named("spotlessJava"){
    dependsOn callOpenAPIJavaGenerator // define this task NEEDS THE OUTPUT
}
/*
* If the gradle task eclipse is used, the assemble task shall be used as well
* to avoid compile errors. 
*
* Direct IDE integrations (eclipse buildship, intellij) normally directly use 
* the assemble task before importing projects/modules, so it should work there always. 
*/ 
tasks.named("eclipse") {
    dependsOn("assemble")
}

