/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiClient;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiException;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiResponse;
import com.mercedesbenz.sechub.api.internal.gen.invoker.Pair;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiFalsePositives;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiFalsePositivesForJob;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiJobId;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiJobStatus;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProjectJobList;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiScanJob;

public class ProjectApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public ProjectApi() {
        this(new ApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * User approves sechub job User approves sechub job
     *
     * @param projectId The id of the project where sechub job shall be approved
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @throws ApiException if fails to make API call
     */
    public void userApprovesJob(String projectId, String jobUUID) throws ApiException {
        userApprovesJobWithHttpInfo(projectId, jobUUID);
    }

    /**
     * User approves sechub job User approves sechub job
     *
     * @param projectId The id of the project where sechub job shall be approved
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userApprovesJobWithHttpInfo(String projectId, String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userApprovesJobRequestBuilder(projectId, jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userApprovesJob", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userApprovesJobRequestBuilder(String projectId, String jobUUID) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userApprovesJob");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userApprovesJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}/approve".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User checks sechub job state User checks sechub job state
     *
     * @param projectId The id of the project where sechub job was started for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @return OpenApiJobStatus
     * @throws ApiException if fails to make API call
     */
    public OpenApiJobStatus userChecksJobStatus(String projectId, String jobUUID) throws ApiException {
        ApiResponse<OpenApiJobStatus> localVarResponse = userChecksJobStatusWithHttpInfo(projectId, jobUUID);
        return localVarResponse.getData();
    }

    /**
     * User checks sechub job state User checks sechub job state
     *
     * @param projectId The id of the project where sechub job was started for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @return ApiResponse&lt;OpenApiJobStatus&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiJobStatus> userChecksJobStatusWithHttpInfo(String projectId, String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userChecksJobStatusRequestBuilder(projectId, jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userChecksJobStatus", localVarResponse);
            }
            return new ApiResponse<OpenApiJobStatus>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiJobStatus>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userChecksJobStatusRequestBuilder(String projectId, String jobUUID) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userChecksJobStatus");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userChecksJobStatus");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User creates a new sechub job User creates a new sechub job
     *
     * @param projectId      The unique id of the project id where a new sechub job
     *                       shall be created (required)
     * @param openApiScanJob (optional)
     * @return OpenApiJobId
     * @throws ApiException if fails to make API call
     */
    public OpenApiJobId userCreatesNewJob(String projectId, OpenApiScanJob openApiScanJob) throws ApiException {
        ApiResponse<OpenApiJobId> localVarResponse = userCreatesNewJobWithHttpInfo(projectId, openApiScanJob);
        return localVarResponse.getData();
    }

    /**
     * User creates a new sechub job User creates a new sechub job
     *
     * @param projectId      The unique id of the project id where a new sechub job
     *                       shall be created (required)
     * @param openApiScanJob (optional)
     * @return ApiResponse&lt;OpenApiJobId&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiJobId> userCreatesNewJobWithHttpInfo(String projectId, OpenApiScanJob openApiScanJob) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userCreatesNewJobRequestBuilder(projectId, openApiScanJob);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userCreatesNewJob", localVarResponse);
            }
            return new ApiResponse<OpenApiJobId>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiJobId>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userCreatesNewJobRequestBuilder(String projectId, OpenApiScanJob openApiScanJob) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userCreatesNewJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiScanJob);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User defines mock data configuration for project User defines mock data
     * configuration for project
     *
     * @param projectId (required)
     * @param body      (optional)
     * @throws ApiException if fails to make API call
     */
    public void userDefinesProjectMockdata(String projectId, Object body) throws ApiException {
        userDefinesProjectMockdataWithHttpInfo(projectId, body);
    }

    /**
     * User defines mock data configuration for project User defines mock data
     * configuration for project
     *
     * @param projectId (required)
     * @param body      (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userDefinesProjectMockdataWithHttpInfo(String projectId, Object body) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userDefinesProjectMockdataRequestBuilder(projectId, body);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userDefinesProjectMockdata", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userDefinesProjectMockdataRequestBuilder(String projectId, Object body) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userDefinesProjectMockdata");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/mockdata".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User downloads sechub job report User downloads sechub job report
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object userDownloadsJobReport(String projectId, String jobUUID) throws ApiException {
        ApiResponse<Object> localVarResponse = userDownloadsJobReportWithHttpInfo(projectId, jobUUID);
        return localVarResponse.getData();
    }

    /**
     * User downloads sechub job report User downloads sechub job report
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> userDownloadsJobReportWithHttpInfo(String projectId, String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userDownloadsJobReportRequestBuilder(projectId, jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userDownloadsJobReport", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userDownloadsJobReportRequestBuilder(String projectId, String jobUUID) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userDownloadsJobReport");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userDownloadsJobReport");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/report/{jobUUID}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, text/html;charset&#x3D;UTF-8");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User downloads job report in SPDX format User downloads job report in SPDX
     * format
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object userDownloadsSpdxJobReportJson(String projectId, String jobUUID) throws ApiException {
        ApiResponse<Object> localVarResponse = userDownloadsSpdxJobReportJsonWithHttpInfo(projectId, jobUUID);
        return localVarResponse.getData();
    }

    /**
     * User downloads job report in SPDX format User downloads job report in SPDX
     * format
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> userDownloadsSpdxJobReportJsonWithHttpInfo(String projectId, String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userDownloadsSpdxJobReportJsonRequestBuilder(projectId, jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userDownloadsSpdxJobReportJson", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userDownloadsSpdxJobReportJsonRequestBuilder(String projectId, String jobUUID) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userDownloadsSpdxJobReportJson");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userDownloadsSpdxJobReportJson");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/report/spdx/{jobUUID}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User fetches false positive configuration of project User fetches false
     * positive configuration of project
     *
     * @param projectId The project id (required)
     * @return OpenApiFalsePositives
     * @throws ApiException if fails to make API call
     */
    public OpenApiFalsePositives userFetchesFalsePositiveConfigurationOfProject(String projectId) throws ApiException {
        ApiResponse<OpenApiFalsePositives> localVarResponse = userFetchesFalsePositiveConfigurationOfProjectWithHttpInfo(projectId);
        return localVarResponse.getData();
    }

    /**
     * User fetches false positive configuration of project User fetches false
     * positive configuration of project
     *
     * @param projectId The project id (required)
     * @return ApiResponse&lt;OpenApiFalsePositives&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiFalsePositives> userFetchesFalsePositiveConfigurationOfProjectWithHttpInfo(String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userFetchesFalsePositiveConfigurationOfProjectRequestBuilder(projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userFetchesFalsePositiveConfigurationOfProject", localVarResponse);
            }
            return new ApiResponse<OpenApiFalsePositives>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiFalsePositives>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userFetchesFalsePositiveConfigurationOfProjectRequestBuilder(String projectId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userFetchesFalsePositiveConfigurationOfProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/false-positives".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User lists jobs for project User lists jobs for project
     *
     * @param projectId          The id of the project where job information shall
     *                           be fetched for (required)
     * @param size               The wanted (maximum) size for the result set. When
     *                           not defined, the default will be 1. (optional)
     * @param page               The wanted page number. When not defined, the
     *                           default will be 0. (optional)
     * @param metadataLabelsStar An optional dynamic query parameter to filter jobs
     *                           by labels. The syntax is
     *                           &#39;metadata.labels.${labelKey}&#x3D;${labelValue}&#39;.
     *                           It is possible to query for multiple labels (up to
     *                           10 ). The filter works as an AND combination: Only
     *                           jobs having all wanted label key value combinations
     *                           are returned. (optional)
     * @param withMetaData       An optional parameter to define if meta data shall
     *                           be fetched as well. When not defined, the default
     *                           will be false. (optional)
     * @return OpenApiProjectJobList
     * @throws ApiException if fails to make API call
     */
    public OpenApiProjectJobList userListsJobsforProject(String projectId, String size, String page, String metadataLabelsStar, String withMetaData)
            throws ApiException {
        ApiResponse<OpenApiProjectJobList> localVarResponse = userListsJobsforProjectWithHttpInfo(projectId, size, page, metadataLabelsStar, withMetaData);
        return localVarResponse.getData();
    }

    /**
     * User lists jobs for project User lists jobs for project
     *
     * @param projectId          The id of the project where job information shall
     *                           be fetched for (required)
     * @param size               The wanted (maximum) size for the result set. When
     *                           not defined, the default will be 1. (optional)
     * @param page               The wanted page number. When not defined, the
     *                           default will be 0. (optional)
     * @param metadataLabelsStar An optional dynamic query parameter to filter jobs
     *                           by labels. The syntax is
     *                           &#39;metadata.labels.${labelKey}&#x3D;${labelValue}&#39;.
     *                           It is possible to query for multiple labels (up to
     *                           10 ). The filter works as an AND combination: Only
     *                           jobs having all wanted label key value combinations
     *                           are returned. (optional)
     * @param withMetaData       An optional parameter to define if meta data shall
     *                           be fetched as well. When not defined, the default
     *                           will be false. (optional)
     * @return ApiResponse&lt;OpenApiProjectJobList&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiProjectJobList> userListsJobsforProjectWithHttpInfo(String projectId, String size, String page, String metadataLabelsStar,
            String withMetaData) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userListsJobsforProjectRequestBuilder(projectId, size, page, metadataLabelsStar, withMetaData);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userListsJobsforProject", localVarResponse);
            }
            return new ApiResponse<OpenApiProjectJobList>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiProjectJobList>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userListsJobsforProjectRequestBuilder(String projectId, String size, String page, String metadataLabelsStar,
            String withMetaData) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userListsJobsforProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/jobs".replace("{projectId}", ApiClient.urlEncode(projectId));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "size";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("size", size));
        localVarQueryParameterBaseName = "page";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
        localVarQueryParameterBaseName = "metadata.labels.*";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("metadata.labels.*", metadataLabelsStar));
        localVarQueryParameterBaseName = "withMetaData";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("withMetaData", withMetaData));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User marks false positives for finished sechub job User marks false positives
     * for finished sechub job
     *
     * @param projectId                   The projectId of the project where users
     *                                    adds false positives for (required)
     * @param openApiFalsePositivesForJob (optional)
     * @throws ApiException if fails to make API call
     */
    public void userMarksFalsePositivesForJob(String projectId, OpenApiFalsePositivesForJob openApiFalsePositivesForJob) throws ApiException {
        userMarksFalsePositivesForJobWithHttpInfo(projectId, openApiFalsePositivesForJob);
    }

    /**
     * User marks false positives for finished sechub job User marks false positives
     * for finished sechub job
     *
     * @param projectId                   The projectId of the project where users
     *                                    adds false positives for (required)
     * @param openApiFalsePositivesForJob (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userMarksFalsePositivesForJobWithHttpInfo(String projectId, OpenApiFalsePositivesForJob openApiFalsePositivesForJob)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userMarksFalsePositivesForJobRequestBuilder(projectId, openApiFalsePositivesForJob);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userMarksFalsePositivesForJob", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userMarksFalsePositivesForJobRequestBuilder(String projectId, OpenApiFalsePositivesForJob openApiFalsePositivesForJob)
            throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userMarksFalsePositivesForJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/false-positives".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiFalsePositivesForJob);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User retrieves mock data configuration for project User retrieves mock data
     * configuration for project
     *
     * @param projectId (required)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object userRetrievesProjectMockdata(String projectId) throws ApiException {
        ApiResponse<Object> localVarResponse = userRetrievesProjectMockdataWithHttpInfo(projectId);
        return localVarResponse.getData();
    }

    /**
     * User retrieves mock data configuration for project User retrieves mock data
     * configuration for project
     *
     * @param projectId (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> userRetrievesProjectMockdataWithHttpInfo(String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userRetrievesProjectMockdataRequestBuilder(projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("userRetrievesProjectMockdata", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userRetrievesProjectMockdataRequestBuilder(String projectId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userRetrievesProjectMockdata");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/mockdata".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User unmarks existing false positive definitons User unmarks existing false
     * positive definitons
     *
     * @param projectId The project id (required)
     * @param jobUUID   Job uuid (required)
     * @param findingId Finding id - in combination with job UUID this defines the
     *                  false positive to remove (required)
     * @throws ApiException if fails to make API call
     */
    public void userUnmarksFalsePositives(String projectId, String jobUUID, String findingId) throws ApiException {
        userUnmarksFalsePositivesWithHttpInfo(projectId, jobUUID, findingId);
    }

    /**
     * User unmarks existing false positive definitons User unmarks existing false
     * positive definitons
     *
     * @param projectId The project id (required)
     * @param jobUUID   Job uuid (required)
     * @param findingId Finding id - in combination with job UUID this defines the
     *                  false positive to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userUnmarksFalsePositivesWithHttpInfo(String projectId, String jobUUID, String findingId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userUnmarksFalsePositivesRequestBuilder(projectId, jobUUID, findingId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userUnmarksFalsePositives", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userUnmarksFalsePositivesRequestBuilder(String projectId, String jobUUID, String findingId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userUnmarksFalsePositives");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userUnmarksFalsePositives");
        }
        // verify the required parameter 'findingId' is set
        if (findingId == null) {
            throw new ApiException(400, "Missing the required parameter 'findingId' when calling userUnmarksFalsePositives");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/false-positive/{jobUUID}/{findingId}".replace("{projectId}", ApiClient.urlEncode(projectId))
                .replace("{jobUUID}", ApiClient.urlEncode(jobUUID)).replace("{findingId}", ApiClient.urlEncode(findingId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User uploads binaries User uploads binaries
     *
     * @param projectId The id of the project for which the binaries are uploaded
     *                  for (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param xFileSize The file size of the tar-archive to upload in bytes. Needs
     *                  to be a positive integer value. (required)
     * @throws ApiException if fails to make API call
     */
    public void userUploadsBinaries(String projectId, String jobUUID, String xFileSize) throws ApiException {
        userUploadsBinariesWithHttpInfo(projectId, jobUUID, xFileSize);
    }

    /**
     * User uploads binaries User uploads binaries
     *
     * @param projectId The id of the project for which the binaries are uploaded
     *                  for (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param xFileSize The file size of the tar-archive to upload in bytes. Needs
     *                  to be a positive integer value. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userUploadsBinariesWithHttpInfo(String projectId, String jobUUID, String xFileSize) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userUploadsBinariesRequestBuilder(projectId, jobUUID, xFileSize);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userUploadsBinaries", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userUploadsBinariesRequestBuilder(String projectId, String jobUUID, String xFileSize) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userUploadsBinaries");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userUploadsBinaries");
        }
        // verify the required parameter 'xFileSize' is set
        if (xFileSize == null) {
            throw new ApiException(400, "Missing the required parameter 'xFileSize' when calling userUploadsBinaries");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}/binaries".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (xFileSize != null) {
            localVarRequestBuilder.header("x-file-size", xFileSize);
        }
        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User uploads source code User uploads source code
     *
     * @param projectId The id of the project where sourcecode shall be uploaded for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @throws ApiException if fails to make API call
     */
    public void userUploadsSourceCode(String projectId, String jobUUID, String checkSum) throws ApiException {
        userUploadsSourceCodeWithHttpInfo(projectId, jobUUID, checkSum);
    }

    /**
     * User uploads source code User uploads source code
     *
     * @param projectId The id of the project where sourcecode shall be uploaded for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userUploadsSourceCodeWithHttpInfo(String projectId, String jobUUID, String checkSum) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userUploadsSourceCodeRequestBuilder(projectId, jobUUID, checkSum);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userUploadsSourceCode", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userUploadsSourceCodeRequestBuilder(String projectId, String jobUUID, String checkSum) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userUploadsSourceCode");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userUploadsSourceCode");
        }
        // verify the required parameter 'checkSum' is set
        if (checkSum == null) {
            throw new ApiException(400, "Missing the required parameter 'checkSum' when calling userUploadsSourceCode");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}/sourcecode".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        String localVarQueryParameterBaseName;
        localVarQueryParameterBaseName = "checkSum";
        localVarQueryParams.addAll(ApiClient.parameterToPairs("checkSum", checkSum));

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
