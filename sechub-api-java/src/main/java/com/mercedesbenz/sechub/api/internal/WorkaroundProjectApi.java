/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublisher;
import java.net.http.HttpResponse;
import java.nio.file.Path;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.StringJoiner;
import java.util.function.Consumer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mercedesbenz.sechub.api.SecHubReport;
import com.mercedesbenz.sechub.api.internal.gen.ProjectApi;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiClient;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiException;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiResponse;
import com.mercedesbenz.sechub.api.internal.gen.invoker.Pair;
import com.mercedesbenz.sechub.api.internal.net.MultiPartBodyPublisherBuilder;
import com.mercedesbenz.sechub.commons.core.CommonConstants;

/**
 * Some parts of the generated {@link ProjectApi} do not work well - it seems
 * the open API definition generation has some issues . To handle this,
 * generated ProjectApi was copied. Then all public methods were removed. Only
 * problematic public methods from AdminApi will be added. So it is clear were
 * the problems lie and what must be fixed in open api definition file
 * generation in 'sechub-doc'.
 *
 * Attention: We do ONLY use this class and its methods were necessary. The
 * origin class shall be used when the methods there work without any problems
 * (means new generated stuff is available)
 *
 * @author Albert Tregnaghi
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-26T15:00:58.897388453+02:00[Europe/Berlin]")
public class WorkaroundProjectApi {
    private final HttpClient memberVarHttpClient;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private ObjectMapper memberVarObjectMapper;

    public WorkaroundProjectApi() {
        this(new ApiClient());
    }

    public WorkaroundProjectApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarObjectMapper = apiClient.getObjectMapper();
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * User uploads binaries User uploads binaries
     *
     * @param projectId The id of the project for which the binaries are uploaded
     *                  for (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @param xFileSize The file size of the tar-archive to upload in bytes. Needs
     *                  to be a positive integer value. (required)
     * @param file      File to upload...
     * @throws ApiException if fails to make API call
     */
    public void userUploadsBinaries(String projectId, String jobUUID, String checkSum, String xFileSize, Path file) throws ApiException {
        userUploadsBinariesWithHttpInfo(projectId, jobUUID, checkSum, xFileSize, file);
    }

    /**
     * User uploads binaries User uploads binaries
     *
     * @param projectId The id of the project for which the binaries are uploaded
     *                  for (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @param xFileSize The file size of the tar-archive to upload in bytes. Needs
     *                  to be a positive integer value. (required)
     * @param file      File to upload...
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userUploadsBinariesWithHttpInfo(String projectId, String jobUUID, String checkSum, String xFileSize, Path file)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userUploadsBinariesRequestBuilder(projectId, jobUUID, checkSum, xFileSize, file);
        try {

            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userUploadsBinaries", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userUploadsBinariesRequestBuilder(String projectId, String jobUUID, String checkSum, String xFileSize, Path file)
            throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userUploadsBinaries");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userUploadsBinaries");
        }
        // verify the required parameter 'checkSum' is set
        if (checkSum == null) {
            throw new ApiException(400, "Missing the required parameter 'checkSum' when calling userUploadsBinaries");
        }
        // verify the required parameter 'xFileSize' is set
        if (xFileSize == null) {
            throw new ApiException(400, "Missing the required parameter 'xFileSize' when calling userUploadsBinaries");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}/binaries".replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
                .replace("{jobUUID}", ApiClient.urlEncode(jobUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        /* workaround2 - we need no query params */
        // generated but wrong:
        // localVarQueryParams.addAll(ApiClient.parameterToPairs("checkSum", checkSum));
        /* workaround 2 end */

        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        if (xFileSize != null) {
            localVarRequestBuilder.header("x-file-size", xFileSize.toString());
        }
        localVarRequestBuilder.header("Accept", "application/json");

        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        /* workaround start: upload the given file ... */
        /* @formatter:off */
        MultiPartBodyPublisherBuilder builder = new MultiPartBodyPublisherBuilder().
            addFile(CommonConstants.MULTIPART_FILE, file).
            addString(CommonConstants.MULTIPART_CHECKSUM, checkSum);

        BodyPublisher publisher = builder.build();

        localVarRequestBuilder.setHeader("Content-Type","multipart/form-data;boundary="+builder.getBoundary());

        /* @formatter:on */
        localVarRequestBuilder.POST(publisher);

        /* workaround end */

        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * User uploads source code User uploads source code
     *
     * @param projectId The id of the project where sourcecode shall be uploaded for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @param file      File to upload...
     * @throws ApiException if fails to make API call
     */
    public void userUploadsSourceCode(String projectId, String jobUUID, String checkSum, Path file) throws ApiException {
        userUploadsSourceCodeWithHttpInfo(projectId, jobUUID, checkSum, file);
    }

    /**
     * User uploads source code User uploads source code
     *
     * @param projectId The id of the project where sourcecode shall be uploaded for
     *                  (required)
     * @param jobUUID   The SecHub jobUUID. During the job creation this unique job
     *                  identifier is automatically generated by SecHub. (required)
     * @param checkSum  A sha256 checksum for file upload validation (required)
     * @param file      File to upload...
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> userUploadsSourceCodeWithHttpInfo(String projectId, String jobUUID, String checkSum, Path file) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userUploadsSourceCodeRequestBuilder(projectId, jobUUID, checkSum, file);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userUploadsSourceCode", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userUploadsSourceCodeRequestBuilder(String projectId, String jobUUID, String checkSum, Path file) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userUploadsSourceCode");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userUploadsSourceCode");
        }
        // verify the required parameter 'checkSum' is set
        if (checkSum == null) {
            throw new ApiException(400, "Missing the required parameter 'checkSum' when calling userUploadsSourceCode");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/job/{jobUUID}/sourcecode".replace("{projectId}", ApiClient.urlEncode(projectId.toString()))
                .replace("{jobUUID}", ApiClient.urlEncode(jobUUID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<>();
        StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
        /* workaround4 - we need no query params */
        // generated but wrong:
        // localVarQueryParams.addAll(ApiClient.parameterToPairs("checkSum", checkSum));
        /* workaround 4 end */
        if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
            StringJoiner queryJoiner = new StringJoiner("&");
            localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
            if (localVarQueryStringJoiner.length() != 0) {
                queryJoiner.add(localVarQueryStringJoiner.toString());
            }
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
        } else {
            localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
        }

        localVarRequestBuilder.header("Accept", "application/json");

        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        /* workaround3 start: upload the given file ... */
        /* @formatter:off */
        MultiPartBodyPublisherBuilder builder = new MultiPartBodyPublisherBuilder().
            addFile(CommonConstants.MULTIPART_FILE, file).
            addString(CommonConstants.MULTIPART_CHECKSUM, checkSum);

        BodyPublisher publisher = builder.build();

        localVarRequestBuilder.setHeader("Content-Type","multipart/form-data;boundary="+builder.getBoundary());

        /* @formatter:on */
        localVarRequestBuilder.POST(publisher);
        /* workaround3 end */

        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /*
     * Workaround5: use SecHubReport as object instead of Object, so object mapper
     * works as epxected
     */
    /**
     * User downloads sechub job report User downloads sechub job report
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public SecHubReport userDownloadsJobReport(String projectId, String jobUUID) throws ApiException {
        ApiResponse<SecHubReport> localVarResponse = userDownloadsJobReportWithHttpInfo(projectId, jobUUID);
        return localVarResponse.getData();
    }

    /**
     * User downloads sechub job report User downloads sechub job report
     *
     * @param projectId The project Id (required)
     * @param jobUUID   The job UUID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<SecHubReport> userDownloadsJobReportWithHttpInfo(String projectId, String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = userDownloadsJobReportRequestBuilder(projectId, jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("userDownloadsJobReport", localVarResponse);
                }
                return new ApiResponse<SecHubReport>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                        localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SecHubReport>() {
                        }) // closes the InputStream
                );
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder userDownloadsJobReportRequestBuilder(String projectId, String jobUUID) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling userDownloadsJobReport");
        }
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling userDownloadsJobReport");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/project/{projectId}/report/{jobUUID}".replace("{projectId}", ApiClient.urlEncode(projectId.toString())).replace("{jobUUID}",
                ApiClient.urlEncode(jobUUID.toString()));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json, text/html;charset&#x3D;UTF-8");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
    /* end workaround 5 */
}
