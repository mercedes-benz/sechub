/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen.model;

import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * OpenApiMappingConfigurationEntriesInner
 */
@JsonPropertyOrder({ OpenApiMappingConfigurationEntriesInner.JSON_PROPERTY_PATTERN, OpenApiMappingConfigurationEntriesInner.JSON_PROPERTY_COMMENT,
        OpenApiMappingConfigurationEntriesInner.JSON_PROPERTY_REPLACEMENT })

public class OpenApiMappingConfigurationEntriesInner implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String JSON_PROPERTY_PATTERN = "pattern";
    private String pattern;

    public static final String JSON_PROPERTY_COMMENT = "comment";
    private String comment;

    public static final String JSON_PROPERTY_REPLACEMENT = "replacement";
    private String replacement;

    public OpenApiMappingConfigurationEntriesInner() {
    }

    public OpenApiMappingConfigurationEntriesInner pattern(String pattern) {
        this.pattern = pattern;
        return this;
    }

    /**
     * Pattern
     *
     * @return pattern
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PATTERN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getPattern() {
        return pattern;
    }

    @JsonProperty(JSON_PROPERTY_PATTERN)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    public OpenApiMappingConfigurationEntriesInner comment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Comment
     *
     * @return comment
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_COMMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getComment() {
        return comment;
    }

    @JsonProperty(JSON_PROPERTY_COMMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setComment(String comment) {
        this.comment = comment;
    }

    public OpenApiMappingConfigurationEntriesInner replacement(String replacement) {
        this.replacement = replacement;
        return this;
    }

    /**
     * Replacement
     *
     * @return replacement
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_REPLACEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getReplacement() {
        return replacement;
    }

    @JsonProperty(JSON_PROPERTY_REPLACEMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setReplacement(String replacement) {
        this.replacement = replacement;
    }

    /**
     * Return true if this MappingConfiguration_entries_inner object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenApiMappingConfigurationEntriesInner mappingConfigurationEntriesInner = (OpenApiMappingConfigurationEntriesInner) o;
        return Objects.equals(pattern, mappingConfigurationEntriesInner.pattern) && Objects.equals(comment, mappingConfigurationEntriesInner.comment)
                && Objects.equals(replacement, mappingConfigurationEntriesInner.replacement);
    }

    @Override
    public int hashCode() {
        return Objects.hash(pattern, comment, replacement);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenApiMappingConfigurationEntriesInner {\n");
        sb.append("    pattern: ").append(toIndentedString(pattern)).append("\n");
        sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
        sb.append("    replacement: ").append(toIndentedString(replacement)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `pattern` to the URL query string
        if (getPattern() != null) {
            joiner.add(String.format("%spattern%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getPattern()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        // add `comment` to the URL query string
        if (getComment() != null) {
            joiner.add(String.format("%scomment%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getComment()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        // add `replacement` to the URL query string
        if (getReplacement() != null) {
            joiner.add(String.format("%sreplacement%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getReplacement()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
