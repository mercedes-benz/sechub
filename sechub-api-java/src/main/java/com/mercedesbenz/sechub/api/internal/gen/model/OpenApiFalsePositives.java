/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * OpenApiFalsePositives
 */
@JsonPropertyOrder({ OpenApiFalsePositives.JSON_PROPERTY_FALSE_POSITIVES })

public class OpenApiFalsePositives implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String JSON_PROPERTY_FALSE_POSITIVES = "falsePositives";
    private List<OpenApiFalsePositivesFalsePositivesInner> falsePositives;

    public OpenApiFalsePositives() {
    }

    public OpenApiFalsePositives falsePositives(List<OpenApiFalsePositivesFalsePositivesInner> falsePositives) {
        this.falsePositives = falsePositives;
        return this;
    }

    public OpenApiFalsePositives addFalsePositivesItem(OpenApiFalsePositivesFalsePositivesInner falsePositivesItem) {
        if (falsePositives == null) {
            falsePositives = new ArrayList<>();
        }
        falsePositives.add(falsePositivesItem);
        return this;
    }

    /**
     * Job data list containing false positive setup based on former jobs
     *
     * @return falsePositives
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_FALSE_POSITIVES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<OpenApiFalsePositivesFalsePositivesInner> getFalsePositives() {
        return falsePositives;
    }

    @JsonProperty(JSON_PROPERTY_FALSE_POSITIVES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setFalsePositives(List<OpenApiFalsePositivesFalsePositivesInner> falsePositives) {
        this.falsePositives = falsePositives;
    }

    /**
     * Return true if this FalsePositives object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenApiFalsePositives falsePositives = (OpenApiFalsePositives) o;
        return Objects.equals(this.falsePositives, falsePositives.falsePositives);
    }

    @Override
    public int hashCode() {
        return Objects.hash(falsePositives);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenApiFalsePositives {\n");
        sb.append("    falsePositives: ").append(toIndentedString(falsePositives)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `falsePositives` to the URL query string
        if (getFalsePositives() != null) {
            for (int i = 0; i < getFalsePositives().size(); i++) {
                if (getFalsePositives().get(i) != null) {
                    joiner.add(getFalsePositives().get(i).toUrlQueryString(String.format("%sfalsePositives%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        return joiner.toString();
    }
}
