/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen.model;

import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * OpenApiFalsePositivesForJob
 */
@JsonPropertyOrder({ OpenApiFalsePositivesForJob.JSON_PROPERTY_API_VERSION, OpenApiFalsePositivesForJob.JSON_PROPERTY_JOB_DATA,
        OpenApiFalsePositivesForJob.JSON_PROPERTY_TYPE })

public class OpenApiFalsePositivesForJob implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String JSON_PROPERTY_API_VERSION = "apiVersion";
    private String apiVersion;

    public static final String JSON_PROPERTY_JOB_DATA = "jobData";
    private List<OpenApiFalsePositivesForJobJobDataInner> jobData;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public OpenApiFalsePositivesForJob() {
    }

    public OpenApiFalsePositivesForJob apiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
        return this;
    }

    /**
     * The api version, currently only 1.0 is supported
     *
     * @return apiVersion
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_API_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getApiVersion() {
        return apiVersion;
    }

    @JsonProperty(JSON_PROPERTY_API_VERSION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setApiVersion(String apiVersion) {
        this.apiVersion = apiVersion;
    }

    public OpenApiFalsePositivesForJob jobData(List<OpenApiFalsePositivesForJobJobDataInner> jobData) {
        this.jobData = jobData;
        return this;
    }

    public OpenApiFalsePositivesForJob addJobDataItem(OpenApiFalsePositivesForJobJobDataInner jobDataItem) {
        if (jobData == null) {
            jobData = new ArrayList<>();
        }
        jobData.add(jobDataItem);
        return this;
    }

    /**
     * Job data list containing false positive setup based on former jobs
     *
     * @return jobData
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_JOB_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<OpenApiFalsePositivesForJobJobDataInner> getJobData() {
        return jobData;
    }

    @JsonProperty(JSON_PROPERTY_JOB_DATA)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setJobData(List<OpenApiFalsePositivesForJobJobDataInner> jobData) {
        this.jobData = jobData;
    }

    public OpenApiFalsePositivesForJob type(String type) {
        this.type = type;
        return this;
    }

    /**
     * The type of the json content. Currently only accepted value is
     * &#39;falsePositiveJobDataList&#39;.
     *
     * @return type
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Return true if this FalsePositivesForJob object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenApiFalsePositivesForJob falsePositivesForJob = (OpenApiFalsePositivesForJob) o;
        return Objects.equals(apiVersion, falsePositivesForJob.apiVersion) && Objects.equals(jobData, falsePositivesForJob.jobData)
                && Objects.equals(type, falsePositivesForJob.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(apiVersion, jobData, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenApiFalsePositivesForJob {\n");
        sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
        sb.append("    jobData: ").append(toIndentedString(jobData)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `apiVersion` to the URL query string
        if (getApiVersion() != null) {
            joiner.add(String.format("%sapiVersion%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getApiVersion()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        // add `jobData` to the URL query string
        if (getJobData() != null) {
            for (int i = 0; i < getJobData().size(); i++) {
                if (getJobData().get(i) != null) {
                    joiner.add(getJobData().get(i).toUrlQueryString(String.format("%sjobData%s%s", prefix, suffix,
                            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
                }
            }
        }

        // add `type` to the URL query string
        if (getType() != null) {
            joiner.add(String.format("%stype%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
