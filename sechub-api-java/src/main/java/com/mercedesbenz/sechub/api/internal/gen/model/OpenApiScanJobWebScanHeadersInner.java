/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen.model;

import java.io.Serializable;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * OpenApiScanJobWebScanHeadersInner
 */
@JsonPropertyOrder({ OpenApiScanJobWebScanHeadersInner.JSON_PROPERTY_ONLY_FOR_URLS, OpenApiScanJobWebScanHeadersInner.JSON_PROPERTY_USE,
        OpenApiScanJobWebScanHeadersInner.JSON_PROPERTY_NAME, OpenApiScanJobWebScanHeadersInner.JSON_PROPERTY_SENSITIVE,
        OpenApiScanJobWebScanHeadersInner.JSON_PROPERTY_VALUE })

public class OpenApiScanJobWebScanHeadersInner implements Serializable {
    private static final long serialVersionUID = 1L;

    public static final String JSON_PROPERTY_ONLY_FOR_URLS = "onlyForUrls";
    private List<String> onlyForUrls;

    public static final String JSON_PROPERTY_USE = "use";
    private List<String> use;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_SENSITIVE = "sensitive";
    private Boolean sensitive;

    public static final String JSON_PROPERTY_VALUE = "value";
    private String value;

    public OpenApiScanJobWebScanHeadersInner() {
    }

    public OpenApiScanJobWebScanHeadersInner onlyForUrls(List<String> onlyForUrls) {
        this.onlyForUrls = onlyForUrls;
        return this;
    }

    public OpenApiScanJobWebScanHeadersInner addOnlyForUrlsItem(String onlyForUrlsItem) {
        if (onlyForUrls == null) {
            onlyForUrls = new ArrayList<>();
        }
        onlyForUrls.add(onlyForUrlsItem);
        return this;
    }

    /**
     * Optional list of URLs this header shall be used for like:
     * https://mywebapp.com/path/. Can contain wildcards like:
     * https://mywebapp.com/path/&lt;*&gt;/with/wildcard
     *
     * @return onlyForUrls
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_ONLY_FOR_URLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getOnlyForUrls() {
        return onlyForUrls;
    }

    @JsonProperty(JSON_PROPERTY_ONLY_FOR_URLS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setOnlyForUrls(List<String> onlyForUrls) {
        this.onlyForUrls = onlyForUrls;
    }

    public OpenApiScanJobWebScanHeadersInner use(List<String> use) {
        this.use = use;
        return this;
    }

    public OpenApiScanJobWebScanHeadersInner addUseItem(String useItem) {
        if (use == null) {
            use = new ArrayList<>();
        }
        use.add(useItem);
        return this;
    }

    /**
     * Reference to the data section containing a file with the value for this
     * header, e.g if the value is to big for the sechub configuration. Always use
     * &#39;sources&#39; with a single &#39;file&#39; instead &#39;folders&#39;.
     *
     * @return use
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_USE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getUse() {
        return use;
    }

    @JsonProperty(JSON_PROPERTY_USE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUse(List<String> use) {
        this.use = use;
    }

    public OpenApiScanJobWebScanHeadersInner name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Name of the defined HTTP header.
     *
     * @return name
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public OpenApiScanJobWebScanHeadersInner sensitive(Boolean sensitive) {
        this.sensitive = sensitive;
        return this;
    }

    /**
     * Defines header masking. If &#39;true&#39; the header value will be replaced
     * with &#39;********&#39; inside the report, &#39;false&#39; will show the
     * value as is. Default is set to &#39;true&#39;.
     *
     * @return sensitive
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SENSITIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getSensitive() {
        return sensitive;
    }

    @JsonProperty(JSON_PROPERTY_SENSITIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSensitive(Boolean sensitive) {
        this.sensitive = sensitive;
    }

    public OpenApiScanJobWebScanHeadersInner value(String value) {
        this.value = value;
        return this;
    }

    /**
     * Value of the defined HTTP header. Either specify the header value directly
     * here or reference a data section with &#39;use&#39; e.g. if the value is to
     * big, but never specify both.
     *
     * @return value
     **/
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getValue() {
        return value;
    }

    @JsonProperty(JSON_PROPERTY_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Return true if this ScanJob_webScan_headers_inner object is equal to o.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenApiScanJobWebScanHeadersInner scanJobWebScanHeadersInner = (OpenApiScanJobWebScanHeadersInner) o;
        return Objects.equals(onlyForUrls, scanJobWebScanHeadersInner.onlyForUrls) && Objects.equals(use, scanJobWebScanHeadersInner.use)
                && Objects.equals(name, scanJobWebScanHeadersInner.name) && Objects.equals(sensitive, scanJobWebScanHeadersInner.sensitive)
                && Objects.equals(value, scanJobWebScanHeadersInner.value);
    }

    @Override
    public int hashCode() {
        return Objects.hash(onlyForUrls, use, name, sensitive, value);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenApiScanJobWebScanHeadersInner {\n");
        sb.append("    onlyForUrls: ").append(toIndentedString(onlyForUrls)).append("\n");
        sb.append("    use: ").append(toIndentedString(use)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    sensitive: ").append(toIndentedString(sensitive)).append("\n");
        sb.append("    value: ").append(toIndentedString(value)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert the instance into URL query string.
     *
     * @return URL query string
     */
    public String toUrlQueryString() {
        return toUrlQueryString(null);
    }

    /**
     * Convert the instance into URL query string.
     *
     * @param prefix prefix of the query string
     * @return URL query string
     */
    public String toUrlQueryString(String prefix) {
        String suffix = "";
        String containerSuffix = "";
        String containerPrefix = "";
        if (prefix == null) {
            // style=form, explode=true, e.g. /pet?name=cat&type=manx
            prefix = "";
        } else {
            // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
            prefix = prefix + "[";
            suffix = "]";
            containerSuffix = "]";
            containerPrefix = "[";
        }

        StringJoiner joiner = new StringJoiner("&");

        // add `onlyForUrls` to the URL query string
        if (getOnlyForUrls() != null) {
            for (int i = 0; i < getOnlyForUrls().size(); i++) {
                joiner.add(String.format("%sonlyForUrls%s%s=%s", prefix, suffix,
                        "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                        URLEncoder.encode(String.valueOf(getOnlyForUrls().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
            }
        }

        // add `use` to the URL query string
        if (getUse() != null) {
            for (int i = 0; i < getUse().size(); i++) {
                joiner.add(String.format("%suse%s%s=%s", prefix, suffix, "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
                        URLEncoder.encode(String.valueOf(getUse().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
            }
        }

        // add `name` to the URL query string
        if (getName() != null) {
            joiner.add(String.format("%sname%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        // add `sensitive` to the URL query string
        if (getSensitive() != null) {
            joiner.add(String.format("%ssensitive%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getSensitive()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        // add `value` to the URL query string
        if (getValue() != null) {
            joiner.add(String.format("%svalue%s=%s", prefix, suffix,
                    URLEncoder.encode(String.valueOf(getValue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }

        return joiner.toString();
    }
}
