/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal.gen;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.function.Consumer;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiClient;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiException;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiResponse;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutionProfileCreate;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutionProfileFetch;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutionProfileUpdate;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutorConfiguration;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutorConfigurationWithUUID;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiListOfExecutionProfiles;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiListOfExecutorConfigurations;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiListOfRunningJobsInner;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiListOfSignupsInner;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiMappingConfiguration;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProject;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProjectDetails;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProjectMetaData;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProjectScanLogsInner;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiProjectWhitelistUpdate;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiServerRuntimeData;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiStatusInformationInner;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiUserDetails;

public class AdminApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
    private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

    public AdminApi() {
        this(new ApiClient());
    }

    public AdminApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
        memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
    }

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    /**
     * Admin applies self registration In this usecase the administrator will accept
     * the self registration done by an user.
     *
     * @param userId The userId of the signup which shall be accepted (required)
     * @throws ApiException if fails to make API call
     */
    public void adminAcceptsSignup(String userId) throws ApiException {
        adminAcceptsSignupWithHttpInfo(userId);
    }

    /**
     * Admin applies self registration In this usecase the administrator will accept
     * the self registration done by an user.
     *
     * @param userId The userId of the signup which shall be accepted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminAcceptsSignupWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminAcceptsSignupRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminAcceptsSignup", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminAcceptsSignupRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminAcceptsSignup");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/signup/accept/{userId}".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin assigns execution profile to project An administrator assigns an
     * execution profile to an existing project
     *
     * @param profileId The profile id (required)
     * @param projectId The project id (required)
     * @throws ApiException if fails to make API call
     */
    public void adminAssignsExecutionProfileToProject(String profileId, String projectId) throws ApiException {
        adminAssignsExecutionProfileToProjectWithHttpInfo(profileId, projectId);
    }

    /**
     * Admin assigns execution profile to project An administrator assigns an
     * execution profile to an existing project
     *
     * @param profileId The profile id (required)
     * @param projectId The project id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminAssignsExecutionProfileToProjectWithHttpInfo(String profileId, String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminAssignsExecutionProfileToProjectRequestBuilder(profileId, projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminAssignsExecutionProfileToProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminAssignsExecutionProfileToProjectRequestBuilder(String profileId, String projectId) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminAssignsExecutionProfileToProject");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminAssignsExecutionProfileToProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}/project/{projectId}".replace("{profileId}", ApiClient.urlEncode(profileId))
                .replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin assigns user to project An administrator assigns an user to an existing
     * sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to assign to project (required)
     * @throws ApiException if fails to make API call
     */
    public void adminAssignsUserToProject(String projectId, String userId) throws ApiException {
        adminAssignsUserToProjectWithHttpInfo(projectId, userId);
    }

    /**
     * Admin assigns user to project An administrator assigns an user to an existing
     * sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to assign to project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminAssignsUserToProjectWithHttpInfo(String projectId, String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminAssignsUserToProjectRequestBuilder(projectId, userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminAssignsUserToProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminAssignsUserToProjectRequestBuilder(String projectId, String userId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminAssignsUserToProject");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminAssignsUserToProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/membership/{userId}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{userId}",
                ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin cancels a job Administrator does cancel a job by its Job UUID
     *
     * @param jobUUID The job UUID (required)
     * @throws ApiException if fails to make API call
     */
    public void adminCancelsJob(String jobUUID) throws ApiException {
        adminCancelsJobWithHttpInfo(jobUUID);
    }

    /**
     * Admin cancels a job Administrator does cancel a job by its Job UUID
     *
     * @param jobUUID The job UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminCancelsJobWithHttpInfo(String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminCancelsJobRequestBuilder(jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminCancelsJob", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminCancelsJobRequestBuilder(String jobUUID) throws ApiException {
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling adminCancelsJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/jobs/cancel/{jobUUID}".replace("{jobUUID}", ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin changes project access level Admin changes project access level
     *
     * @param projectId          The id for project (required)
     * @param projectAccessLevel The new project access level. Accepted values:
     *                           full(Full access to project, no restrictions),
     *                           read_only(Users have only read access to existing
     *                           data, No new jobs possible), none(Users have no
     *                           access at all.) (required)
     * @throws ApiException if fails to make API call
     */
    public void adminChangesProjectAccessLevel(String projectId, String projectAccessLevel) throws ApiException {
        adminChangesProjectAccessLevelWithHttpInfo(projectId, projectAccessLevel);
    }

    /**
     * Admin changes project access level Admin changes project access level
     *
     * @param projectId          The id for project (required)
     * @param projectAccessLevel The new project access level. Accepted values:
     *                           full(Full access to project, no restrictions),
     *                           read_only(Users have only read access to existing
     *                           data, No new jobs possible), none(Users have no
     *                           access at all.) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminChangesProjectAccessLevelWithHttpInfo(String projectId, String projectAccessLevel) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminChangesProjectAccessLevelRequestBuilder(projectId, projectAccessLevel);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminChangesProjectAccessLevel", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminChangesProjectAccessLevelRequestBuilder(String projectId, String projectAccessLevel) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminChangesProjectAccessLevel");
        }
        // verify the required parameter 'projectAccessLevel' is set
        if (projectAccessLevel == null) {
            throw new ApiException(400, "Missing the required parameter 'projectAccessLevel' when calling adminChangesProjectAccessLevel");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/accesslevel/{projectAccessLevel}".replace("{projectId}", ApiClient.urlEncode(projectId))
                .replace("{projectAccessLevel}", ApiClient.urlEncode(projectAccessLevel));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin changes project description An administrator changes the project
     * description
     *
     * @param projectId The id for project to change details for (required)
     * @param body      (optional)
     * @return OpenApiProjectDetails
     * @throws ApiException if fails to make API call
     */
    public OpenApiProjectDetails adminChangesProjectDescription(String projectId, Object body) throws ApiException {
        ApiResponse<OpenApiProjectDetails> localVarResponse = adminChangesProjectDescriptionWithHttpInfo(projectId, body);
        return localVarResponse.getData();
    }

    /**
     * Admin changes project description An administrator changes the project
     * description
     *
     * @param projectId The id for project to change details for (required)
     * @param body      (optional)
     * @return ApiResponse&lt;OpenApiProjectDetails&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiProjectDetails> adminChangesProjectDescriptionWithHttpInfo(String projectId, Object body) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminChangesProjectDescriptionRequestBuilder(projectId, body);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminChangesProjectDescription", localVarResponse);
            }
            return new ApiResponse<OpenApiProjectDetails>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiProjectDetails>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminChangesProjectDescriptionRequestBuilder(String projectId, Object body) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminChangesProjectDescription");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin changes owner of a project An administrator changes the owner of an
     * existing sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to assign to project as the owner
     *                  (required)
     * @throws ApiException if fails to make API call
     */
    public void adminChangesProjectOwner(String projectId, String userId) throws ApiException {
        adminChangesProjectOwnerWithHttpInfo(projectId, userId);
    }

    /**
     * Admin changes owner of a project An administrator changes the owner of an
     * existing sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to assign to project as the owner
     *                  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminChangesProjectOwnerWithHttpInfo(String projectId, String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminChangesProjectOwnerRequestBuilder(projectId, userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminChangesProjectOwner", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminChangesProjectOwnerRequestBuilder(String projectId, String userId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminChangesProjectOwner");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminChangesProjectOwner");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/owner/{userId}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{userId}",
                ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin creates an execution profile An administrator creates an execution
     * profile
     *
     * @param profileId                     The profile id (required)
     * @param openApiExecutionProfileCreate (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminCreatesExecutionProfile(String profileId, OpenApiExecutionProfileCreate openApiExecutionProfileCreate) throws ApiException {
        adminCreatesExecutionProfileWithHttpInfo(profileId, openApiExecutionProfileCreate);
    }

    /**
     * Admin creates an execution profile An administrator creates an execution
     * profile
     *
     * @param profileId                     The profile id (required)
     * @param openApiExecutionProfileCreate (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminCreatesExecutionProfileWithHttpInfo(String profileId, OpenApiExecutionProfileCreate openApiExecutionProfileCreate)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminCreatesExecutionProfileRequestBuilder(profileId, openApiExecutionProfileCreate);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminCreatesExecutionProfile", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminCreatesExecutionProfileRequestBuilder(String profileId, OpenApiExecutionProfileCreate openApiExecutionProfileCreate)
            throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminCreatesExecutionProfile");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}".replace("{profileId}", ApiClient.urlEncode(profileId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiExecutionProfileCreate);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin creates an executor configuration An administrator creates an executor
     * a new configuration entry.
     *
     * @param openApiExecutorConfiguration (optional)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object adminCreatesExecutorConfiguration(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {
        ApiResponse<Object> localVarResponse = adminCreatesExecutorConfigurationWithHttpInfo(openApiExecutorConfiguration);
        return localVarResponse.getData();
    }

    /**
     * Admin creates an executor configuration An administrator creates an executor
     * a new configuration entry.
     *
     * @param openApiExecutorConfiguration (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> adminCreatesExecutorConfigurationWithHttpInfo(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminCreatesExecutorConfigurationRequestBuilder(openApiExecutorConfiguration);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminCreatesExecutorConfiguration", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminCreatesExecutorConfigurationRequestBuilder(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executor";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiExecutorConfiguration);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin creates a project Admin creates a project
     *
     * @param openApiProject (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminCreatesProject(OpenApiProject openApiProject) throws ApiException {
        adminCreatesProjectWithHttpInfo(openApiProject);
    }

    /**
     * Admin creates a project Admin creates a project
     *
     * @param openApiProject (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminCreatesProjectWithHttpInfo(OpenApiProject openApiProject) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminCreatesProjectRequestBuilder(openApiProject);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminCreatesProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminCreatesProjectRequestBuilder(OpenApiProject openApiProject) throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiProject);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin deletes a project Admin deletes a project
     *
     * @param projectId The id for project to delete (required)
     * @throws ApiException if fails to make API call
     */
    public void adminDeleteProject(String projectId) throws ApiException {
        adminDeleteProjectWithHttpInfo(projectId);
    }

    /**
     * Admin deletes a project Admin deletes a project
     *
     * @param projectId The id for project to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDeleteProjectWithHttpInfo(String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDeleteProjectRequestBuilder(projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDeleteProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDeleteProjectRequestBuilder(String projectId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminDeleteProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin deletes execution profile An administrator deletes execution profile
     *
     * @param profileId The profile id (required)
     * @throws ApiException if fails to make API call
     */
    public void adminDeletesExecutionProfile(String profileId) throws ApiException {
        adminDeletesExecutionProfileWithHttpInfo(profileId);
    }

    /**
     * Admin deletes execution profile An administrator deletes execution profile
     *
     * @param profileId The profile id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDeletesExecutionProfileWithHttpInfo(String profileId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDeletesExecutionProfileRequestBuilder(profileId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDeletesExecutionProfile", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDeletesExecutionProfileRequestBuilder(String profileId) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminDeletesExecutionProfile");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}".replace("{profileId}", ApiClient.urlEncode(profileId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin deletes executor configuration An administrator deletes an executor by
     * removing the configuration entry identified by its uuid
     *
     * @param uuid The configuration uuid (required)
     * @throws ApiException if fails to make API call
     */
    public void adminDeletesExecutorConfiguration(String uuid) throws ApiException {
        adminDeletesExecutorConfigurationWithHttpInfo(uuid);
    }

    /**
     * Admin deletes executor configuration An administrator deletes an executor by
     * removing the configuration entry identified by its uuid
     *
     * @param uuid The configuration uuid (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDeletesExecutorConfigurationWithHttpInfo(String uuid) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDeletesExecutorConfigurationRequestBuilder(uuid);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDeletesExecutorConfiguration", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDeletesExecutorConfigurationRequestBuilder(String uuid) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException(400, "Missing the required parameter 'uuid' when calling adminDeletesExecutorConfiguration");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executor/{uuid}".replace("{uuid}", ApiClient.urlEncode(uuid));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin deletes user signup In this usecase the administrator will not accept
     * the self registration done by an user but delete the entry.
     *
     * @param userId The userId of the signup which shall be deleted (required)
     * @throws ApiException if fails to make API call
     */
    public void adminDeletesSignup(String userId) throws ApiException {
        adminDeletesSignupWithHttpInfo(userId);
    }

    /**
     * Admin deletes user signup In this usecase the administrator will not accept
     * the self registration done by an user but delete the entry.
     *
     * @param userId The userId of the signup which shall be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDeletesSignupWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDeletesSignupRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDeletesSignup", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDeletesSignupRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminDeletesSignup");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/signup/{userId}".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin deletes a user Admin deletes a user
     *
     * @param userId The userId of the user who shall be deleted (required)
     * @throws ApiException if fails to make API call
     */
    public void adminDeletesUser(String userId) throws ApiException {
        adminDeletesUserWithHttpInfo(userId);
    }

    /**
     * Admin deletes a user Admin deletes a user
     *
     * @param userId The userId of the user who shall be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDeletesUserWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDeletesUserRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDeletesUser", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDeletesUserRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminDeletesUser");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user/{userId}".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin disables job processing in scheduler An administrator disables
     * scheduler job processing. This can be a preparation for system wide update -
     * when scheduling is stoped, user can ask for new SecHub Jobs etc. But as long
     * as scheduler is stopped nothing is executed - so JVMs/PODs can be updated in
     * cluster
     *
     * @throws ApiException if fails to make API call
     */
    public void adminDisablesSchedulerJobProcessing() throws ApiException {
        adminDisablesSchedulerJobProcessingWithHttpInfo();
    }

    /**
     * Admin disables job processing in scheduler An administrator disables
     * scheduler job processing. This can be a preparation for system wide update -
     * when scheduling is stoped, user can ask for new SecHub Jobs etc. But as long
     * as scheduler is stopped nothing is executed - so JVMs/PODs can be updated in
     * cluster
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminDisablesSchedulerJobProcessingWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDisablesSchedulerJobProcessingRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminDisablesSchedulerJobProcessing", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDisablesSchedulerJobProcessingRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/scheduler/disable/job-processing";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin downloads all details about a scan job An administrator downloads a ZIP
     * file containing full details of a scan. Main reason for this use case is for
     * debugging when there are problems with security products. Another reason is
     * for developers to adopt new security products easier.
     *
     * @param jobUUID The job UUID (required)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object adminDownloadsFullScanDataForJob(String jobUUID) throws ApiException {
        ApiResponse<Object> localVarResponse = adminDownloadsFullScanDataForJobWithHttpInfo(jobUUID);
        return localVarResponse.getData();
    }

    /**
     * Admin downloads all details about a scan job An administrator downloads a ZIP
     * file containing full details of a scan. Main reason for this use case is for
     * debugging when there are problems with security products. Another reason is
     * for developers to adopt new security products easier.
     *
     * @param jobUUID The job UUID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> adminDownloadsFullScanDataForJobWithHttpInfo(String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminDownloadsFullScanDataForJobRequestBuilder(jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminDownloadsFullScanDataForJob", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminDownloadsFullScanDataForJobRequestBuilder(String jobUUID) throws ApiException {
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling adminDownloadsFullScanDataForJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/scan/download/{jobUUID}".replace("{jobUUID}", ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/zip");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin enables scheduler job processing An administrator starts scheduler job
     * processing. This can be a necessary step after a system wide update where
     * processing of jobs was stoped before.
     *
     * @throws ApiException if fails to make API call
     */
    public void adminEnablesSchedulerJobProcessing() throws ApiException {
        adminEnablesSchedulerJobProcessingWithHttpInfo();
    }

    /**
     * Admin enables scheduler job processing An administrator starts scheduler job
     * processing. This can be a necessary step after a system wide update where
     * processing of jobs was stoped before.
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminEnablesSchedulerJobProcessingWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminEnablesSchedulerJobProcessingRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminEnablesSchedulerJobProcessing", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminEnablesSchedulerJobProcessingRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/scheduler/enable/job-processing";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches auto cleanup configuration An administrator feches current
     * &lt;&lt;concept-auto-cleanup,auto cleanup&gt;&gt; configuration.
     *
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public Object adminFetchesAutoCleanupConfiguration() throws ApiException {
        ApiResponse<Object> localVarResponse = adminFetchesAutoCleanupConfigurationWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin fetches auto cleanup configuration An administrator feches current
     * &lt;&lt;concept-auto-cleanup,auto cleanup&gt;&gt; configuration.
     *
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Object> adminFetchesAutoCleanupConfigurationWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesAutoCleanupConfigurationRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesAutoCleanupConfiguration", localVarResponse);
            }
            return new ApiResponse<Object>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Object>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesAutoCleanupConfigurationRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/autoclean";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches execution profile An administrator fetches details about an
     * execution profile
     *
     * @param profileId The profile id (required)
     * @return OpenApiExecutionProfileFetch
     * @throws ApiException if fails to make API call
     */
    public OpenApiExecutionProfileFetch adminFetchesExecutionProfile(String profileId) throws ApiException {
        ApiResponse<OpenApiExecutionProfileFetch> localVarResponse = adminFetchesExecutionProfileWithHttpInfo(profileId);
        return localVarResponse.getData();
    }

    /**
     * Admin fetches execution profile An administrator fetches details about an
     * execution profile
     *
     * @param profileId The profile id (required)
     * @return ApiResponse&lt;OpenApiExecutionProfileFetch&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiExecutionProfileFetch> adminFetchesExecutionProfileWithHttpInfo(String profileId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesExecutionProfileRequestBuilder(profileId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesExecutionProfile", localVarResponse);
            }
            return new ApiResponse<OpenApiExecutionProfileFetch>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiExecutionProfileFetch>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesExecutionProfileRequestBuilder(String profileId) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminFetchesExecutionProfile");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}".replace("{profileId}", ApiClient.urlEncode(profileId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches execution profile list An administrator fetches execution
     * profile list
     *
     * @return OpenApiListOfExecutionProfiles
     * @throws ApiException if fails to make API call
     */
    public OpenApiListOfExecutionProfiles adminFetchesExecutionProfileList() throws ApiException {
        ApiResponse<OpenApiListOfExecutionProfiles> localVarResponse = adminFetchesExecutionProfileListWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin fetches execution profile list An administrator fetches execution
     * profile list
     *
     * @return ApiResponse&lt;OpenApiListOfExecutionProfiles&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiListOfExecutionProfiles> adminFetchesExecutionProfileListWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesExecutionProfileListRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesExecutionProfileList", localVarResponse);
            }
            return new ApiResponse<OpenApiListOfExecutionProfiles>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiListOfExecutionProfiles>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesExecutionProfileListRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profiles";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches executor configuration An administrator fetches one explicit
     * executor configuration by its uuid.
     *
     * @param uuid The configuration uuid (required)
     * @return OpenApiExecutorConfigurationWithUUID
     * @throws ApiException if fails to make API call
     */
    public OpenApiExecutorConfigurationWithUUID adminFetchesExecutorConfiguration(String uuid) throws ApiException {
        ApiResponse<OpenApiExecutorConfigurationWithUUID> localVarResponse = adminFetchesExecutorConfigurationWithHttpInfo(uuid);
        return localVarResponse.getData();
    }

    /**
     * Admin fetches executor configuration An administrator fetches one explicit
     * executor configuration by its uuid.
     *
     * @param uuid The configuration uuid (required)
     * @return ApiResponse&lt;OpenApiExecutorConfigurationWithUUID&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiExecutorConfigurationWithUUID> adminFetchesExecutorConfigurationWithHttpInfo(String uuid) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesExecutorConfigurationRequestBuilder(uuid);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesExecutorConfiguration", localVarResponse);
            }
            return new ApiResponse<OpenApiExecutorConfigurationWithUUID>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiExecutorConfigurationWithUUID>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesExecutorConfigurationRequestBuilder(String uuid) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException(400, "Missing the required parameter 'uuid' when calling adminFetchesExecutorConfiguration");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executor/{uuid}".replace("{uuid}", ApiClient.urlEncode(uuid));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches executor configuration list An administrator fetches executor
     * configuration list which contains all executor configurations
     *
     * @return OpenApiListOfExecutorConfigurations
     * @throws ApiException if fails to make API call
     */
    public OpenApiListOfExecutorConfigurations adminFetchesExecutorConfigurationList() throws ApiException {
        ApiResponse<OpenApiListOfExecutorConfigurations> localVarResponse = adminFetchesExecutorConfigurationListWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin fetches executor configuration list An administrator fetches executor
     * configuration list which contains all executor configurations
     *
     * @return ApiResponse&lt;OpenApiListOfExecutorConfigurations&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiListOfExecutorConfigurations> adminFetchesExecutorConfigurationListWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesExecutorConfigurationListRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesExecutorConfigurationList", localVarResponse);
            }
            return new ApiResponse<OpenApiListOfExecutorConfigurations>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiListOfExecutorConfigurations>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesExecutorConfigurationListRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executors";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches mapping configuration An administrator fetches mapping
     * configuration by its ID.
     *
     * @param mappingId The mapping Id (required)
     * @return OpenApiMappingConfiguration
     * @throws ApiException if fails to make API call
     */
    public OpenApiMappingConfiguration adminFetchesMappingConfiguration(String mappingId) throws ApiException {
        ApiResponse<OpenApiMappingConfiguration> localVarResponse = adminFetchesMappingConfigurationWithHttpInfo(mappingId);
        return localVarResponse.getData();
    }

    /**
     * Admin fetches mapping configuration An administrator fetches mapping
     * configuration by its ID.
     *
     * @param mappingId The mapping Id (required)
     * @return ApiResponse&lt;OpenApiMappingConfiguration&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiMappingConfiguration> adminFetchesMappingConfigurationWithHttpInfo(String mappingId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesMappingConfigurationRequestBuilder(mappingId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesMappingConfiguration", localVarResponse);
            }
            return new ApiResponse<OpenApiMappingConfiguration>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiMappingConfiguration>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesMappingConfigurationRequestBuilder(String mappingId) throws ApiException {
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException(400, "Missing the required parameter 'mappingId' when calling adminFetchesMappingConfiguration");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/mapping/{mappingId}".replace("{mappingId}", ApiClient.urlEncode(mappingId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin fetches server runtime data An administrator fetches the current SecHub
     * server runtime data. Only administrators are allowed to do this because it
     * contains the server version and knowing the exact server version makes it
     * easier for penetration tester or attacker to attack the system.
     *
     * @return OpenApiServerRuntimeData
     * @throws ApiException if fails to make API call
     */
    public OpenApiServerRuntimeData adminFetchesServerRuntimeData() throws ApiException {
        ApiResponse<OpenApiServerRuntimeData> localVarResponse = adminFetchesServerRuntimeDataWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin fetches server runtime data An administrator fetches the current SecHub
     * server runtime data. Only administrators are allowed to do this because it
     * contains the server version and knowing the exact server version makes it
     * easier for penetration tester or attacker to attack the system.
     *
     * @return ApiResponse&lt;OpenApiServerRuntimeData&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiServerRuntimeData> adminFetchesServerRuntimeDataWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminFetchesServerRuntimeDataRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminFetchesServerRuntimeData", localVarResponse);
            }
            return new ApiResponse<OpenApiServerRuntimeData>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiServerRuntimeData>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminFetchesServerRuntimeDataRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/info/server";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin grants admin rights to user An administrator grants admin rights to
     * another user. So this user will become also an administrator.
     *
     * @param userId The userId of the user who becomes admin (required)
     * @throws ApiException if fails to make API call
     */
    public void adminGrantsAdminRightsToUser(String userId) throws ApiException {
        adminGrantsAdminRightsToUserWithHttpInfo(userId);
    }

    /**
     * Admin grants admin rights to user An administrator grants admin rights to
     * another user. So this user will become also an administrator.
     *
     * @param userId The userId of the user who becomes admin (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminGrantsAdminRightsToUserWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminGrantsAdminRightsToUserRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminGrantsAdminRightsToUser", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminGrantsAdminRightsToUserRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminGrantsAdminRightsToUser");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user/{userId}/grant/superadmin".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists all admins An administrator downloads a json file containing all
     * names of SecHub admins
     *
     * @return List&lt;String&gt;
     * @throws ApiException if fails to make API call
     */
    public List<String> adminListsAllAdmins() throws ApiException {
        ApiResponse<List<String>> localVarResponse = adminListsAllAdminsWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists all admins An administrator downloads a json file containing all
     * names of SecHub admins
     *
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<String>> adminListsAllAdminsWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsAllAdminsRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsAllAdmins", localVarResponse);
            }
            return new ApiResponse<List<String>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<String>>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsAllAdminsRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/admins";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists all projects An administrator downloads a json file containing
     * all project ids
     *
     * @return List&lt;String&gt;
     * @throws ApiException if fails to make API call
     */
    public List<String> adminListsAllProjects() throws ApiException {
        ApiResponse<List<String>> localVarResponse = adminListsAllProjectsWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists all projects An administrator downloads a json file containing
     * all project ids
     *
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<String>> adminListsAllProjectsWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsAllProjectsRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsAllProjects", localVarResponse);
            }
            return new ApiResponse<List<String>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<String>>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsAllProjectsRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/projects";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists all running jobs Admin lists all running jobs
     *
     * @return List&lt;OpenApiListOfRunningJobsInner&gt;
     * @throws ApiException if fails to make API call
     */
    public List<OpenApiListOfRunningJobsInner> adminListsAllRunningJobs() throws ApiException {
        ApiResponse<List<OpenApiListOfRunningJobsInner>> localVarResponse = adminListsAllRunningJobsWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists all running jobs Admin lists all running jobs
     *
     * @return ApiResponse&lt;List&lt;OpenApiListOfRunningJobsInner&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<OpenApiListOfRunningJobsInner>> adminListsAllRunningJobsWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsAllRunningJobsRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsAllRunningJobs", localVarResponse);
            }
            return new ApiResponse<List<OpenApiListOfRunningJobsInner>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<OpenApiListOfRunningJobsInner>>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsAllRunningJobsRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/jobs/running";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists all users An administrator downloads a json file containing all
     * user ids
     *
     * @return List&lt;String&gt;
     * @throws ApiException if fails to make API call
     */
    public List<String> adminListsAllUsers() throws ApiException {
        ApiResponse<List<String>> localVarResponse = adminListsAllUsersWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists all users An administrator downloads a json file containing all
     * user ids
     *
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<String>> adminListsAllUsersWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsAllUsersRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsAllUsers", localVarResponse);
            }
            return new ApiResponse<List<String>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<String>>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsAllUsersRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/users";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists open user signups In this usecase the administrator will list the
     * currently unapplied user self registrations/signups.
     *
     * @return List&lt;OpenApiListOfSignupsInner&gt;
     * @throws ApiException if fails to make API call
     */
    public List<OpenApiListOfSignupsInner> adminListsOpenUserSignups() throws ApiException {
        ApiResponse<List<OpenApiListOfSignupsInner>> localVarResponse = adminListsOpenUserSignupsWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists open user signups In this usecase the administrator will list the
     * currently unapplied user self registrations/signups.
     *
     * @return ApiResponse&lt;List&lt;OpenApiListOfSignupsInner&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<OpenApiListOfSignupsInner>> adminListsOpenUserSignupsWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsOpenUserSignupsRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsOpenUserSignups", localVarResponse);
            }
            return new ApiResponse<List<OpenApiListOfSignupsInner>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<OpenApiListOfSignupsInner>>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsOpenUserSignupsRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/signups";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin lists status information An administrator fetches current known status
     * information about sechub
     *
     * @return List&lt;OpenApiStatusInformationInner&gt;
     * @throws ApiException if fails to make API call
     */
    public List<OpenApiStatusInformationInner> adminListsStatusInformation() throws ApiException {
        ApiResponse<List<OpenApiStatusInformationInner>> localVarResponse = adminListsStatusInformationWithHttpInfo();
        return localVarResponse.getData();
    }

    /**
     * Admin lists status information An administrator fetches current known status
     * information about sechub
     *
     * @return ApiResponse&lt;List&lt;OpenApiStatusInformationInner&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<OpenApiStatusInformationInner>> adminListsStatusInformationWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminListsStatusInformationRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminListsStatusInformation", localVarResponse);
            }
            return new ApiResponse<List<OpenApiStatusInformationInner>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<OpenApiStatusInformationInner>>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminListsStatusInformationRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/status";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin restarts a job Admin restarts a job
     *
     * @param jobUUID The job UUID (required)
     * @throws ApiException if fails to make API call
     */
    public void adminRestartsJob(String jobUUID) throws ApiException {
        adminRestartsJobWithHttpInfo(jobUUID);
    }

    /**
     * Admin restarts a job Admin restarts a job
     *
     * @param jobUUID The job UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminRestartsJobWithHttpInfo(String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminRestartsJobRequestBuilder(jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminRestartsJob", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminRestartsJobRequestBuilder(String jobUUID) throws ApiException {
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling adminRestartsJob");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/jobs/restart/{jobUUID}".replace("{jobUUID}", ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin restarts a job (hard) Admin restarts a job (hard)
     *
     * @param jobUUID The job UUID (required)
     * @throws ApiException if fails to make API call
     */
    public void adminRestartsJobHard(String jobUUID) throws ApiException {
        adminRestartsJobHardWithHttpInfo(jobUUID);
    }

    /**
     * Admin restarts a job (hard) Admin restarts a job (hard)
     *
     * @param jobUUID The job UUID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminRestartsJobHardWithHttpInfo(String jobUUID) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminRestartsJobHardRequestBuilder(jobUUID);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminRestartsJobHard", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminRestartsJobHardRequestBuilder(String jobUUID) throws ApiException {
        // verify the required parameter 'jobUUID' is set
        if (jobUUID == null) {
            throw new ApiException(400, "Missing the required parameter 'jobUUID' when calling adminRestartsJobHard");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/jobs/restart-hard/{jobUUID}".replace("{jobUUID}", ApiClient.urlEncode(jobUUID));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin revokes admin rights from an admin An administrator revokes existing
     * admin rights from another administrator.
     *
     * @param userId The userId of the user who becomes admin (required)
     * @throws ApiException if fails to make API call
     */
    public void adminRevokesAdminRightsFromAdmin(String userId) throws ApiException {
        adminRevokesAdminRightsFromAdminWithHttpInfo(userId);
    }

    /**
     * Admin revokes admin rights from an admin An administrator revokes existing
     * admin rights from another administrator.
     *
     * @param userId The userId of the user who becomes admin (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminRevokesAdminRightsFromAdminWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminRevokesAdminRightsFromAdminRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminRevokesAdminRightsFromAdmin", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminRevokesAdminRightsFromAdminRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminRevokesAdminRightsFromAdmin");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user/{userId}/revoke/superadmin".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin shows project details An administrator downloads a json file containing
     * json with project details
     *
     * @param projectId The id for project to show details for (required)
     * @return OpenApiProjectDetails
     * @throws ApiException if fails to make API call
     */
    public OpenApiProjectDetails adminShowsProjectDetails(String projectId) throws ApiException {
        ApiResponse<OpenApiProjectDetails> localVarResponse = adminShowsProjectDetailsWithHttpInfo(projectId);
        return localVarResponse.getData();
    }

    /**
     * Admin shows project details An administrator downloads a json file containing
     * json with project details
     *
     * @param projectId The id for project to show details for (required)
     * @return ApiResponse&lt;OpenApiProjectDetails&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiProjectDetails> adminShowsProjectDetailsWithHttpInfo(String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminShowsProjectDetailsRequestBuilder(projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminShowsProjectDetails", localVarResponse);
            }
            return new ApiResponse<OpenApiProjectDetails>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiProjectDetails>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminShowsProjectDetailsRequestBuilder(String projectId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminShowsProjectDetails");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin shows scan logs for project An admin downloads a json file containing
     * log for scans of project
     *
     * @param projectId The project Id (required)
     * @return List&lt;OpenApiProjectScanLogsInner&gt;
     * @throws ApiException if fails to make API call
     */
    public List<OpenApiProjectScanLogsInner> adminShowsScanLogsForProject(String projectId) throws ApiException {
        ApiResponse<List<OpenApiProjectScanLogsInner>> localVarResponse = adminShowsScanLogsForProjectWithHttpInfo(projectId);
        return localVarResponse.getData();
    }

    /**
     * Admin shows scan logs for project An admin downloads a json file containing
     * log for scans of project
     *
     * @param projectId The project Id (required)
     * @return ApiResponse&lt;List&lt;OpenApiProjectScanLogsInner&gt;&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<List<OpenApiProjectScanLogsInner>> adminShowsScanLogsForProjectWithHttpInfo(String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminShowsScanLogsForProjectRequestBuilder(projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminShowsScanLogsForProject", localVarResponse);
            }
            return new ApiResponse<List<OpenApiProjectScanLogsInner>>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null
                            : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<OpenApiProjectScanLogsInner>>() {
                            }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminShowsScanLogsForProjectRequestBuilder(String projectId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminShowsScanLogsForProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/scan/logs".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin shows user details An administrator downloads a json file containing
     * json containing user details
     *
     * @param userId The user id of user to show details for (required)
     * @return OpenApiUserDetails
     * @throws ApiException if fails to make API call
     */
    public OpenApiUserDetails adminShowsUserDetails(String userId) throws ApiException {
        ApiResponse<OpenApiUserDetails> localVarResponse = adminShowsUserDetailsWithHttpInfo(userId);
        return localVarResponse.getData();
    }

    /**
     * Admin shows user details An administrator downloads a json file containing
     * json containing user details
     *
     * @param userId The user id of user to show details for (required)
     * @return ApiResponse&lt;OpenApiUserDetails&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiUserDetails> adminShowsUserDetailsWithHttpInfo(String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminShowsUserDetailsRequestBuilder(userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminShowsUserDetails", localVarResponse);
            }
            return new ApiResponse<OpenApiUserDetails>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiUserDetails>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminShowsUserDetailsRequestBuilder(String userId) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminShowsUserDetails");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user/{userId}".replace("{userId}", ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin shows user details for email address An administrator fetches user
     * details for an email address.
     *
     * @param emailAddress  The email address of user to show details for (required)
     * @param authorization Basic authentication credentials (required)
     * @return OpenApiUserDetails
     * @throws ApiException if fails to make API call
     */
    public OpenApiUserDetails adminShowsUserDetailsForEmailAddress(String emailAddress, String authorization) throws ApiException {
        ApiResponse<OpenApiUserDetails> localVarResponse = adminShowsUserDetailsForEmailAddressWithHttpInfo(emailAddress, authorization);
        return localVarResponse.getData();
    }

    /**
     * Admin shows user details for email address An administrator fetches user
     * details for an email address.
     *
     * @param emailAddress  The email address of user to show details for (required)
     * @param authorization Basic authentication credentials (required)
     * @return ApiResponse&lt;OpenApiUserDetails&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<OpenApiUserDetails> adminShowsUserDetailsForEmailAddressWithHttpInfo(String emailAddress, String authorization) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminShowsUserDetailsForEmailAddressRequestBuilder(emailAddress, authorization);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            if (localVarResponse.statusCode() / 100 != 2) {
                throw getApiException("adminShowsUserDetailsForEmailAddress", localVarResponse);
            }
            return new ApiResponse<OpenApiUserDetails>(localVarResponse.statusCode(), localVarResponse.headers().map(),
                    localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<OpenApiUserDetails>() {
                    }) // closes the InputStream
            );
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminShowsUserDetailsForEmailAddressRequestBuilder(String emailAddress, String authorization) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException(400, "Missing the required parameter 'emailAddress' when calling adminShowsUserDetailsForEmailAddress");
        }
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException(400, "Missing the required parameter 'authorization' when calling adminShowsUserDetailsForEmailAddress");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user-by-email/{emailAddress}".replace("{emailAddress}", ApiClient.urlEncode(emailAddress));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        if (authorization != null) {
            localVarRequestBuilder.header("Authorization", authorization);
        }
        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin get scheduler status An administrator wants to update information about
     * scheduler status
     *
     * @throws ApiException if fails to make API call
     */
    public void adminTriggersRefreshOfSchedulerStatus() throws ApiException {
        adminTriggersRefreshOfSchedulerStatusWithHttpInfo();
    }

    /**
     * Admin get scheduler status An administrator wants to update information about
     * scheduler status
     *
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminTriggersRefreshOfSchedulerStatusWithHttpInfo() throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminTriggersRefreshOfSchedulerStatusRequestBuilder();
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminTriggersRefreshOfSchedulerStatus", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminTriggersRefreshOfSchedulerStatusRequestBuilder() throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/scheduler/status/refresh";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin unassigns execution profile from project An administrator unassigns an
     * execution profile from a projects.
     *
     * @param profileId The profile id (required)
     * @param projectId The project id (required)
     * @throws ApiException if fails to make API call
     */
    public void adminUnassignsExecutionProfileFromProject(String profileId, String projectId) throws ApiException {
        adminUnassignsExecutionProfileFromProjectWithHttpInfo(profileId, projectId);
    }

    /**
     * Admin unassigns execution profile from project An administrator unassigns an
     * execution profile from a projects.
     *
     * @param profileId The profile id (required)
     * @param projectId The project id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUnassignsExecutionProfileFromProjectWithHttpInfo(String profileId, String projectId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUnassignsExecutionProfileFromProjectRequestBuilder(profileId, projectId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUnassignsExecutionProfileFromProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUnassignsExecutionProfileFromProjectRequestBuilder(String profileId, String projectId) throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminUnassignsExecutionProfileFromProject");
        }
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminUnassignsExecutionProfileFromProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}/project/{projectId}".replace("{profileId}", ApiClient.urlEncode(profileId))
                .replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin unassigns user from project An administrator unassigns an user from a
     * sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to unassign from project (required)
     * @throws ApiException if fails to make API call
     */
    public void adminUnassignsUserFromProject(String projectId, String userId) throws ApiException {
        adminUnassignsUserFromProjectWithHttpInfo(projectId, userId);
    }

    /**
     * Admin unassigns user from project An administrator unassigns an user from a
     * sechub project.
     *
     * @param projectId The id for project (required)
     * @param userId    The user id of the user to unassign from project (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUnassignsUserFromProjectWithHttpInfo(String projectId, String userId) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUnassignsUserFromProjectRequestBuilder(projectId, userId);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUnassignsUserFromProject", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUnassignsUserFromProjectRequestBuilder(String projectId, String userId) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling adminUnassignsUserFromProject");
        }
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminUnassignsUserFromProject");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/membership/{userId}".replace("{projectId}", ApiClient.urlEncode(projectId)).replace("{userId}",
                ApiClient.urlEncode(userId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin updates auto cleanup configuration An administrator changes
     * &lt;&lt;concept-auto-cleanup,auto cleanup&gt;&gt; configuration.
     *
     * @param body (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminUpdatesAutoCleanupConfiguration(Object body) throws ApiException {
        adminUpdatesAutoCleanupConfigurationWithHttpInfo(body);
    }

    /**
     * Admin updates auto cleanup configuration An administrator changes
     * &lt;&lt;concept-auto-cleanup,auto cleanup&gt;&gt; configuration.
     *
     * @param body (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUpdatesAutoCleanupConfigurationWithHttpInfo(Object body) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUpdatesAutoCleanupConfigurationRequestBuilder(body);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUpdatesAutoCleanupConfiguration", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUpdatesAutoCleanupConfigurationRequestBuilder(Object body) throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/autoclean";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin updates execution profile An administrator updateds dedicated execution
     * profile
     *
     * @param profileId                     The profile id (required)
     * @param openApiExecutionProfileUpdate (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminUpdatesExecutionProfile(String profileId, OpenApiExecutionProfileUpdate openApiExecutionProfileUpdate) throws ApiException {
        adminUpdatesExecutionProfileWithHttpInfo(profileId, openApiExecutionProfileUpdate);
    }

    /**
     * Admin updates execution profile An administrator updateds dedicated execution
     * profile
     *
     * @param profileId                     The profile id (required)
     * @param openApiExecutionProfileUpdate (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUpdatesExecutionProfileWithHttpInfo(String profileId, OpenApiExecutionProfileUpdate openApiExecutionProfileUpdate)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUpdatesExecutionProfileRequestBuilder(profileId, openApiExecutionProfileUpdate);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUpdatesExecutionProfile", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUpdatesExecutionProfileRequestBuilder(String profileId, OpenApiExecutionProfileUpdate openApiExecutionProfileUpdate)
            throws ApiException {
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException(400, "Missing the required parameter 'profileId' when calling adminUpdatesExecutionProfile");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/execution/profile/{profileId}".replace("{profileId}", ApiClient.urlEncode(profileId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiExecutionProfileUpdate);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin updates executor configuration setup An administrator updateds
     * dedicated executor configuration. The update does change description, enabled
     * state and also used executors, but Will NOT change any associations between
     * profile and projects.
     *
     * @param uuid                         The configuration uuid (required)
     * @param openApiExecutorConfiguration (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminUpdatesExecutorConfig(String uuid, OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {
        adminUpdatesExecutorConfigWithHttpInfo(uuid, openApiExecutorConfiguration);
    }

    /**
     * Admin updates executor configuration setup An administrator updateds
     * dedicated executor configuration. The update does change description, enabled
     * state and also used executors, but Will NOT change any associations between
     * profile and projects.
     *
     * @param uuid                         The configuration uuid (required)
     * @param openApiExecutorConfiguration (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUpdatesExecutorConfigWithHttpInfo(String uuid, OpenApiExecutorConfiguration openApiExecutorConfiguration)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUpdatesExecutorConfigRequestBuilder(uuid, openApiExecutorConfiguration);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUpdatesExecutorConfig", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUpdatesExecutorConfigRequestBuilder(String uuid, OpenApiExecutorConfiguration openApiExecutorConfiguration)
            throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException(400, "Missing the required parameter 'uuid' when calling adminUpdatesExecutorConfig");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executor/{uuid}".replace("{uuid}", ApiClient.urlEncode(uuid));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiExecutorConfiguration);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin updates mapping configuration An administrator changes mapping
     * configuration. Mappings represents a generic mechanism to replace a given
     * string, matched by configured regular expression pattern with a replacement
     * string. Some of the mappings are used for adapter behaviour.
     *
     * @param mappingId                   The mappingID, identifiying which mapping
     *                                    shall be updated (required)
     * @param openApiMappingConfiguration (optional)
     * @throws ApiException if fails to make API call
     */
    public void adminUpdatesMappingConfiguration(String mappingId, OpenApiMappingConfiguration openApiMappingConfiguration) throws ApiException {
        adminUpdatesMappingConfigurationWithHttpInfo(mappingId, openApiMappingConfiguration);
    }

    /**
     * Admin updates mapping configuration An administrator changes mapping
     * configuration. Mappings represents a generic mechanism to replace a given
     * string, matched by configured regular expression pattern with a replacement
     * string. Some of the mappings are used for adapter behaviour.
     *
     * @param mappingId                   The mappingID, identifiying which mapping
     *                                    shall be updated (required)
     * @param openApiMappingConfiguration (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUpdatesMappingConfigurationWithHttpInfo(String mappingId, OpenApiMappingConfiguration openApiMappingConfiguration)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUpdatesMappingConfigurationRequestBuilder(mappingId, openApiMappingConfiguration);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUpdatesMappingConfiguration", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUpdatesMappingConfigurationRequestBuilder(String mappingId, OpenApiMappingConfiguration openApiMappingConfiguration)
            throws ApiException {
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException(400, "Missing the required parameter 'mappingId' when calling adminUpdatesMappingConfiguration");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/mapping/{mappingId}".replace("{mappingId}", ApiClient.urlEncode(mappingId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiMappingConfiguration);
            localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Admin updates user email address Admin updates user email address
     *
     * @param userId       The userId of the user whose email address will be
     *                     changed (required)
     * @param emailAddress The new email address (required)
     * @throws ApiException if fails to make API call
     */
    public void adminUpdatesUserEmailAddress(String userId, String emailAddress) throws ApiException {
        adminUpdatesUserEmailAddressWithHttpInfo(userId, emailAddress);
    }

    /**
     * Admin updates user email address Admin updates user email address
     *
     * @param userId       The userId of the user whose email address will be
     *                     changed (required)
     * @param emailAddress The new email address (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> adminUpdatesUserEmailAddressWithHttpInfo(String userId, String emailAddress) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminUpdatesUserEmailAddressRequestBuilder(userId, emailAddress);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("adminUpdatesUserEmailAddress", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder adminUpdatesUserEmailAddressRequestBuilder(String userId, String emailAddress) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException(400, "Missing the required parameter 'userId' when calling adminUpdatesUserEmailAddress");
        }
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException(400, "Missing the required parameter 'emailAddress' when calling adminUpdatesUserEmailAddress");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/user/{userId}/email/{emailAddress}".replace("{userId}", ApiClient.urlEncode(userId)).replace("{emailAddress}",
                ApiClient.urlEncode(emailAddress));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Accept", "application/json");

        localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Update project metadata Update project metadata
     *
     * @param projectId              The id of the project for which metadata shall
     *                               be updated (required)
     * @param openApiProjectMetaData (optional)
     * @throws ApiException if fails to make API call
     */
    public void updateProjectMetaData(String projectId, OpenApiProjectMetaData openApiProjectMetaData) throws ApiException {
        updateProjectMetaDataWithHttpInfo(projectId, openApiProjectMetaData);
    }

    /**
     * Update project metadata Update project metadata
     *
     * @param projectId              The id of the project for which metadata shall
     *                               be updated (required)
     * @param openApiProjectMetaData (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> updateProjectMetaDataWithHttpInfo(String projectId, OpenApiProjectMetaData openApiProjectMetaData) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = updateProjectMetaDataRequestBuilder(projectId, openApiProjectMetaData);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("updateProjectMetaData", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder updateProjectMetaDataRequestBuilder(String projectId, OpenApiProjectMetaData openApiProjectMetaData) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling updateProjectMetaData");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/metadata".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiProjectMetaData);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

    /**
     * Update project whitelist Update project whitelist
     *
     * @param projectId                     The id of the project for which
     *                                      whitelist shall be updated (required)
     * @param openApiProjectWhitelistUpdate (optional)
     * @throws ApiException if fails to make API call
     */
    public void updateProjectWhitelist(String projectId, OpenApiProjectWhitelistUpdate openApiProjectWhitelistUpdate) throws ApiException {
        updateProjectWhitelistWithHttpInfo(projectId, openApiProjectWhitelistUpdate);
    }

    /**
     * Update project whitelist Update project whitelist
     *
     * @param projectId                     The id of the project for which
     *                                      whitelist shall be updated (required)
     * @param openApiProjectWhitelistUpdate (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<Void> updateProjectWhitelistWithHttpInfo(String projectId, OpenApiProjectWhitelistUpdate openApiProjectWhitelistUpdate)
            throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = updateProjectWhitelistRequestBuilder(projectId, openApiProjectWhitelistUpdate);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                if (localVarResponse.statusCode() / 100 != 2) {
                    throw getApiException("updateProjectWhitelist", localVarResponse);
                }
                return new ApiResponse<Void>(localVarResponse.statusCode(), localVarResponse.headers().map(), null);
            } finally {
                // Drain the InputStream
                while (localVarResponse.body().read() != -1) {
                    // Ignore
                }
                localVarResponse.body().close();
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    private HttpRequest.Builder updateProjectWhitelistRequestBuilder(String projectId, OpenApiProjectWhitelistUpdate openApiProjectWhitelistUpdate)
            throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException(400, "Missing the required parameter 'projectId' when calling updateProjectWhitelist");
        }

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/project/{projectId}/whitelist".replace("{projectId}", ApiClient.urlEncode(projectId));

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiProjectWhitelistUpdate);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }
}
