/*
 * SecHub API
 * SecHub API description
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mercedesbenz.sechub.api.internal;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.function.Consumer;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mercedesbenz.sechub.api.internal.gen.AdminApi;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiClient;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiException;
import com.mercedesbenz.sechub.api.internal.gen.invoker.ApiResponse;
import com.mercedesbenz.sechub.api.internal.gen.model.OpenApiExecutorConfiguration;

/**
 * Some parts of the generated {@link AdminApi} do not work well - it seems the
 * open API definition generation has some issues . To handle this, generated
 * AdminApi was copied. Then all public methods were removed. Only problematic
 * public methods from AdminApi will be added. So it is clear were the problems
 * lie and what must be fixed in open api definition file generation in
 * 'sechub-doc'
 *
 * Attention: We do ONLY use this class and its methods were necessary. The
 * origin class shall be used when the methods there work without any problems
 * (means new generated stuff is available)
 *
 * @author Albert Tregnaghi
 *
 */
public class WorkaroundAdminApi {
    private final HttpClient memberVarHttpClient;
    private final ObjectMapper memberVarObjectMapper;
    private final String memberVarBaseUri;
    private final Consumer<HttpRequest.Builder> memberVarInterceptor;
    private final Duration memberVarReadTimeout;
    private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

    public WorkaroundAdminApi(ApiClient apiClient) {
        memberVarHttpClient = apiClient.getHttpClient();
        memberVarObjectMapper = apiClient.getObjectMapper();
        memberVarBaseUri = apiClient.getBaseUri();
        memberVarInterceptor = apiClient.getRequestInterceptor();
        memberVarReadTimeout = apiClient.getReadTimeout();
        memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    /* + ..........Changed code (means workarounds) ..... + */
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++ */

    /**
     * Admin creates an executor configuration An administrator creates an executor
     * a new configuration entry.
     *
     * @param openApiExecutorConfiguration (optional)
     * @return Object
     * @throws ApiException if fails to make API call
     */
    public UUID adminCreatesExecutorConfiguration(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {
        ApiResponse<UUID> localVarResponse = adminCreatesExecutorConfigurationWithHttpInfo(openApiExecutorConfiguration);
        return localVarResponse.getData();
    }

    /**
     * Admin creates an executor configuration An administrator creates an executor
     * a new configuration entry.
     *
     * @param openApiExecutorConfiguration (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException if fails to make API call
     */
    public ApiResponse<UUID> adminCreatesExecutorConfigurationWithHttpInfo(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {
        HttpRequest.Builder localVarRequestBuilder = adminCreatesExecutorConfigurationRequestBuilder(openApiExecutorConfiguration);
        try {
            HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(localVarRequestBuilder.build(), HttpResponse.BodyHandlers.ofInputStream());
            if (memberVarResponseInterceptor != null) {
                memberVarResponseInterceptor.accept(localVarResponse);
            }
            try {
                int statusCode = localVarResponse.statusCode();
                if (statusCode / 100 != 2) {
                    throw getApiException("adminCreatesExecutorConfiguration", localVarResponse);
                }
                Map<String, List<String>> map = localVarResponse.headers().map();
                InputStream body = localVarResponse.body();
                UUID uuid = null;
                if (body != null) {
                    byte[] bytes = body.readAllBytes();
                    body.close();

                    String uuidAsString = new String(bytes);
                    uuid = UUID.fromString(uuidAsString);

                }
                ApiResponse<UUID> response = new ApiResponse<UUID>(statusCode, map, uuid);
                return response;
            } finally {
            }
        } catch (IOException e) {
            throw new ApiException(e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ApiException(e);
        }
    }

    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++ */
    /* + ................End of changed code............. + */
    /* ++++++++++++++++++++++++++++++++++++++++++++++++++++ */

    protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
        String body = response.body() == null ? null : new String(response.body().readAllBytes());
        String message = formatExceptionMessage(operationId, response.statusCode(), body);
        return new ApiException(response.statusCode(), message, response.headers(), body);
    }

    private String formatExceptionMessage(String operationId, int statusCode, String body) {
        if (body == null || body.isEmpty()) {
            body = "[no body]";
        }
        return operationId + " call failed with: " + statusCode + " - " + body;
    }

    private HttpRequest.Builder adminCreatesExecutorConfigurationRequestBuilder(OpenApiExecutorConfiguration openApiExecutorConfiguration) throws ApiException {

        HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

        String localVarPath = "/api/admin/config/executor";

        localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

        localVarRequestBuilder.header("Content-Type", "application/json;charset&#x3D;UTF-8");
        localVarRequestBuilder.header("Accept", "application/json");

        try {
            byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(openApiExecutorConfiguration);
            localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
        } catch (IOException e) {
            throw new ApiException(e);
        }
        if (memberVarReadTimeout != null) {
            localVarRequestBuilder.timeout(memberVarReadTimeout);
        }
        if (memberVarInterceptor != null) {
            memberVarInterceptor.accept(localVarRequestBuilder);
        }
        return localVarRequestBuilder;
    }

}
