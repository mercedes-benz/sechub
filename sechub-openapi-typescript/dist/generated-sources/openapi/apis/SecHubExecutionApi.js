"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecHubExecutionApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class SecHubExecutionApi extends runtime.BaseAPI {
    /**
     * An administrator downloads a ZIP file containing full details of a scan. Main reason for this use case is for debugging when there are problems with security products. Another reason is for developers to adopt new security products easier.
     * Admin downloads all details about a scan job
     */
    async adminDownloadFullScanDataForJobRaw(requestParameters, initOverrides) {
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling adminDownloadFullScanDataForJob().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/scan/download/{jobUUID}`;
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.BlobApiResponse(response);
    }
    /**
     * An administrator downloads a ZIP file containing full details of a scan. Main reason for this use case is for debugging when there are problems with security products. Another reason is for developers to adopt new security products easier.
     * Admin downloads all details about a scan job
     */
    async adminDownloadFullScanDataForJob(requestParameters, initOverrides) {
        const response = await this.adminDownloadFullScanDataForJobRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User approves SecHub job
     * User approves SecHub job
     */
    async userApproveJobRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userApproveJob().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userApproveJob().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/job/{jobUUID}/approve`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User approves SecHub job
     * User approves SecHub job
     */
    async userApproveJob(requestParameters, initOverrides) {
        await this.userApproveJobRaw(requestParameters, initOverrides);
    }
    /**
     * User checks sechub job state
     * User checks sechub job state
     */
    async userCheckJobStatusRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userCheckJobStatus().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userCheckJobStatus().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/job/{jobUUID}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ScheduleJobStatusFromJSON)(jsonValue));
    }
    /**
     * User checks sechub job state
     * User checks sechub job state
     */
    async userCheckJobStatus(requestParameters, initOverrides) {
        const response = await this.userCheckJobStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User creates a new sechub job
     * User creates a new sechub job
     */
    async userCreateNewJobRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userCreateNewJob().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/job`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SecHubConfigurationToJSON)(requestParameters['secHubConfiguration']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SchedulerResultFromJSON)(jsonValue));
    }
    /**
     * User creates a new sechub job
     * User creates a new sechub job
     */
    async userCreateNewJob(requestParameters, initOverrides) {
        const response = await this.userCreateNewJobRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User downloads sechub job report
     * User downloads sechub job report
     */
    async userDownloadJobReportRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userDownloadJobReport().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userDownloadJobReport().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/report/{jobUUID}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SecHubReportFromJSON)(jsonValue));
    }
    /**
     * User downloads sechub job report
     * User downloads sechub job report
     */
    async userDownloadJobReport(requestParameters, initOverrides) {
        const response = await this.userDownloadJobReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User downloads job report in SPDX format
     * User downloads job report in SPDX format
     */
    async userDownloadSpdxJobReportRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userDownloadSpdxJobReport().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userDownloadSpdxJobReport().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/report/spdx/{jobUUID}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SecHubReportFromJSON)(jsonValue));
    }
    /**
     * User downloads job report in SPDX format
     * User downloads job report in SPDX format
     */
    async userDownloadSpdxJobReport(requestParameters, initOverrides) {
        const response = await this.userDownloadSpdxJobReportRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User fetches false positive configuration of project
     * User fetches false positive configuration of project
     */
    async userFetchFalsePositiveConfigurationOfProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userFetchFalsePositiveConfigurationOfProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/false-positives`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FalsePositiveProjectConfigurationFromJSON)(jsonValue));
    }
    /**
     * User fetches false positive configuration of project
     * User fetches false positive configuration of project
     */
    async userFetchFalsePositiveConfigurationOfProject(requestParameters, initOverrides) {
        const response = await this.userFetchFalsePositiveConfigurationOfProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * User marks false positives
     * User marks false positives for finished sechub job
     */
    async userMarkFalsePositivesRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userMarkFalsePositives().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/false-positives`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.FalsePositivesToJSON)(requestParameters['falsePositives']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User marks false positives
     * User marks false positives for finished sechub job
     */
    async userMarkFalsePositives(requestParameters, initOverrides) {
        await this.userMarkFalsePositivesRaw(requestParameters, initOverrides);
    }
    /**
     * User unmarks existing false positive definitons
     * User unmarks existing false positive definitons
     */
    async userUnmarksFalsePositivesRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userUnmarksFalsePositives().');
        }
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling userUnmarksFalsePositives().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/false-positive/{id}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User unmarks existing false positive definitons
     * User unmarks existing false positive definitons
     */
    async userUnmarksFalsePositives(requestParameters, initOverrides) {
        await this.userUnmarksFalsePositivesRaw(requestParameters, initOverrides);
    }
    /**
     * User unmarks existing false positive definitons
     * User unmarks existing false positive definitons
     */
    async userUnmarksJobFalsePositivesRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userUnmarksJobFalsePositives().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userUnmarksJobFalsePositives().');
        }
        if (requestParameters['findingId'] == null) {
            throw new runtime.RequiredError('findingId', 'Required parameter "findingId" was null or undefined when calling userUnmarksJobFalsePositives().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/false-positive/{jobUUID}/{findingId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        urlPath = urlPath.replace(`{${"findingId"}}`, encodeURIComponent(String(requestParameters['findingId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User unmarks existing false positive definitons
     * User unmarks existing false positive definitons
     */
    async userUnmarksJobFalsePositives(requestParameters, initOverrides) {
        await this.userUnmarksJobFalsePositivesRaw(requestParameters, initOverrides);
    }
    /**
     * User uploads source code
     * User uploads source code
     */
    async userUploadSourceCodeRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userUploadSourceCode().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userUploadSourceCode().');
        }
        if (requestParameters['checkSum'] == null) {
            throw new runtime.RequiredError('checkSum', 'Required parameter "checkSum" was null or undefined when calling userUploadSourceCode().');
        }
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError('file', 'Required parameter "file" was null or undefined when calling userUploadSourceCode().');
        }
        const queryParameters = {};
        if (requestParameters['checkSum'] != null) {
            queryParameters['checkSum'] = requestParameters['checkSum'];
        }
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);
        let formParams;
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        }
        else {
            formParams = new URLSearchParams();
        }
        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file']);
        }
        let urlPath = `/api/project/{projectId}/job/{jobUUID}/sourcecode`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User uploads source code
     * User uploads source code
     */
    async userUploadSourceCode(requestParameters, initOverrides) {
        await this.userUploadSourceCodeRaw(requestParameters, initOverrides);
    }
    /**
     * User uploads binaries
     * User uploads binaries
     */
    async userUploadsBinariesRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling userUploadsBinaries().');
        }
        if (requestParameters['jobUUID'] == null) {
            throw new runtime.RequiredError('jobUUID', 'Required parameter "jobUUID" was null or undefined when calling userUploadsBinaries().');
        }
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError('file', 'Required parameter "file" was null or undefined when calling userUploadsBinaries().');
        }
        if (requestParameters['xFileSize'] == null) {
            throw new runtime.RequiredError('xFileSize', 'Required parameter "xFileSize" was null or undefined when calling userUploadsBinaries().');
        }
        if (requestParameters['checkSum'] == null) {
            throw new runtime.RequiredError('checkSum', 'Required parameter "checkSum" was null or undefined when calling userUploadsBinaries().');
        }
        const queryParameters = {};
        if (requestParameters['file'] != null) {
            queryParameters['file'] = requestParameters['file'];
        }
        if (requestParameters['checkSum'] != null) {
            queryParameters['checkSum'] = requestParameters['checkSum'];
        }
        const headerParameters = {};
        if (requestParameters['xFileSize'] != null) {
            headerParameters['x-file-size'] = String(requestParameters['xFileSize']);
        }
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/project/{projectId}/job/{jobUUID}/binaries`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"jobUUID"}}`, encodeURIComponent(String(requestParameters['jobUUID'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User uploads binaries
     * User uploads binaries
     */
    async userUploadsBinaries(requestParameters, initOverrides) {
        await this.userUploadsBinariesRaw(requestParameters, initOverrides);
    }
}
exports.SecHubExecutionApi = SecHubExecutionApi;
