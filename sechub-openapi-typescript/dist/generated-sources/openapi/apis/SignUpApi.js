"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignUpApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class SignUpApi extends runtime.BaseAPI {
    /**
     * In this use case the administrator will accept the self registration done by an user
     * Admin applies self registration
     */
    async adminAcceptSignupRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminAcceptSignup().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/signup/accept/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * In this use case the administrator will accept the self registration done by an user
     * Admin applies self registration
     */
    async adminAcceptSignup(requestParameters, initOverrides) {
        await this.adminAcceptSignupRaw(requestParameters, initOverrides);
    }
    /**
     * In this use case the administrator will not accept the self registration done by an user but delete the entry.
     * Admin deletes user signup
     */
    async adminDeleteSignupRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminDeleteSignup().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/signup/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * In this use case the administrator will not accept the self registration done by an user but delete the entry.
     * Admin deletes user signup
     */
    async adminDeleteSignup(requestParameters, initOverrides) {
        await this.adminDeleteSignupRaw(requestParameters, initOverrides);
    }
    /**
     * In this use case the administrator will list the currently unapplied user self registrations/signups.
     * Admin lists open user signups
     */
    async adminListOpenUserSignUpsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/signups`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.SignUpFromJSON));
    }
    /**
     * In this use case the administrator will list the currently unapplied user self registrations/signups.
     * Admin lists open user signups
     */
    async adminListOpenUserSignUps(initOverrides) {
        const response = await this.adminListOpenUserSignUpsRaw(initOverrides);
        return await response.value();
    }
    /**
     * User clicks link to get new api token
     * User clicks link to get new api token
     */
    async anonymousGetNewApiTokenByOneTimeTokenRaw(requestParameters, initOverrides) {
        if (requestParameters['oneTimeToken'] == null) {
            throw new runtime.RequiredError('oneTimeToken', 'Required parameter "oneTimeToken" was null or undefined when calling anonymousGetNewApiTokenByOneTimeToken().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/anonymous/apitoken/{oneTimeToken}`;
        urlPath = urlPath.replace(`{${"oneTimeToken"}}`, encodeURIComponent(String(requestParameters['oneTimeToken'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User clicks link to get new api token
     * User clicks link to get new api token
     */
    async anonymousGetNewApiTokenByOneTimeToken(requestParameters, initOverrides) {
        await this.anonymousGetNewApiTokenByOneTimeTokenRaw(requestParameters, initOverrides);
    }
    /**
     * User requests new API token
     * User requests new API token
     */
    async anonymousRefreshApiTokenByEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['emailAddress'] == null) {
            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling anonymousRefreshApiTokenByEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/anonymous/refresh/apitoken/{emailAddress}`;
        urlPath = urlPath.replace(`{${"emailAddress"}}`, encodeURIComponent(String(requestParameters['emailAddress'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User requests new API token
     * User requests new API token
     */
    async anonymousRefreshApiTokenByEmailAddress(requestParameters, initOverrides) {
        await this.anonymousRefreshApiTokenByEmailAddressRaw(requestParameters, initOverrides);
    }
    /**
     * User self registration
     * User self registration
     */
    async anonymousSignUpRaw(requestParameters, initOverrides) {
        if (requestParameters['signUpInput'] == null) {
            throw new runtime.RequiredError('signUpInput', 'Required parameter "signUpInput" was null or undefined when calling anonymousSignUp().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        let urlPath = `/api/anonymous/signup`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SignUpInputToJSON)(requestParameters['signUpInput']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * User self registration
     * User self registration
     */
    async anonymousSignUp(requestParameters, initOverrides) {
        await this.anonymousSignUpRaw(requestParameters, initOverrides);
    }
}
exports.SignUpApi = SignUpApi;
