"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemApi = void 0;
const runtime = require("../runtime");
/**
 *
 */
class SystemApi extends runtime.BaseAPI {
    /**
     * An anonymous user or system wants to know if the server is alive and running.
     * Check if the server is alive and running.
     */
    async anonymousCheckAliveGetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/anonymous/check/alive`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An anonymous user or system wants to know if the server is alive and running.
     * Check if the server is alive and running.
     */
    async anonymousCheckAliveGet(initOverrides) {
        await this.anonymousCheckAliveGetRaw(initOverrides);
    }
    /**
     * An anonymous user or system wants to know if the server is alive and running.
     * Check if the server is alive and running.
     */
    async anonymousCheckAliveHeadRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        let urlPath = `/api/anonymous/check/alive`;
        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An anonymous user or system wants to know if the server is alive and running.
     * Check if the server is alive and running.
     */
    async anonymousCheckAliveHead(initOverrides) {
        await this.anonymousCheckAliveHeadRaw(initOverrides);
    }
}
exports.SystemApi = SystemApi;
