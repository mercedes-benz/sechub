"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserAdministrationApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class UserAdministrationApi extends runtime.BaseAPI {
    /**
     * Admin deletes a user
     * Admin deletes a user
     */
    async adminDeleteUserRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminDeleteUser().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Admin deletes a user
     * Admin deletes a user
     */
    async adminDeleteUser(requestParameters, initOverrides) {
        await this.adminDeleteUserRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator grants admin rights to another user. So this user will become also an administrator.
     * Admin grants admin rights to user
     */
    async adminGrantAdminRightsToUserRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminGrantAdminRightsToUser().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user/{userId}/grant/superadmin`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator grants admin rights to another user. So this user will become also an administrator.
     * Admin grants admin rights to user
     */
    async adminGrantAdminRightsToUser(requestParameters, initOverrides) {
        await this.adminGrantAdminRightsToUserRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator downloads a json file containing all names of SecHub admins
     * Admin lists all admins
     */
    async adminListAllAdminsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/admins`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * An administrator downloads a json file containing all names of SecHub admins
     * Admin lists all admins
     */
    async adminListAllAdmins(initOverrides) {
        const response = await this.adminListAllAdminsRaw(initOverrides);
        return await response.value();
    }
    /**
     * An administrator downloads a json file containing all user ids
     * Admin lists all users
     */
    async adminListAllUsersRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/users`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * An administrator downloads a json file containing all user ids
     * Admin lists all users
     */
    async adminListAllUsers(initOverrides) {
        const response = await this.adminListAllUsersRaw(initOverrides);
        return await response.value();
    }
    /**
     * An administrator revokes existing admin rights from another administrator.
     * Admin revokes admin rights from an admin
     */
    async adminRevokeAdminRightsFromAdminRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminRevokeAdminRightsFromAdmin().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user/{userId}/revoke/superadmin`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator revokes existing admin rights from another administrator.
     * Admin revokes admin rights from an admin
     */
    async adminRevokeAdminRightsFromAdmin(requestParameters, initOverrides) {
        await this.adminRevokeAdminRightsFromAdminRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator downloads a json file containing json containing user details
     * Admin shows user details
     */
    async adminShowUserDetailsRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminShowUserDetails().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user/{userId}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserDetailInformationFromJSON)(jsonValue));
    }
    /**
     * An administrator downloads a json file containing json containing user details
     * Admin shows user details
     */
    async adminShowUserDetails(requestParameters, initOverrides) {
        const response = await this.adminShowUserDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * An administrator fetches user details for an email address.
     * Admin shows user details for email address
     */
    async adminShowUserDetailsForEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['emailAddress'] == null) {
            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling adminShowUserDetailsForEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user-by-email/{emailAddress}`;
        urlPath = urlPath.replace(`{${"emailAddress"}}`, encodeURIComponent(String(requestParameters['emailAddress'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserDetailInformationFromJSON)(jsonValue));
    }
    /**
     * An administrator fetches user details for an email address.
     * Admin shows user details for email address
     */
    async adminShowUserDetailsForEmailAddress(requestParameters, initOverrides) {
        const response = await this.adminShowUserDetailsForEmailAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Admin updates user email address
     * Admin updates user email address
     */
    async adminUpdateUserEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminUpdateUserEmailAddress().');
        }
        if (requestParameters['emailAddress'] == null) {
            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling adminUpdateUserEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/user/{userId}/email/{emailAddress}`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        urlPath = urlPath.replace(`{${"emailAddress"}}`, encodeURIComponent(String(requestParameters['emailAddress'])));
        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Admin updates user email address
     * Admin updates user email address
     */
    async adminUpdateUserEmailAddress(requestParameters, initOverrides) {
        await this.adminUpdateUserEmailAddressRaw(requestParameters, initOverrides);
    }
}
exports.UserAdministrationApi = UserAdministrationApi;
