"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectAdministrationApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class ProjectAdministrationApi extends runtime.BaseAPI {
    /**
     * An administrator assigns a template to a project
     * Admin assigns template to project
     */
    async adminAssignTemplateToProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminAssignTemplateToProject().');
        }
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError('templateId', 'Required parameter "templateId" was null or undefined when calling adminAssignTemplateToProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/template/{templateId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters['templateId'])));
        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator assigns a template to a project
     * Admin assigns template to project
     */
    async adminAssignTemplateToProject(requestParameters, initOverrides) {
        await this.adminAssignTemplateToProjectRaw(requestParameters, initOverrides);
    }
    /**
     * Admin changes project access level
     * Admin changes project access level
     */
    async adminChangeProjectAccessLevelRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminChangeProjectAccessLevel().');
        }
        if (requestParameters['projectAccessLevel'] == null) {
            throw new runtime.RequiredError('projectAccessLevel', 'Required parameter "projectAccessLevel" was null or undefined when calling adminChangeProjectAccessLevel().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/accesslevel/{projectAccessLevel}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"projectAccessLevel"}}`, encodeURIComponent(String(requestParameters['projectAccessLevel'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Admin changes project access level
     * Admin changes project access level
     */
    async adminChangeProjectAccessLevel(requestParameters, initOverrides) {
        await this.adminChangeProjectAccessLevelRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator changes the project description
     * Admin changes project description
     */
    async adminChangeProjectDescriptionRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminChangeProjectDescription().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ProjectInputToJSON)(requestParameters['projectInput']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectDetailInformationFromJSON)(jsonValue));
    }
    /**
     * An administrator changes the project description
     * Admin changes project description
     */
    async adminChangeProjectDescription(requestParameters, initOverrides) {
        const response = await this.adminChangeProjectDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Admin creates a project
     * Admin creates a project
     */
    async adminCreateProjectRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ProjectInputToJSON)(requestParameters['projectInput']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Admin creates a project
     * Admin creates a project
     */
    async adminCreateProject(requestParameters = {}, initOverrides) {
        await this.adminCreateProjectRaw(requestParameters, initOverrides);
    }
    /**
     * Admin deletes a project
     * Admin deletes a project
     */
    async adminDeleteProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminDeleteProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Admin deletes a project
     * Admin deletes a project
     */
    async adminDeleteProject(requestParameters, initOverrides) {
        await this.adminDeleteProjectRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator downloads a json file containing all project ids
     * Admin lists all projects
     */
    async adminListAllProjectsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/projects`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response);
    }
    /**
     * An administrator downloads a json file containing all project ids
     * Admin lists all projects
     */
    async adminListAllProjects(initOverrides) {
        const response = await this.adminListAllProjectsRaw(initOverrides);
        return await response.value();
    }
    /**
     * An administrator or owner assigns an user to an existing SecHub project
     * Admin or owner assigns user to project
     */
    async adminOrOwnerAssignUserToProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminOrOwnerAssignUserToProject().');
        }
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminOrOwnerAssignUserToProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/management/project/{projectId}/membership/{userId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator or owner assigns an user to an existing SecHub project
     * Admin or owner assigns user to project
     */
    async adminOrOwnerAssignUserToProject(requestParameters, initOverrides) {
        await this.adminOrOwnerAssignUserToProjectRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator or the current project owner changes the ownership of an existing sechub project.
     * Admin or owner changes owner of a project
     */
    async adminOrOwnerChangesProjectOwnerRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminOrOwnerChangesProjectOwner().');
        }
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminOrOwnerChangesProjectOwner().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/management/project/{projectId}/owner/{userId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator or the current project owner changes the ownership of an existing sechub project.
     * Admin or owner changes owner of a project
     */
    async adminOrOwnerChangesProjectOwner(requestParameters, initOverrides) {
        await this.adminOrOwnerChangesProjectOwnerRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator or owner unassigns an user from a sechub project.
     * Admin or owner unassigns user from project
     */
    async adminOrOwnerUnassignUserFromProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminOrOwnerUnassignUserFromProject().');
        }
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling adminOrOwnerUnassignUserFromProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/management/project/{projectId}/membership/{userId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator or owner unassigns an user from a sechub project.
     * Admin or owner unassigns user from project
     */
    async adminOrOwnerUnassignUserFromProject(requestParameters, initOverrides) {
        await this.adminOrOwnerUnassignUserFromProjectRaw(requestParameters, initOverrides);
    }
    /**
     * An administrator downloads a json file containing json with project details
     * Admin shows project details
     */
    async adminShowProjectDetailsRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminShowProjectDetails().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProjectDetailInformationFromJSON)(jsonValue));
    }
    /**
     * An administrator downloads a json file containing json with project details
     * Admin shows project details
     */
    async adminShowProjectDetails(requestParameters, initOverrides) {
        const response = await this.adminShowProjectDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * An admin downloads a json file containing log for scans of project
     * Admin shows scan logs for project
     */
    async adminShowScanLogsForProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminShowScanLogsForProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/scan/logs`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ProjectScanLogSummaryFromJSON));
    }
    /**
     * An admin downloads a json file containing log for scans of project
     * Admin shows scan logs for project
     */
    async adminShowScanLogsForProject(requestParameters, initOverrides) {
        const response = await this.adminShowScanLogsForProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * An administrator unassigns a template from a project
     * Admin unassigns template from project
     */
    async adminUnassignTemplateFromProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling adminUnassignTemplateFromProject().');
        }
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError('templateId', 'Required parameter "templateId" was null or undefined when calling adminUnassignTemplateFromProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/template/{templateId}`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        urlPath = urlPath.replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters['templateId'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator unassigns a template from a project
     * Admin unassigns template from project
     */
    async adminUnassignTemplateFromProject(requestParameters, initOverrides) {
        await this.adminUnassignTemplateFromProjectRaw(requestParameters, initOverrides);
    }
    /**
     * Get list of owned and assigned projects with project id, owner and assigned users (if caller is owner or admin)
     * Get list of owned and assigned projects
     */
    async getAssignedProjectDataListRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/projects`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.ProjectDataFromJSON));
    }
    /**
     * Get list of owned and assigned projects with project id, owner and assigned users (if caller is owner or admin)
     * Get list of owned and assigned projects
     */
    async getAssignedProjectDataList(initOverrides) {
        const response = await this.getAssignedProjectDataListRaw(initOverrides);
        return await response.value();
    }
    /**
     * Update project metadata
     * Update project metadata
     */
    async updateProjectMetaDataRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling updateProjectMetaData().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/metadata`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Update project metadata
     * Update project metadata
     */
    async updateProjectMetaData(requestParameters, initOverrides) {
        await this.updateProjectMetaDataRaw(requestParameters, initOverrides);
    }
    /**
     * Update project whitelist
     * Update project whitelist
     */
    async updateProjectWhitelistRaw(requestParameters, initOverrides) {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError('projectId', 'Required parameter "projectId" was null or undefined when calling updateProjectWhitelist().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/project/{projectId}/whitelist`;
        urlPath = urlPath.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters['projectId'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ProjectInputToJSON)(requestParameters['projectInput']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Update project whitelist
     * Update project whitelist
     */
    async updateProjectWhitelist(requestParameters, initOverrides) {
        await this.updateProjectWhitelistRaw(requestParameters, initOverrides);
    }
}
exports.ProjectAdministrationApi = ProjectAdministrationApi;
