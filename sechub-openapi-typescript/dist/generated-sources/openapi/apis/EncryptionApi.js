"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class EncryptionApi extends runtime.BaseAPI {
    /**
     * An administrator fetches encryption status from all domains where encryption is used.
     * Admin fetches encryption status
     */
    async adminFetchesEncryptionStatusRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/encryption/status`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SecHubEncryptionStatusFromJSON)(jsonValue));
    }
    /**
     * An administrator fetches encryption status from all domains where encryption is used.
     * Admin fetches encryption status
     */
    async adminFetchesEncryptionStatus(initOverrides) {
        const response = await this.adminFetchesEncryptionStatusRaw(initOverrides);
        return await response.value();
    }
    /**
     * An administrator starts encryption rotation.
     * Admin starts encryption rotation
     */
    async adminStartsEncryptionRotationRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/admin/encryption/rotate`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.SecHubEncryptionDataToJSON)(requestParameters['secHubEncryptionData']),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * An administrator starts encryption rotation.
     * Admin starts encryption rotation
     */
    async adminStartsEncryptionRotation(requestParameters = {}, initOverrides) {
        await this.adminStartsEncryptionRotationRaw(requestParameters, initOverrides);
    }
}
exports.EncryptionApi = EncryptionApi;
