"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SecHub API
 * The SecHub API is a collection of RESTful endpoints. It is designed to be used by users and administrators of the SecHub application.  Most of the endpoints are protected by basic authentication.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserSelfServiceApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class UserSelfServiceApi extends runtime.BaseAPI {
    /**
     * The unauthenticated user verifies new email address in token
     * Anonymous user verifies new email address
     */
    async anonymousUserVerifiesEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError('token', 'Required parameter "token" was null or undefined when calling anonymousUserVerifiesEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/anonymous/email/verify/{token}`;
        urlPath = urlPath.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * The unauthenticated user verifies new email address in token
     * Anonymous user verifies new email address
     */
    async anonymousUserVerifiesEmailAddress(requestParameters, initOverrides) {
        await this.anonymousUserVerifiesEmailAddressRaw(requestParameters, initOverrides);
    }
    /**
     * The authenticated user fetches his user details
     * User fetches his user details
     */
    async userFetchUserDetailInformationRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/management/user`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.UserDetailInformationFromJSON)(jsonValue));
    }
    /**
     * The authenticated user fetches his user details
     * User fetches his user details
     */
    async userFetchUserDetailInformation(initOverrides) {
        const response = await this.userFetchUserDetailInformationRaw(initOverrides);
        return await response.value();
    }
    /**
     * The authenticated user updates his email address
     * User updates his email address
     */
    async userUpdatesEmailAddressRaw(requestParameters, initOverrides) {
        if (requestParameters['emailAddress'] == null) {
            throw new runtime.RequiredError('emailAddress', 'Required parameter "emailAddress" was null or undefined when calling userUpdatesEmailAddress().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        let urlPath = `/api/management/user/email/{emailAddress}`;
        urlPath = urlPath.replace(`{${"emailAddress"}}`, encodeURIComponent(String(requestParameters['emailAddress'])));
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * The authenticated user updates his email address
     * User updates his email address
     */
    async userUpdatesEmailAddress(requestParameters, initOverrides) {
        await this.userUpdatesEmailAddressRaw(requestParameters, initOverrides);
    }
}
exports.UserSelfServiceApi = UserSelfServiceApi;
