// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
plugins {
    id 'java-library'
    id 'org.springframework.boot' apply true
}
 
dependencies {

    implementation project(':sechub-testframework')
    implementation project(':sechub-integrationtest')
    implementation project(':sechub-scan')
    
    implementation project(':sechub-commons-pds')
    implementation project(':sechub-commons-encryption')
    implementation project(':sechub-wrapper-checkmarx')
   
    implementation library.apache_commons_io
    implementation library.apache_commons_compress // we need TAR archive support

}

task importEclipseProjectsNeedingOpenApiFile(type: Exec){

    workingDir "$rootDir"
    commandLine './gradlew', ':sechub-systemtest:cleanEclipse',':sechub-systemtest:eclipse', ':sechub-api-java:cleanEclipse',':sechub-api-java:eclipse', ':sechub-pds-tools:cleanEclipse',':sechub-pds-tools:eclipse',':sechub-examples:example-sechub-api-java:cleanEclipse',':sechub-examples:example-sechub-api-java:eclipse','-Dsechub.build.stage=all'
}

/*
 * Here we handle the situation with the missing parts from "non default" projects.
 * 
 * Why is this added here? 
 * We need a project which is configured in "default" eclipse import. 
 * Because we do not want to add an artificial project like "sechub-include-missing" we just
 * reused the existing "sechub-developertools" project.
 * 
 */
if (!secHubBuildStage.providesGeneratedOpenApiFile()){
    /* in this case, those projects are not initialized by gradle at this point. We must trigger this special:*/
    tasks.eclipse.dependsOn(importEclipseProjectsNeedingOpenApiFile)
}

tasks.register('runLocalTestKeycloakStarter', JavaExec) {
    group = "Keycloak"
    description = "Run LocalTestKeycloakStarter with optional arguments (use -PkeycloakArgs=\"8081 myadmin mypass\")"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.mercedesbenz.sechub.developertools.container.keycloak.LocalTestKeycloakStarter'
    if (project.hasProperty('keycloakArgs')) {
        args project.property('keycloakArgs').split("\\s+")
    }
}

tasks.register('stopLocalTestKeycloakStarter', Delete) {
    group = "Keycloak"
    description = "delete the .info file to stop the running keycloak instance (use -PkeycloakPort=8081)"
    def port = project.hasProperty('keycloakPort') ? project.property('keycloakPort') : '8080'
    def infoFile = file("$rootDir/sechub-developertools/build/tmp/keycloak_container_${port}.info")
    doFirst {
        if (infoFile.exists()) {
            println "Stopping Keycloak by deleting info file: ${infoFile.absolutePath}"
            infoFile.delete()
        } else {
            println "No Keycloak instance is running on port ${port}, nothing to stop."
        }
    }
}

tasks.register('runLocalTestPostgreSQLStarter', JavaExec) {
    group = "PostgreSQL"
    description = "Run LocalPostgreSQLStarter with optional arguments (use -PpostgresArgs=\"49152 myadmin mypass mydatabase\")"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.mercedesbenz.sechub.developertools.container.postgres.LocalTestPostgreSQLStarter'
    if (project.hasProperty('postgresArgs')) {
        args project.property('postgresArgs').split("\\s+")
    }
}

tasks.register('stopLocalTestPostgreSQLStarter', Delete) {
    group = "PostgreSQL"
    description = "delete the .info file to stop the running PostgreSQL instance (use -PpostgresPort=49152)"
    def port = project.hasProperty('postgresPort') ? project.property('postgresPort') : '49152'
    def infoFile = file("$rootDir/sechub-developertools/build/tmp/postgres_container_${port}.info")
    doFirst {
        if (infoFile.exists()) {
            println "Stopping PostgreSQL by deleting info file: ${infoFile.absolutePath}"
            infoFile.delete()
        } else {
            println "No PostgreSQL instance is running on port ${port}, nothing to stop."
        }
    }
}
