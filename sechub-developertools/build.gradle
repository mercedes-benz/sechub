// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
dependencies {

    compile project(':sechub-testframework')
    compile project(':sechub-integrationtest')
    compile project(':sechub-scan')
    
}

task startIntegrationTestAdminUI(type: JavaExec){

    group 'sechub'
    description 'Starts developer admin ui ready to use with for a server started by gradle task <startIntegrationTestServer>'

    classpath = sourceSets.main.runtimeClasspath

    main = 'com.daimler.sechub.developertools.admin.ui.DeveloperAdministrationUI'

    jvmArgs = ['-Dsechub.developertools.admin.integrationtestserver=true',
               '-Dsechub.developertools.admin.server=localhost',
               '-Dsechub.developertools.admin.serverport=8443',
               '-Dsechub.developertools.admin.userid=int-test_superadmin',
               '-Dsechub.developertools.admin.apitoken=int-test_superadmin-pwd']

}

task buildDeveloperAdminUI(type: Jar) {
    group 'sechub'
    description 'Builds the SecHub Developer Admin tool as standalone executable jar. Use launch-developer-admin-ui script to execute'
    baseName = 'sechub-developer-admin-ui'
    
    manifest {
        attributes 'Main-Class': 'com.daimler.sechub.developertools.admin.ui.DeveloperAdministrationUI'
    }
    
    
    from { 
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } 
    }

    with jar
}
