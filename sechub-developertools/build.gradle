// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
plugins {
    id 'java-library'
}
dependencies {

    implementation project(':sechub-testframework')
    implementation project(':sechub-integrationtest')
    implementation project(':sechub-scan')
    
    implementation project(':sechub-commons-pds')
    implementation project(':sechub-wrapper-checkmarx')
   
    implementation library.apache_commons_io
    implementation library.apache_commons_compress // we need TAR archive support

}

task startIntegrationTestAdminUI(type: JavaExec){

    group 'sechub'
    description 'Starts developer admin ui ready to use with for a server started by gradle task <startIntegrationTestServer>'

    classpath = sourceSets.main.runtimeClasspath

    mainClass = 'com.mercedesbenz.sechub.developertools.admin.ui.DeveloperAdministrationUI'

    jvmArgs = ['-Dsechub.developertools.admin.integrationtestserver=true',
               '-Dsechub.developertools.admin.server=localhost',
               '-Dsechub.developertools.admin.serverport=8443',
               '-Dsechub.developertools.admin.userid=int-test_superadmin',
               '-Dsechub.developertools.admin.apitoken=int-test_superadmin-pwd']

}

task buildDeveloperAdminUI(type: Jar, dependsOn: build) {
    group 'sechub'
    description 'Builds the SecHub Developer Admin tool as standalone executable jar. Use launch-developer-admin-ui script to execute'
    archiveBaseName = 'sechub-developer-admin-ui'
    
    manifest {
        attributes 'Main-Class': 'com.mercedesbenz.sechub.developertools.admin.ui.DeveloperAdministrationUI'
    }
    
    
    from { 
        configurations.runtimeClasspath.collect { 
            it.isDirectory() ? it : zipTree(it) 
        } 
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    with jar
}


task importEclipseProjectsNeedingOpenApiFile(type: Exec){
    workingDir "$rootDir"
    commandLine './gradlew', ':sechub-systemtest:cleanEclipse',':sechub-systemtest:eclipse', ':sechub-api-java:cleanEclipse',':sechub-api-java:eclipse', ':sechub-pds-tools:cleanEclipse',':sechub-pds-tools:eclipse',':sechub-examples:example-sechub-api-java:cleanEclipse',':sechub-examples:example-sechub-api-java:eclipse','-Dsechub.build.stage=all'
            
}

/*
 * Here we handle the situation with the missing parts from "non default" projects.
 * 
 * Why is this added here? 
 * We need a project which is configured in "default" eclipse import. 
 * Because we do not want to add an artificial project like "sechub-include-missing" we just
 * reused the existing "sechub-developertools" project.
 * 
 */
if (!secHubBuildStage.providesGeneratedOpenApiFile()){
    /* in this case, those projects are not initialized by gradle at this point. We must trigger this special:*/
    tasks.eclipse.dependsOn(importEclipseProjectsNeedingOpenApiFile)
}


