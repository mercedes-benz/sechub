// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject sechub-client-java
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */

dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation library.slf4j
    implementation library.jackson_core
    implementation library.jackson_databind
    
    implementation project(':sechub-commons-model')
    
    implementation library.apache_httpcomponents_client

    testImplementation library.junit
    testImplementation library.mockito
    testImplementation library.hamcrest
}

// see https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator-gradle-plugin/README.adoc
apply plugin: 'org.openapi.generator'

def specFilePath = "$rootDir/sechub-doc/build/api-spec/openapi3.json"

openApiValidate {
    inputSpec = "$specFilePath"
}

// see: https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator-gradle-plugin
task generateJavaClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    
    inputSpec = "$specFilePath"
    outputDir = "$rootDir/sechub-client-java/gen"
    apiPackage = "com.daimler.sechub.client.java.api"
    invokerPackage = "com.daimler.sechub.client.java.api"
    modelPackage = "com.daimler.sechub.client.java.api.model"
    
    globalProperties = [
            validateSpec   : "true",
            modelDocs      : "false",
            models         : "",  // generate all
            apis           : "", // generate all
            supportingFiles: ""  // generate all
    ]
    configOptions = [
    		groupId 					: "com.daimler.sechub", 
            performBeanValidation		: "false",
            useBeanValidation    		: "false",
            java8                		: "true",
            dateLibrary          		: "java8",
            serializableModel    		: "true",
            serializationLibrary 		: "jackson",
            artifactId           		: "sechub-client-java-api",
            artifactDescription			: "The SecHub API client library for Java",
            artifactUrl					: "https://github.com/Daimler/sechub",
            legacyDiscriminatorBehavior : "false",
            library 					: "jersey2",
            licenseName 				: "MIT",
            licenseUrl					: "https://github.com/Daimler/sechub/blob/develop/LICENSE",
            developerEmail				: "",
            developerName				: "",
            developerOrganization 		: "Daimler TSS",
            developerOrganizationUrl	: "https://www.daimler-tss.com/",
            scmConnection				: "",
            scmDeveloperConnection		: "",
            scmUrl						: "https://github.com/daimler/sechub"
    ]
}

tasks.withType(org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

// let's generate always java open api parts before compile:
//compileJava.dependsOn tasks.openApiGenerate

/**
 * Custom gradle task to build a "fatJar".
 */
task buildJavaClientAll(type: Jar) {
	group 'sechub'
    description 'This creates java client library jar containing all libraries.'
    baseName = 'sechub-java-client-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

sourceSets {
    main{
        java {
           srcDirs 'src/main/java/'
        }

    }

}

//TODO: This task should create the FatJar.
task buildJavaClient(type:Exec) {
  group 'sechub'
  description 'This builds only the generated SecHub Java Client'
  dependsOn 'generateJavaClient'
  
  workingDir = "${project.projectDir}"

  commandLine './generateClient.sh', "${project.projectDir}/gen"
}



