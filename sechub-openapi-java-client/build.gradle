import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

// SPDX-License-Identifier: MIT
/*============================================================================
* Build file for subproject
*
* Root build file: "${rootProject.projectDir}/build.gradle"
* ============================================================================
*/

plugins {
    id 'org.openapi.generator'
}

dependencies {
    implementation library.jacksonAnnotations
    implementation library.jacksonDatabind
    implementation library.javaxAnnotationApi
    implementation library.findbugs
    implementation library.jacksonDatatypeJsr310
    implementation library.jacksonDatabindNullable
    implementation library.httpmime


    // SecHub
    implementation project(':sechub-commons-archive')
}




clean.doFirst {
    delete 'gen'
}

def openApiSpecPath = "${project.rootDir}/sechub-openapi/src/main/resources/openapi.yaml"

openApiGenerate {
    generatorName = 'java'
    inputSpec = openApiSpecPath
    outputDir = "${projectDir}/gen"
    apiPackage = 'com.mercedesbenz.sechub.api.internal.gen'
    invokerPackage = 'com.mercedesbenz.sechub.api.internal.gen.invoker'
    modelPackage = 'com.mercedesbenz.sechub.api.internal.gen.model'
    packageName = 'com.mercedesbenz.sechub.api.internal.gen'
    generateModelTests = false
    generateApiTests = false

    globalProperties = [
            validateSpec   : 'true',
            modelDocs      : 'false',
            models         : '',  // generate all
            apis           : '', // generate all
            supportingFiles: '',  // generate all
    ]
    // java generator: https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/java.md
    configOptions = [
            groupId                    : 'com.mercedesbenz.sechub',
            version                    : "${project.version}",
            performBeanValidation      : 'false',
            useBeanValidation          : 'false',
            dateLibrary                : 'java8',
            useTags                    : 'false',
            modelNameSuffix            : '',
            modelNamePrefix            : '',
            modelPropertyNaming        : 'original',
            useInnerModel              : 'false' ,
            serializableModel          : 'true',
            serializationLibrary       : 'jackson',
            artifactId                 : 'sechub-openapi-java-client',
            artifactDescription        : 'The SecHub API Java client',
            artifactUrl                : 'https://github.com/mercedes-benz/sechub',
            legacyDiscriminatorBehavior: 'false',
            library                    : 'native', // Uses the Java HTTP Client (available in Java 11+)
            licenseName                : 'MIT',
            licenseUrl                 : 'https://github.com/mercedes-benz/sechub/blob/develop/LICENSE',
            developerEmail             : '',
            developerName              : '',
            developerOrganization      : 'Mercedes-Benz Tech Innovation',
            developerOrganizationUrl   : 'https://www.mercedes-benz-techinnovation.com/',
            scmConnection              : '',
            scmDeveloperConnection     : '',
            scmUrl                     : 'https://github.com/mercedes-benz/sechub',
            useJakartaEe               : 'false',
            additionalModelTypeAnnotations: '@com.fasterxml.jackson.annotation.JsonInclude(com.fasterxml.jackson.annotation.JsonInclude.Include.NON_EMPTY)'
    ]
}

tasks.named('openApiGenerate').configure {
    doFirst {
        delete 'gen'
    }
}

tasks.withType(GenerateTask).configureEach {
    outputs.upToDateWhen { false }
    outputs.cacheIf { false }
}

ext.apiPublishNecessary = "${project.version}" != '0.0.0'

/*
 * The assemble task will normally be called from IDE integrations (eclipse buildship, intellij) to setup parts
 */
tasks.named('assemble') {
    dependsOn tasks.named('openApiGenerate') // an assemble shall always generate all parts
}

tasks.named('compileJava') {
    dependsOn tasks.named('openApiGenerate')
}

/*
* If the gradle task eclipse is used, the assemble task shall be used as well
* to avoid compile errors.
*
* Direct IDE integrations (eclipse buildship, intellij) normally directly use
* the assemble task before importing projects/modules, so it should work there always.
*/
tasks.named('eclipse') {
    dependsOn('provideOpenAPIJavaClientForEclipse')
}

/**
 * Custom gradle task to cleanup all existing library jars inside eclipse lib folder 
 */
task cleanEclipseLibFolder(type: Delete) {
    group 'sechub'
    description 'Deletes all JAR files in the eclipse lib folder.'
    delete fileTree(dir: "${rootProject.projectDir}/ide-plugins/eclipse/sechub-eclipse-plugin/lib", include: '*.jar')
}


/**
 * Custom gradle task to provide a library inside the lib folder for eclipse PDE (without a version number - avoids changes in project PDE setup files 
 */
task provideOpenAPIJavaClientForEclipse(type: Copy) {
    dependsOn("assemble", cleanEclipseLibFolder)
    
    group 'sechub'
    description 'Copies the built JAR file to eclipse lib folder without version number in filename.'
    from("$buildDir/libs") {
        include "sechub-openapi-java-client-${project.version}.jar" 
    }
    
    // copy all necessary runtime dependencies
    from(configurations.runtimeClasspath) {
    }
    into("${rootProject.projectDir}/ide-plugins/eclipse/sechub-eclipse-plugin/lib")
	
	rename { 
		String fileName -> 
		 if (fileName.startsWith('sechub-openapi-java-client')) {
			return "sechub-openapi-java-client.jar" // rename to jar file without version
		 } else if (fileName.startsWith('sechub-commons-archive')) {
			return "sechub-commons-archive.jar" // rename to jar file without version
		 } else if (fileName.startsWith('sechub-commons-core')) {
			return "sechub-commons-core.jar" // rename to jar file without version
		 } else if (fileName.startsWith('sechub-commons-model')) {
			return "sechub-commons-model.jar" // rename to jar file without version
		 }
		 // in all cases we use the library name as is
		 return fileName;
    }
    
}

sourceSets {
    main {
        java {
            srcDir "$rootDir/sechub-openapi-java-client/gen/src/main/java"
        }
    }
}