// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
 
plugins {
    id 'org.springframework.boot' apply true
}
 
dependencies {

    implementation library.springboot_starter_web
    implementation library.springboot_starter_data_jpa
    implementation library.springboot_starter_security
    implementation library.flyway
    implementation library.logstashLogbackEncoder
    implementation library.database_h2
    implementation library.database_postgres
    implementation library.apache_commons_io

    api project(':sechub-pds-core')

    testImplementation project(':sechub-testframework') // testframework has no dependencies or page effects, so we can use the lib for testing
    testImplementation library.springboot_starter_test
    testImplementation library.springframework_security_test
    
}

task assembleArtifact(type: Zip, group: 'sechub') {
    archiveFileName = "sechub-pds-documentation-${project.version}.zip"
    archiveClassifier.set('documentation')
    destinationDirectory= file("$buildDir/zip/")
    from "${projectDir}/build/go/"
    from "${rootProject.projectDir}/sechub-doc/build/asciidoc"
    include '**/sechub-product-delegation-server.*'
    description "Assemble archive $archiveFileName into ${relativePath(destinationDirectory)}"
}

/**
 * For integration tests, local develoment etc. we need a generated, private key
 * which is different for each developer, not accidently committed to git, also
 * valid on builds etc.
 *
 * This is done by dev-ensure_localhost_certificate.sh - for details refer to bash script
 */
task ensureLocalhostCertificate(type: Exec) {
    group 'sechub'
    description 'Calling this task, will ensure a localhost certificate exists. This is necessary for development and integration tests'

    workingDir "${projectDir}"

    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'bash', "${projectDir}/dev-ensure_localhost_certificate.sh"
    }else{
        commandLine "${projectDir}/dev-ensure_localhost_certificate.sh"
    }
}

/* make eclipse task depend on ensured local certificate*/
tasks.eclipse.dependsOn 'ensureLocalhostCertificate'

version =   VersionData.getPdsVersion()

if (buildDoneByGitHubActions ){
    println("publish $project.name will be ignored at github actions at the moment!")
   return;
}

/**
 * We currently  publish only the server java spring boot jar, so having complete server on maven repository - documentation can be found inside sechub-doc
 */
apply plugin: 'maven-publish'


publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java

            pom {
                name = 'SecHub Product Delegation Server'
                description = 'SecHub Product Delegation Server as a sprint boot jar. Ready to use.'

                scm {
                    url = 'https://github.com/mercedes-benz/sechub'
                }

                 licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/mercedes-benz/sechub/blob/master/LICENSE'
                    }
                }
            }
        }
        mavenJava(MavenPublication) {

            artifact source: assembleArtifact, extension: 'zip'

            pom {
                name = 'SecHub Product Delegation Server documentation'
                description = 'SecHub Product Delegation Server documentation as single zip file.'

                scm {
                    url = 'https://github.com/mercedes-benz/sechub'
                }

                 licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/mercedes-benz/sechub/blob/master/LICENSE'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url =  project.hasProperty("mavenTargetRepoUrl") ? project.properties['mavenTargetRepoUrl'] : System.getProperty("user.home")+"/.m2/repository"

            if (project.hasProperty("mavenRepoUserName") && project.hasProperty("mavenRepoPassword")) {
                credentials(PasswordCredentials) {
                    username project.properties['mavenRepoUserName']
                    password project.properties['mavenRepoPassword']
                }
            }
        }
    }
}

