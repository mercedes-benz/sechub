// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */

plugins {
    id 'org.springframework.boot' apply true
}

dependencies {
    implementation project(':sechub-commons-core')
	implementation project(':sechub-api-java')
    implementation library.springboot_starter_web
    implementation library.springboot_starter_security
    implementation library.springboot_starter_thymeleaf
    implementation library.logstashLogbackEncoder
    implementation library.thymeleaf_extras_springsecurity5
    // TODO: make library for this
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.aspectj:aspectjweaver'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    developmentOnly library.springboot_devtoolssf
}

/* make eclipse task depend on ensured local certificate*/
tasks.eclipse.dependsOn 'ensureLocalhostCertificate'

/**
 * For integration tests, local develoment etc. we need a generated, private key
 * which is different for each developer, not accidently committed to git, also
 * valid on builds etc.
 *
 * This is done by dev-ensure_localhost_certificate.sh - for details refer to bash script
 */
task ensureLocalhostCertificate(type: Exec) {
    group 'sechub'
    description 'Calling this task, will ensure a localhost certificate exists. This is necessary for development and integration tests'

    workingDir "${projectDir}"

    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'bash', "${projectDir}/dev-ensure_localhost_certificate.sh"
    }else{
        commandLine "${projectDir}/dev-ensure_localhost_certificate.sh"
    }
}

apply plugin: 'maven-publish'

version = versionData.getWebuiVersion()

publishing {
    publications {
        mavenJava(MavenPublication) {

            from components.java

            pom {
                name = 'SecHub WebUI'
                description = 'SecHub WebUI as a Spring Boot Jar. Ready to use.'

                scm {
                    url = 'https://github.com/mercedes-benz/sechub'
                }

                 licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/mercedes-benz/sechub/blob/master/LICENSE'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url =  project.hasProperty("mavenTargetRepoUrl") ? project.properties['mavenTargetRepoUrl'] : System.getProperty("user.home")+"/.m2/repository"

            if (project.hasProperty("mavenRepoUserName") && project.hasProperty("mavenRepoPassword")) {
                credentials(PasswordCredentials) {
                    username project.properties['mavenRepoUserName']
                    password project.properties['mavenRepoPassword']
                }
            }
        }
    }
}