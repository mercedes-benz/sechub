// SPDX-License-Identifier: MIT
 /*============================================================================
 * Build file for subproject
 *
 * Root build file: "${rootProject.projectDir}/build.gradle"
 * ============================================================================
 */
 
task genGo(type: Exec) {
    group 'sechub'
    description 'Generates some go code'
    
    workingDir "${projectDir}"

    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'bash', "${projectDir}/gen_go.sh"
    }else{
        commandLine "${projectDir}/gen_go.sh"
    }
}

assemble.dependsOn(tasks.genGo)
tasks.eclipse.dependsOn(tasks.genGo)

task buildGo(type: Exec, dependsOn: 'genGo') {
    group 'sechub'
    description 'Builds sechub GO client for linux and windows platforms. Does not build anything else.'
    // https://golang.org/cmd/go/
    //environment GOPATH: "${projectDir}"

    workingDir "${projectDir}/src/mercedes-benz.com/sechub/"

    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'bash', "${projectDir}/build_go.sh","${projectDir}", new MinGWConverter().convert("${projectDir}"),'mercedes-benz.com/sechub'
    }else{
        commandLine "${projectDir}/build_go.sh","${projectDir}", "${projectDir}",'mercedes-benz.com/sechub'
    }

}

task testGo(type:Exec) {
  group 'sechub'
  description 'Executes all sechub client GO tests'
  // https://golang.org/cmd/go/
  // http://www.binpress.com/tutorial/getting-started-with-go-and-test-driven-development/160
  // https://github.com/jstemmer/go-junit-report'
  //  https://www.digitalocean.com/community/tutorials/how-to-build-go-executables-for-multiple-platforms-on-ubuntu-16-04#step-4-%E2%80%94-building-executables-for-different-architectures
  environment GOPATH: "${projectDir}"
  //https://stackoverflow.com/questions/48882691/force-retesting-or-disable-test-caching
  // but normally not necessary:  environment GOCACHE: "off"

  workingDir "${projectDir}/src/mercedes-benz.com/sechub/cli"

  //on windows:
    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'go', 'test', 'mercedes-benz.com/sechub/cli', 'mercedes-benz.com/sechub/util', '-v'
    }else{
        commandLine 'go', 'test', 'mercedes-benz.com/sechub/cli', 'mercedes-benz.com/sechub/util', '-v'
    }

}

task linterGo(type:Exec) {
  group 'sechub'
  description 'Executes go linter at sechub client sources and outputs warnings etc.'
  environment GOPATH: "${projectDir}"

  //on windows:
    if (OSUtil.isWindows()){
        commandLine 'cmd', '/c', 'golint', 'mercedes-benz.com/sechub/cli', 'mercedes-benz.com/sechub/util', 'mercedes-benz.com/sechub/testutil'
    }else{
        commandLine 'golint', 'mercedes-benz.com/sechub/cli', 'mercedes-benz.com/sechub/util', 'mercedes-benz.com/sechub/testutil'
    }

}

task assembleArtifact(type: Zip, group: 'client') {
    archiveName "sechub-client-${project.version}.zip"
    destinationDir file("$buildDir/zip/")
    from "${projectDir}/build/go/"
    from "${rootProject.projectDir}/sechub-doc/build/asciidoc/sechub-client.pdf" // we add the documentation into zip
    description "Assemble archive $archiveName into ${relativePath(destinationDir)}"
}

version =   VersionData.getClientVersion()

if (buildDoneByGitHubActions ){
    println("publish $project.name will be ignored at github actions at the moment!")
   return;
}

/**
 * We currently  publish only client binaries in a zipped file, containing all build platforms - documentation can be found inside sechub-doc
 */
apply plugin: 'maven-publish'


publishing {
    publications {
        mavenJava(MavenPublication) {

            artifact source: assembleArtifact, extension: 'zip'

            pom {
                name = 'SecHub Clients'
                description = 'SecHub Clients for all supported plattforms as one single zip file'

                scm {
                    url = 'https://github.com/daimler/sechub'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://github.com/daimler/sechub/blob/master/LICENSE'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            // either use defined one or use local maven repo...
            url =  project.hasProperty("mavenTargetRepoUrl") ? project.properties['mavenTargetRepoUrl'] : System.getProperty("user.home")+"/.m2/repository"

            if (project.hasProperty("mavenRepoUserName") && project.hasProperty("mavenRepoPassword")) {
                credentials(PasswordCredentials) {
                    username project.properties['mavenRepoUserName']
                    password project.properties['mavenRepoPassword']
                }
            }
        }
    }
}
