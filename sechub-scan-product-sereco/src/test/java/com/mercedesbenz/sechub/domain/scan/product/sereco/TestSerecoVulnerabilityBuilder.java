// SPDX-License-Identifier: MIT
package com.mercedesbenz.sechub.domain.scan.product.sereco;

import com.mercedesbenz.sechub.commons.model.ScanType;
import com.mercedesbenz.sechub.sereco.metadata.SerecoCodeCallStackElement;
import com.mercedesbenz.sechub.sereco.metadata.SerecoVulnerability;

public class TestSerecoVulnerabilityBuilder {
    private SerecoVulnerability vulnerability;
    private int columnNr;
    private int lineNr;
    private int locationNr;

    public static TestSerecoVulnerabilityBuilder builder() {
        return new TestSerecoVulnerabilityBuilder();
    }

    private TestSerecoVulnerabilityBuilder() {
        vulnerability = new SerecoVulnerability();
    }

    public SerecoVulnerability build() {
        return vulnerability;
    }

    public TestSerecoVulnerabilityBuilder name(String name) {
        vulnerability.setType(name);
        return this;
    }

    public TestSerecoVulnerabilityBuilder cwe(int cweId) {
        vulnerability.getClassification().setCwe("" + cweId);
        return this;
    }

    public SerecoCodeScanVulnerability codeScan() {
        vulnerability.setScanType(ScanType.CODE_SCAN);
        SerecoCodeCallStackElement element1 = new SerecoCodeCallStackElement();
        vulnerability.setCode(element1);
        return new SerecoCodeScanVulnerability(element1);
    }

    public SerecoSecretScanVulnerability secretScan() {
        vulnerability.setScanType(ScanType.SECRET_SCAN);
        SerecoCodeCallStackElement element1 = new SerecoCodeCallStackElement();
        vulnerability.setCode(element1);
        return new SerecoSecretScanVulnerability(element1);
    }

    public SerecoWebScanVulnerability webScan() {
        vulnerability.setScanType(ScanType.WEB_SCAN);
        return new SerecoWebScanVulnerability();
    }

    public class SerecoWebScanVulnerability {
        public TestSerecoVulnerabilityBuilder end() {
            return TestSerecoVulnerabilityBuilder.this;
        }
    }

    public SerecoInfraScanVulnerability infraScan() {
        vulnerability.setScanType(ScanType.INFRA_SCAN);
        return new SerecoInfraScanVulnerability();
    }

    public class SerecoInfraScanVulnerability {
        public TestSerecoVulnerabilityBuilder end() {
            return TestSerecoVulnerabilityBuilder.this;
        }
    }

    private abstract class SerecoAbstractCodeBaseVulnerability<T extends SerecoAbstractCodeBaseVulnerability<T>> {
        private SerecoCodeCallStackElement element;

        public SerecoAbstractCodeBaseVulnerability(SerecoCodeCallStackElement element1) {
            this.element = element1;
            column(columnNr++);
            line(lineNr++);
            location("location_" + (locationNr++));
        }

        @SuppressWarnings("unchecked")
        public T location(String location) {
            this.element.setLocation(location);
            return (T) this;
        }

        @SuppressWarnings("unchecked")
        public T relevantPart(String relevant) {
            this.element.setRelevantPart(relevant);
            return (T) this;
        }

        @SuppressWarnings("unchecked")
        public T source(String source) {
            this.element.setSource(source);
            return (T) this;
        }

        @SuppressWarnings("unchecked")
        public T column(int column) {
            this.element.setColumn(column);
            return (T) this;
        }

        @SuppressWarnings("unchecked")
        public T line(int line) {
            this.element.setLine(line);
            return (T) this;
        }

        public T callsCode() {
            SerecoCodeCallStackElement element2 = new SerecoCodeCallStackElement();
            element.setCalls(element2);
            return createNewVulnerabilityFor(element2);
        }

        protected abstract T createNewVulnerabilityFor(SerecoCodeCallStackElement element);

        public TestSerecoVulnerabilityBuilder end() {
            return TestSerecoVulnerabilityBuilder.this;
        }
    }

    public class SerecoCodeScanVulnerability extends SerecoAbstractCodeBaseVulnerability<SerecoCodeScanVulnerability> {

        public SerecoCodeScanVulnerability(SerecoCodeCallStackElement element) {
            super(element);
        }

        @Override
        protected SerecoCodeScanVulnerability createNewVulnerabilityFor(SerecoCodeCallStackElement element) {
            return new SerecoCodeScanVulnerability(element);
        }

    }

    public class SerecoSecretScanVulnerability extends SerecoAbstractCodeBaseVulnerability<SerecoSecretScanVulnerability> {

        public SerecoSecretScanVulnerability(SerecoCodeCallStackElement element) {
            super(element);
        }

        @Override
        protected SerecoSecretScanVulnerability createNewVulnerabilityFor(SerecoCodeCallStackElement element) {
            return new SerecoSecretScanVulnerability(element);
        }

    }

}