// SPDX-License-Identifier: MIT


ext {
secHubBuildStage = new BuildStage()
projectType = [

            goProjects: [
                    project(':sechub-cli'),
            ],
            javaProjects: [
               project(':sechub-testframework'),
               project(':sechub-analyzer-cli'),
               project(':sechub-commons-core'),
               project(':sechub-commons-model'),
               project(':sechub-commons-model-testframework'),
               project(':sechub-commons-pds'),
               project(':sechub-commons-archive'),
               project(':sechub-storage-core'),
               project(':sechub-wrapper-owasp-zap'),
               project(':sechub-pds-commons-core'),
               project(':sechub-wrapper-xray'),
            ],
            
            publishedLibraries: [
               project(':sechub-commons-core'),
               project(':sechub-commons-model'),
            ],
            

            /* any project using spring parts but not already in other spring boot group must be defined here */
            springBootProjects: [
                    project(':sechub-scan-testframework'), //we use same mockito and junit as in other projects, so a spring boot project...
                    project(':sechub-integrationtest'),
                    project(':sechub-developertools'),
                    project(':sechub-test'),
                    
                    project(':sechub-storage-sharedvolume-spring'),
                    
                    /* next projects added as spring boot projects only, because otherwise we get the (older)
                       dependencies from aws as compiled projects in IDEs: */
                    project(':sechub-storage-s3-aws'),
                    project(':sechub-storage-s3-aws-test'),
                    
                    /* special wrapper applications which are also spring boot applications
                       to have dependency injection and access to some other spring boot parts */
                    project(':sechub-wrapper-checkmarx'),
                     
                       
            ],

            /* adapter projects - have simple spring dependencies, but know only sechub-adapter as base */
            springBootAdapterProjects: [
                    project(':sechub-adapter'),
                    project(':sechub-adapter-pds'),
                    project(':sechub-adapter-checkmarx'),
                    project(':deprecated-sechub-adapter-netsparker'),
                    project(':deprecated-sechub-adapter-nessus'),
            ],
            
             /* PDS projects, all contained inside product delegation server */
            springBootPDSProjects: [
                    project(':sechub-pds'),
                    project(':sechub-pds-core'),
            ],
            /* server projects, all contained inside server */
            springBootSecHubServerProjects: [
                    project(':sechub-server'),
                    project(':sechub-server-core'),
                    project(':sechub-schedule'),
                    project(':sechub-authorization'),
                    project(':sechub-administration'),
                    project(':sechub-notification'),
                    project(':sechub-sereco'),
                    project(':sechub-shared-kernel'),

                    project(':sechub-scan'),
                    project(':sechub-scan-product-pds'),

                    project(':sechub-scan-product-sereco'),
                    project(':sechub-scan-product-checkmarx'),
                    project(':deprecated-sechub-scan-product-netsparker'),
                    project(':deprecated-sechub-scan-product-nessus'),

                    project(':sechub-statistic'),

            ],
            
            /* SecHub frontend projects */
            springBootWebUiProjects:[
                   project(':sechub-webui'),
            ],
            
            bootableSpringApplicationProjects:[
                   project(':sechub-server'),
                   project(':sechub-pds'),
                   project(':sechub-wrapper-checkmarx'),
                   project(':sechub-webui'),
            ],

            /* documentation projects */
            springDocProjects: [
                    project(':sechub-doc'), // we use this project for doc generation so must be java and also with spring dependencies

            ],

            /* 'eclipseProjects' defines projects which will be automatically generated by eclipse gradle task
             *  all spring projects are automatically added to this and must NOT be added manually!
             */
            eclipseProjects: [
                    project(':sechub-doc'),
                    project(':sechub-other'),
                    project(':sechub-pds-solutions'),
					project(':sechub-solution'),
					project(':sechub-solutions-shared'),
            ],

            asciiDoctorProjects: [
                    project(':sechub-doc'),
            ],
            
            noSpotless : [
                  
            ],
            
            integrationTestProjects: [
                    project(':sechub-integrationtest'),
            ],
    ]
}

if (secHubBuildStage.providesGeneratedOpenApiFile()){
    /* add the java projects which need a open api file / compiled java api */
    projectType.javaProjects.add(project(':sechub-api-java'))
    
    projectType.javaProjects.add(project(':sechub-systemtest'))
    projectType.javaProjects.add(project(':sechub-pds-tools'))

    projectType.javaProjects.add(project(':sechub-examples:example-sechub-api-java'))
    
    /* avoid spotless duplication problem in gradle build */
    projectType.noSpotless.add(project(':sechub-examples:example-sechub-api-java'))
    
    /* make it possible to use integration test parts for systemtest (unit tests) as well */
    projectType.integrationTestProjects.add(project(':sechub-systemtest'))
}


/* dynamically define java projects */
projectType.springBootProjects.addAll(projectType.springBootSecHubServerProjects)
projectType.springBootProjects.addAll(projectType.springBootPDSProjects)
projectType.springBootProjects.addAll(projectType.springBootAdapterProjects)
projectType.springBootProjects.addAll(projectType.springDocProjects)
projectType.springBootProjects.addAll(projectType.springBootWebUiProjects)

projectType.javaProjects.addAll(projectType.springBootProjects)

/* dynamically add all java projects as eclipse projects:*/
projectType.eclipseProjects.addAll(projectType.javaProjects)
projectType.eclipseProjects.addAll(projectType.goProjects)
