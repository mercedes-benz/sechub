import * as vscode from 'vscode';
import { SecHubContext } from '../extension';
import { DefaultClient } from '../api/defaultClient';
import { ProjectData, SecHubFinding } from 'sechub-openapi-ts-client';
import { SECHUB_CONTEXT_STORAGE_KEYS } from '../utils/sechubConstants';
import { VulnerabilityExplanation } from '../webview/vulnerabilityExplanation';
import { getNonce } from '../utils/sechubUtils';

export async function explainVulnerabilityByAi(sechubContext: SecHubContext, finding: SecHubFinding): Promise<void> {
	const project = sechubContext.extensionContext.globalState.get<ProjectData>(SECHUB_CONTEXT_STORAGE_KEYS.selectedProject);
	const projectId = project?.projectId;
	const jobUUID = sechubContext.getReport()?.jobUUID;

	if (!projectId || !jobUUID) {
		vscode.window.showErrorMessage('Project ID or Job UUID is not available. Please select a project and run a job first.');
		return;
	}

	if (!finding) {
		vscode.window.showErrorMessage('No vulnerability selected for explanation.');
		return;
	}

	if (!finding.id) {
		vscode.window.showErrorMessage('Selected vulnerability does not have a valid ID.');
		return;
	}

	const client = await DefaultClient.getInstance(sechubContext.extensionContext);

	try {
		const explanation = await client.userRequestFindingExplanation(projectId, jobUUID, finding.id);

		if (explanation) {
			// crate webview from json and render content in new tab
			const webviewPanel = vscode.window.createWebviewPanel(
				'vulnerabilityExplanation',
				`Vulnerability Explanation for ${finding.name} (ID: ${finding.id})`,
				vscode.ViewColumn.Beside,
				{
					enableScripts: true,
					localResourceRoots: [vscode.Uri.joinPath(sechubContext.extensionContext.extensionUri, 'media')],
				},
			);

			const vulnerabilityExplanation = new VulnerabilityExplanation();
			const renderedExplanation = vulnerabilityExplanation.renderSecHubVulnerabilityExplanation(explanation);

			const nonce = getNonce();

			webviewPanel.webview.html = `<!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
			</head>
			<body>
			${renderedExplanation}
			</body>
			</html>`;

		} else {
			vscode.window.showErrorMessage('No explanation available for the selected vulnerability.');
		}
	} catch (error) {
		vscode.window.showErrorMessage(
			`Failed to explain vulnerability by AI: ${error instanceof Error ? error.message : 'Unknown error'}`,
		);
		console.error('Error explaining vulnerability:', error);
	}
}
