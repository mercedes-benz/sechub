import * as vscode from 'vscode';
import { SecHubContext } from "../extension";
import { DefaultClient } from "../api/defaultClient";
import { SecHubFinding } from 'sechub-openapi-ts-client';

export async function explainVulnerabilityByAi(sechubContext: SecHubContext, finding: SecHubFinding): Promise<void> {
	const client = await DefaultClient.getInstance(sechubContext.extensionContext);

	try {
		const explanation = await client.explainByAiMock();
		console.log(`Explaining vulnerability: ${finding.name} (ID: ${finding.id})`);
		if (explanation) {

			// crate webview from json and render content in new tab
			const webviewPanel = vscode.window.createWebviewPanel(
				'vulnerabilityExplanation',
				`Vulnerability Explanation for ${finding.name} (ID: ${finding.id})`,
				vscode.ViewColumn.Beside,
				{
					enableScripts: true,
					localResourceRoots: [vscode.Uri.joinPath(sechubContext.extensionContext.extensionUri, 'media')]
				}
			);
			webviewPanel.webview.html = `<html>
			<body>
			<pre>${JSON.stringify(explanation, null, 2)}
			</pre>
			<h2>Code Example</h2>
			<code>
			${explanation.codeExample.vulnerableExample}
			</code>
			<code>
			${explanation.codeExample.secureExample}
			</code>
			<div>
			<p>${explanation.codeExample.explanation.content}</p>
			</div>
			</body>
			</html>`;
		} else {
			vscode.window.showErrorMessage('No explanation available for the selected vulnerability.');
		}
	} catch (error) {
		vscode.window.showErrorMessage(`Failed to explain vulnerability: ${error instanceof Error ? error.message : 'Unknown error'}`);
		console.error('Error explaining vulnerability:', error);
	}
}