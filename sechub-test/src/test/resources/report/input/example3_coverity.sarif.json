{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "results": [
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ec65254c98c112c88b9f7601d7a50e24"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "eb1c9672da26fc51e417fdebd38aba55"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a9fd0f7ea1d79e6ad15d95b3912bf03a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "52cd66b631bbe2c02500c72f659e0238"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4f7ad79b629b0439157edf8b5511a621"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4324aa1f249b84b7f25dfdc826571046"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6da8769c2ea221473b1e90878b6038dc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "49676e35df68cdedbb8ddee47cae8af0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o32\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o32)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "994b6d24a6ecebc541fc1e5608248058"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o32)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o32\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o37\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o37)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ee0b8aee441f3ee53615252ce80fa16c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o37)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o37\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o40\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o40)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b6b42e853559313040ab2c45586aa5b8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o40)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/aliasing/Aliasing6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"o40\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8d1b57d16cd5eb409ea67ba719b408aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0][0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "54485710fd1e5ae053b93aaf0dc34fd3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0][0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0][2]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][2])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "54485710fd1e5ae053b93aaf0dc34fd3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][2])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0][2]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "526952435f7cee2538c4ffd382ad8a53"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[1]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[1])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "526952435f7cee2538c4ffd382ad8a53"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[1])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[1]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[2]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[2])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "526952435f7cee2538c4ffd382ad8a53"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[2])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[2]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array1[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array1[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "500b6104c0ee48dd48c654c4b14fdccc"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array1[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array1[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[n - n]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[n)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8ad1ab4c9f1370f82962982c128dcd86"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[n)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[n - n]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "UNUSED_VALUE/unused_value/adjacent/java",
          "message": {
            "text": "UNUSED_VALUE: Assigning value from \"name\" to \"array[0]\" here, but that stored value is overwritten before it can be used."
          },
          "taxa": [
            {
              "id": "563",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8f774dc73292924c1a88c7783858e487"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Overwriting previous write to \"array[0]\" with value \"\"abc\"\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Assigning value from \"name\" to \"array[0]\" here, but that stored value is overwritten before it can be used."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f01d9e9d88ce6807dada0a816850f960"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "UNUSED_VALUE/unused_value/adjacent/java",
          "message": {
            "text": "UNUSED_VALUE: Assigning value \"\"abc\"\" to \"array[0]\" here, but that stored value is overwritten before it can be used."
          },
          "taxa": [
            {
              "id": "563",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0861aff39809825268d38c33fc8c8181"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Overwriting previous write to \"array[0]\" with value from \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Assigning value \"\"abc\"\" to \"array[0]\" here, but that stored value is overwritten before it can be used."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "46e47b74d9698a0759573cae94989acb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ca22663c76c4fffbdee5e4db3e2f5c05"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d32508440d1bc18f099250a6f0219055"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[1]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[1])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d32508440d1bc18f099250a6f0219055"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[1])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[1]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0][0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/arrays/Arrays9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c52d3d6abc9d0a6ba13f9c82028ea078"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0][0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/arrays/Arrays9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"array[0][0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c535d353b786ee77260fb2f0b658bcb2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s6\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s6)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "7ef6d2d52759271a9dcf855b05d6d457"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s6)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.StringBuffer.StringBuffer(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s6\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1ff1c2b75298f8098e2cdb348cfc27e8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"s3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ff371988cd3c04f0aaf9e38e0bdec626"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2ddc47840822336b750198f44f1327db"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0d0b4ec50c53bdd0a6f18b8b3b0a5305"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0d0b4ec50c53bdd0a6f18b8b3b0a5305"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "acf6d8da8a27e67b637ae73f2f4b628f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.lang.StringBuffer.StringBuffer(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic15.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"w.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 55
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d3e173232b1b4e36c239525c5a1a51b6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s\", to \"securibench.micro.basic.Basic16$Widget.setContents(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.basic.Basic16$Widget.setContents(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.basic.Basic16$Widget.getContents()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.basic.Basic16$Widget.getContents()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"w.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"contents\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic16.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"w1.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1775959097125cf613eda518dcb78db2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s\", to \"securibench.micro.basic.Basic17$Widget.setContents(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.basic.Basic17$Widget.setContents(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.basic.Basic17$Widget.getContents()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.basic.Basic17$Widget.getContents()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"w1.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"contents\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"w2.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8b6c47fd53a1cd1c226d6f1545cbfc96"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s\", to \"securibench.micro.basic.Basic17$Widget.setContents(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.basic.Basic17$Widget.setContents(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.basic.Basic17$Widget.getContents()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.basic.Basic17$Widget.getContents()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"w2.getContents()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"contents\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"contents\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic17.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic18.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "81634cccdaa116c9fcb3c95ad6006190"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic18.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic18.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic18.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic18.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"s\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "HARDCODED_CREDENTIALS/hardcoded_credentials/password_in_connection_string/java",
          "message": {
            "text": "HARDCODED_CREDENTIALS: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password.\nRemediation Advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
          },
          "taxa": [
            {
              "id": "259",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "bb3a0d39ec8cef75abd041f7a2f06b7d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: The constant string \"jdbc:dtF:E. coli;USR=dtfadm;PWD=dtfadm;Create=always;APPL=GIVE;DType=FILE\" is a credential or key."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Ignoring resource created by \"con.prepareStatement(\"select * from Users where name=\" + name)\" leaks it."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "fe91103fe8f11d010517043ff23bd0d4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: A new resource is returned from allocation method \"prepareStatement\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Ignoring resource created by \"con.prepareStatement(\"select * from Users where name=\" + name)\" leaks it."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Connection.prepareStatement(java.lang.String)\" may allow an attacker to inject SQL.\nRemediation Advice: Perform the following to guard against SQL data value injection attacks with JDBC prepared statements.\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0945ce92909e2729bfc9c026f0207c58"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following to guard against SQL data value injection attacks with JDBC prepared statements.\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic19.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Connection.prepareStatement(java.lang.String)\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"r.nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "73ee1c27a01ab9335000ec33d8796935"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"r.nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "852ae91007f47f79ddd49d0aed8cd77e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "HARDCODED_CREDENTIALS/hardcoded_credentials/password_in_connection_string/java",
          "message": {
            "text": "HARDCODED_CREDENTIALS: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password.\nRemediation Advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
          },
          "taxa": [
            {
              "id": "259",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "90d1d034a19e2cecd89f5636128f7945"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: The constant string \"jdbc:dtF:E. coli;USR=dtfadm;PWD=dtfadm;Create=always;APPL=GIVE;DType=FILE\" is a credential or key."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Statement.execute(java.lang.String)\" may allow an attacker to inject SQL.\nRemediation Advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b2af4df78c39943f2eabe30a0d0b62db"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Statement.execute(java.lang.String)\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Variable \"stmt\" going out of scope leaks the resource it refers to."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "979ca4002484e813a083606cd749b7de"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 5. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #1: A new resource is returned from allocation method \"createStatement\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Assigning: \"stmt\" = resource returned from \"con.createStatement()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #3: Resource \"stmt\" is not closed or saved in \"execute\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic20.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Variable \"stmt\" going out of scope leaks the resource it refers to."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CSRF/csrf/database_update/java",
          "message": {
            "text": "CSRF: \"securibench.micro.basic.Basic21.doGet\" is a web-app entry point that requires protection from cross-site request forgery (CSRF).\nRemediation Advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."
          },
          "taxa": [
            {
              "id": "352",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d2ce0ac470e8e741fe12e7dbed4a52df"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: CSRF validation required. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.basic.Basic21.doGet\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: No CSRF protection was detected anywhere in this application. If this is not correct, please refer to the CSRF checker reference on how to specify it via checker option."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Calling \"executeUpdate\" updates the database."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "HARDCODED_CREDENTIALS/hardcoded_credentials/password_in_connection_string/java",
          "message": {
            "text": "HARDCODED_CREDENTIALS: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password.\nRemediation Advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
          },
          "taxa": [
            {
              "id": "259",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "94651a605c024af22474112dc016f720"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: A connection string password should be stored in a Properties file in a location that is inaccessible to unauthorized users."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #1: The constant string \"jdbc:dtF:E. coli;USR=dtfadm;PWD=dtfadm;Create=always;APPL=GIVE;DType=FILE\" is a credential or key."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: \"java.sql.DriverManager.getConnection(java.lang.String)\" uses the constant string as a connection password."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Statement.executeUpdate(java.lang.String)\" may allow an attacker to inject SQL.\nRemediation Advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2fdb24f4d27b1aef74e13c97d4397c4a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Insecure concatenation of a SQL statement. The value \"name\" is tainted. Passing the tainted command to the SQL API \"java.sql.Statement.executeUpdate(java.lang.String)\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted.\nRemediation Advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2fdb24f4d27b1aef74e13c97d4397c4a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Insecure concatenation of a SQL statement. The value \"name\" is tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted value \"\"select * from Users where name=\" + name\" to the SQL API \"java.sql.Statement.executeUpdate(java.lang.String, int)\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted.\nRemediation Advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2fdb24f4d27b1aef74e13c97d4397c4a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Insecure concatenation of a SQL statement. The value \"name\" is tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted value \"\"select * from Users where name=\" + name\" to the SQL API \"java.sql.Statement.executeUpdate(java.lang.String, java.lang.String[])\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SQLI/sql_injection/sink/java",
          "message": {
            "text": "SQLI: Insecure concatenation of a SQL statement. The value \"name\" is tainted.\nRemediation Advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
          },
          "taxa": [
            {
              "id": "89",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2fdb24f4d27b1aef74e13c97d4397c4a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform one of the following to guard against SQL data value injection attacks with JDBC.\n* Refactor the JDBC code to use the \"PreparedStatement\" API instead of \"Statement\".\n* Add a positional parameter to the SQL statement using \"?\".\n* Bind the tainted value to the parameter using the \"setString\" method: \"PreparedStatement.setString(1, \"\"name\"\")\".\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to query construction using tainted data and then to query execution. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Insecure concatenation of a SQL statement. The value \"name\" is tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted value \"\"select * from Users where name=\" + name\" to the SQL API \"java.sql.Statement.executeQuery(java.lang.String)\" may allow an attacker to inject SQL."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Variable \"stmt\" going out of scope leaks the resource it refers to."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "9d7c122d52c6af2b0aca0c5e539216aa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 8. (Events #1 - #7)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #1: A new resource is returned from allocation method \"createStatement\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #2: Assigning: \"stmt\" = resource returned from \"con.createStatement()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Resource \"stmt\" is not closed or saved in \"executeUpdate\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #4: Resource \"stmt\" is not closed or saved in \"executeUpdate\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #5: Resource \"stmt\" is not closed or saved in \"executeUpdate\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #6: Resource \"stmt\" is not closed or saved in \"executeQuery\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic21.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #7: Variable \"stmt\" going out of scope leaks the resource it refers to."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "PATH_MANIPULATION/path_manipulation/_/java",
          "message": {
            "text": "PATH_MANIPULATION: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
          },
          "taxa": [
            {
              "id": "22",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "047502b44451f77039445106e3a6d427"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic22.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "CSRF/csrf/filesystem_modification/java",
          "message": {
            "text": "CSRF: \"securibench.micro.basic.Basic23.doGet\" is a web-app entry point that requires protection from cross-site request forgery (CSRF).\nRemediation Advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."
          },
          "taxa": [
            {
              "id": "352",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "59ac2559b89a262c4a70f4cb6f90955d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Protection against CSRF attacks involves several steps.\n\n1. Generate a cryptographically random token that is associated with a user's session.  The java.security.SecureRandom class is well suited for this purpose.\n2. Pass this token with any requests that should be protected from cross-site requests that originate from malicious code running in a user's browser.\n3. Reject any requests that have a missing or invalid token, for example by adding a CSRF filter to the servlet filter chain."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: CSRF validation required. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.basic.Basic23.doGet\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #2: No CSRF protection was detected anywhere in this application. If this is not correct, please refer to the CSRF checker reference on how to specify it via checker option."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Calling \"FileWriter\" modifies the filesystem."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "PATH_MANIPULATION/path_manipulation/_/java",
          "message": {
            "text": "PATH_MANIPULATION: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
          },
          "taxa": [
            {
              "id": "22",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "047d031703e571b93766646f76a18b48"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Ignoring resource created by \"new java.io.FileWriter(name)\" leaks it."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "be6a57aefed24cd565d923e780f156cd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: \"new java.io.FileWriter(name)\" creates a new resource."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Ignoring resource created by \"new java.io.FileWriter(name)\" leaks it."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "PATH_MANIPULATION/path_manipulation/_/java",
          "message": {
            "text": "PATH_MANIPULATION: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
          },
          "taxa": [
            {
              "id": "22",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "047d031703e571b93766646f76a18b48"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #3: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Ignoring resource created by \"new java.io.FileWriter(name)\" leaks it."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "be6a57aefed24cd565d923e780f156cd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: \"new java.io.FileWriter(name)\" creates a new resource."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Ignoring resource created by \"new java.io.FileWriter(name)\" leaks it."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "PATH_MANIPULATION/path_manipulation/_/java",
          "message": {
            "text": "PATH_MANIPULATION: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
          },
          "taxa": [
            {
              "id": "22",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "047d031703e571b93766646f76a18b48"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: The tainted value \"s.toLowerCase(java.util.Locale.UK)\" is propagated to \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Constructing a path or URI using the tainted value \"name\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "RESOURCE_LEAK/resource_leak/_/java",
          "message": {
            "text": "RESOURCE_LEAK: Ignoring resource created by \"new java.io.FileInputStream(name)\" leaks it."
          },
          "taxa": [
            {
              "id": "404",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5f0dd3a1bf3122a346a8505ed13978b3"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #1: \"new java.io.FileInputStream(name)\" creates a new resource."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic23.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Ignoring resource created by \"new java.io.FileInputStream(name)\" leaks it."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0088e11297559644a21052aae2a9084c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toLowerCase(java.util.Locale)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic25.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"e.getValue()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(e)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "30c50d146b7b732d7523cc83baef8d07"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(e)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 9. (Events #1 - #7)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.Map.entrySet()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.Set.iterator()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.Iterator.next()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.util.Map.Entry.getKey()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #6: Getting the tainted data from a map."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic26.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #7: Printing \"e.getValue()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(value)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0382d7220c7dd18ee616d800dcb9efaf"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(value)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic27.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 72
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "41c47999224c93f87a92589ddf53b34a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 72
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 140
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "41c47999224c93f87a92589ddf53b34a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 140
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 140
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic28.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 140
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"next.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(next)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "541cdd3f3f79da5ea7a2514e3a59de0b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(next)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"next.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"head.next.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(head)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "541cdd3f3f79da5ea7a2514e3a59de0b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(head)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"head.next.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"head.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(head)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "97418162a72312ed310f632d47f27f23"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(head)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic29.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"head.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5391eb4aa9829cefe00833966ff09d58"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toLowerCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"d.value2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(d)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "94fe054d240f39499551cdcefc6a4c91"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(d)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"value2\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value2\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic30.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"d.value2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6de9e681b0543a1848c501905758b607"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP cookie, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(value)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c5497a0f3fe24f48882855c176ec6b29"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(value)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP cookie, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"comment\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(comment)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "515b7e5d60f07228dcd3d32d12447510"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(comment)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP cookie, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic31.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"comment\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"header\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(header)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic32.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "298f8d33bde1d8901307c9e07233b5b6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic32.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(header)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic32.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic32.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP header, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic32.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"header\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"header\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(header)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6462d3982785980855279a816852d45f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(header)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP header, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.Enumeration.nextElement()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic33.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"header\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"headerName\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(headerName)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a62261f420d7e6cdad5a4afcc16167da"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(headerName)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP header, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.Enumeration.nextElement()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"headerName\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"headerValue\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(headerValue)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2e2827b1bb406ceae3804f3c20478673"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(headerValue)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP header, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic34.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"headerValue\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"req.getQueryString()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "fab193552c88161a1d8a0531fa364065"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"req.getQueryString()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"req.getRemoteUser()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ca73cde5ff69e8082951bb8e88eca1a4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"req.getRemoteUser()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"req.getRequestURL()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "48158abdf9a9faef8f44edd4730d463e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(req)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic35.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"req.getRequestURL()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"line\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(line)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2b91b95b10914ff751357b77ef79cdc2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(line)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.io.InputStreamReader.InputStreamReader(java.io.InputStream)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.io.BufferedReader.BufferedReader(java.io.Reader)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.io.BufferedReader.readLine()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic36.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"line\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"tok.nextToken()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b903625faed8026b4834ab9cde348bbb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.StringTokenizer.nextToken()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic37.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"tok.nextToken()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"tok1.nextToken()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "43ddf7422a9cc8c4fbc9db12a336788b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.StringTokenizer.nextToken()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic38.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"tok1.nextToken()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"tok.nextElement()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "83bcd89f62842434124f7c846f539f90"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tok)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.StringTokenizer.StringTokenizer(java.lang.String, java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.StringTokenizer.nextElement()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic39.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"tok.nextElement()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"r.nextInt()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "78a1bb40f7e1a2c76d8d4a1240263c1f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"r.nextInt()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a016807ea8043e7ffd991a934afb68ff"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "PATH_MANIPULATION/path_manipulation/_/java",
          "message": {
            "text": "PATH_MANIPULATION: Constructing a path or URI using the tainted value \"java.lang.System.getenv(\"HOME\")\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files.\nRemediation Advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
          },
          "taxa": [
            {
              "id": "22",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic40.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0503aef4b22a8596996d891658df4198"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic40.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Path manipulation vulnerabilities can be addressed by proper input validation. Disallowing directory traversal characters (using a deny list) can improve the safety of the input, but the recommended approach is to restrict to a specific set of allowed characters (using an allow list). This should exclude absolute paths and upward directory traversal."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic40.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic40.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"java.lang.System.getenv(java.lang.String)\" returns data from the environment."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic40.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Constructing a path or URI using the tainted value \"java.lang.System.getenv(\"HOME\")\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d12b4144741a849939aa8cfaa3576b9d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #3: Concatenating \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "12fce1be3f51e98cbd43f51b108fb61c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #3: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.replace(char, char)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s5\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s5)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4781a49cbe48da357be50499420ef1c6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s5)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #3: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.replace(char, char)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.lang.String.trim()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"s5\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "da3c191fcce13e6fe072224a3bc36448"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 9. (Events #1 - #7)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #3: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.replace(char, char)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #5: Concatenating \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.lang.String.substring(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #7: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "af78ff799fca0df439ddcf359082c732"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s3)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.lang.StringBuffer.StringBuffer(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.StringBuffer.insert(int, char)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"s3\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4c8ae1c988ed919c0c8e986d0079875a"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"r.nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 39
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d1bb93268630568c0e056370dbb0f4db"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"r.nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s6\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s6)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "dd9f95b3cf2411298e48b275564ca5cd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s6)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/basic/Basic9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"s6\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "3b8203c4066d87ed9be54599444d01df"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1fab543b964e07361157050f7e494e6d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.AbstractSequentialList.iterator()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.Iterator.next()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 38
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "15499a7782bd66c668053539cdab5d93"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data, \"c1\", to \"securibench.micro.collections.Collections11b.foo(java.lang.Object, javax.servlet.ServletResponse)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 34
                          }
                        },
                        "message": {
                          "text": "Event #4: Parameter \"o\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 36
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.lang.Object.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections11b.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b3dfe483855d0b9c44839fbe3039bbe8"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(array[0])\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.toArray()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"array[0]\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"c2.get(0)\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "eb4f1b85f53bf5b87ce40bc59f7748f2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 9. (Events #1 - #7)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.addFirst(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.LinkedList.toArray()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.util.Arrays.asList(java.lang.Object[])\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.util.List.get(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #7: Printing \"c2.get(0)\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"c4.get(0)\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d932bcd8a2c7b855889c5b8f86777907"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.String(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.Arrays.asList(java.lang.Object[])\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.List.get(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"c4.get(0)\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"c.getLast()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "bc616a0ad0aa5f749d063799cac8f56d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"c.getLast()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 50
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "79fdc9983ddc2fc406b48c983c413431"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4ff92215ac167a3cb08e0653204b995b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"c\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4e3bc21abed01dd754767d839db52744"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data through \"java.util.LinkedList.getLast()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"c\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ec6cf36e48afeb96baaa55d8a2f777a5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.AbstractSequentialList.iterator()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.Iterator.next()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"o\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"o\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a4fc13e15ce0b449786c46dc1a5f7348"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(o)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.ArrayList.add(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.ArrayList.iterator()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.Iterator.next()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"o\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "7b9c098cb847d4efe6d3cb7330213847"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data into a map."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.Map.get(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #4: Getting the tainted data from a map."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 51
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6e35e6d12a50103aacafa022d7df2f82"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.util.LinkedList.addLast(java.lang.Object)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data through \"java.util.ArrayList.addAll(java.util.Collection)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.util.ArrayList.get(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/collections/Collections8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 57
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "048bddb1bded4ff5ec0a3b85f58b9102"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures1$C.setData(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures1$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.datastructures.Datastructures1$C.getData()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.datastructures.Datastructures1$C.getData()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"tag\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tag)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 58
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "64f0e9abcc18394784dfb792a69f42c5"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(tag)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures1$C.setData(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures1$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.datastructures.Datastructures1$C.getTag()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.datastructures.Datastructures1$C.getTag()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"tag\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "3fad48abe40acbac519061bfe2308b5f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures2$C.setData(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures2$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.datastructures.Datastructures2$C.getData()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.datastructures.Datastructures2$C.getData()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"str1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0c425237107ccbaba115d49b358fbd22"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures2$C.setData(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures2$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.datastructures.Datastructures2$C.getData()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.datastructures.Datastructures2$C.getData()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"str2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "27e777ebf47cdc7bd68946c6da5eb6cf"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures3$C.setData(java.lang.String)\". See details in steps 8 - 9. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures3$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #4: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "91bce65c65ec3a3a9bf4159e4a87fcfa"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures4$C.setData(java.lang.String)\". See details in steps 8 - 9. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures4$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #4: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 66
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c70e1a2a528cc8016e5e317580b4602f"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(str)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 9. (Events #1 - #7)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data, \"name.toUpperCase()\", to \"securibench.micro.datastructures.Datastructures5$C.setData(java.lang.String)\". See details in steps 10 - 11. (Events #3.1 - #3.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #4: Finished call to \"securibench.micro.datastructures.Datastructures5$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #5: Making call to \"securibench.micro.datastructures.Datastructures5$C.getData()\". See details in steps 13 - 14. (Events #5.1 - #5.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #6: \"securibench.micro.datastructures.Datastructures5$C.getData()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Event #7: Printing \"str\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "See step 5 to return to event 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #5.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #5.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "See step 7 to return to event 5."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"c.getData()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "22b22b73164a8ba3c04dcd39562fbba6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(c)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.datastructures.Datastructures6$C.setData(java.lang.String)\". See details in steps 9 - 10. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #3: Finished call to \"securibench.micro.datastructures.Datastructures6$C.setData(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #4: Making call to \"securibench.micro.datastructures.Datastructures6$C.getData()\". See details in steps 12 - 13. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.datastructures.Datastructures6$C.getData()\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"c.getData()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"str\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Writing the tainted data to the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Reading the tainted data from the field \"str\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/datastructures/Datastructures6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "886fb2ccec48eeb1d0b9214af20ecd16"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toLowerCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "eb7272be06b085a83442f1afe8a5d35d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 38
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data through \"java.lang.String.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/factories/Factories2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d14f427cb022ee10b9f2a63ab698da80"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter1.id(java.lang.String)\". See details in steps 7 - 8. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter1.id(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "2c9e64b63c57313429f3f50ffee2417c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter10.foo(java.lang.String)\". See details in steps 7 - 10. (Events #2.1 - #2.4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter10.foo(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data through \"java.lang.String.toLowerCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2.3: Passing the tainted data through \"java.lang.String.substring(int, int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #2.4: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter10.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ecc7a10c961a27b52cf2f45fa6655a5b"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 8. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter11.foo(java.lang.String)\". See details in steps 9 - 11. (Events #2.1 - #2.3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter11.foo(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"foo(s1)\", to \"securibench.micro.inter.Inter11.id(java.lang.String)\". See details in steps 13 - 14. (Events #4.1 - #4.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #5: \"securibench.micro.inter.Inter11.id(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #6: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data through \"java.lang.String.toUpperCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #2.3: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #4.1: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #4.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter11.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "See step 6 to return to event 4."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: In call to \"securibench.micro.inter.Inter12.COLLECTION2.add(s)\", \"securibench.micro.inter.Inter12.COLLECTION2\" is modified without proper synchronization. The evidence for this comes from compiled bytecode of the called function. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 59
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "472c0575c3a45ebf0dcd28856a278c44"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event Set 2: See details in step 4. (Event #A1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #1: In call to \"securibench.micro.inter.Inter12.COLLECTION2.add(s)\", \"securibench.micro.inter.Inter12.COLLECTION2\" is modified without proper synchronization. The evidence for this comes from compiled bytecode of the called function. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #A1: Example 1: Calling \"securibench.micro.inter.Inter12.foo(java.lang.Object)\" from \"securibench.micro.inter.Inter12.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\", a multithreaded entry point."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: In call to \"securibench.micro.inter.Inter12.COLLECTION1.add(s)\", \"securibench.micro.inter.Inter12.COLLECTION1\" is modified without proper synchronization. The evidence for this comes from compiled bytecode of the called function. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1c00f0901436d936cb74899ab6ad2398"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event Set 2: See details in step 4. (Event #A1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #1: In call to \"securibench.micro.inter.Inter12.COLLECTION1.add(s)\", \"securibench.micro.inter.Inter12.COLLECTION1\" is modified without proper synchronization. The evidence for this comes from compiled bytecode of the called function. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter12.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #A1: Example 1: Calling \"securibench.micro.inter.Inter12.bar(java.lang.Object)\" from \"securibench.micro.inter.Inter12.doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)\", a multithreaded entry point."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "36e41ff1fe5edc816878b4e2544c07f6"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter13.f(java.lang.String, int, javax.servlet.ServletResponse)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter13.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ceb30385bb87fdfb9362d60995e74238"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter14.f(java.lang.String, int, javax.servlet.ServletResponse)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter14.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5a1dd8ec687632e40902ab17237a1fbb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter2.id(java.lang.String, java.io.PrintWriter)\". See details in steps 7 - 8. (Events #2.1 - #2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter2.id(java.lang.String, java.io.PrintWriter)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"string\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(string)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "839e595f4e222dfc1522aa6af5457368"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(string)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter2.id(java.lang.String, java.io.PrintWriter)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"string\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "c12d612460806250f9365287bacaa990"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 52
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e2bdf8ef66f7312ddc0bfd6bc1f97dc1"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 23. (Events #1 - #21)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f1(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f2(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #6: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 52
                          }
                        },
                        "message": {
                          "text": "Event #7: Passing the tainted data, \"\"ade\".concat(name)\", to \"securibench.micro.inter.Inter3.f3(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #8: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #9: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f4(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #10: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #11: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f5(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #12: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #13: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f6(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #14: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 68
                          }
                        },
                        "message": {
                          "text": "Event #15: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f7(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 75
                          }
                        },
                        "message": {
                          "text": "Event #16: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 76
                          }
                        },
                        "message": {
                          "text": "Event #17: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f8(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 79
                          }
                        },
                        "message": {
                          "text": "Event #18: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 80
                          }
                        },
                        "message": {
                          "text": "Event #19: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f9(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 84
                          }
                        },
                        "message": {
                          "text": "Event #20: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event #21: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 69
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b693887e7cfc60ddf7badf9738ec7630"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 69
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 69
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 23. (Events #1 - #21)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f1(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f2(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f3(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #7: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #8: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f4(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #9: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #10: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f5(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #11: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #12: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f6(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #13: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 69
                          }
                        },
                        "message": {
                          "text": "Event #14: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 69
                          }
                        },
                        "message": {
                          "text": "Event #15: Passing the tainted data, \"name + \"abc\"\", to \"securibench.micro.inter.Inter3.f7(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 75
                          }
                        },
                        "message": {
                          "text": "Event #16: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 76
                          }
                        },
                        "message": {
                          "text": "Event #17: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f8(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 79
                          }
                        },
                        "message": {
                          "text": "Event #18: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 80
                          }
                        },
                        "message": {
                          "text": "Event #19: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f9(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 84
                          }
                        },
                        "message": {
                          "text": "Event #20: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event #21: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b693887e7cfc60ddf7badf9738ec7630"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 21. (Events #1 - #19)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f1(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f2(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f3(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #7: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #8: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f4(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #9: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #10: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f5(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #11: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #12: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f6(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #13: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Event #14: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Event #15: Passing the tainted data, \"\"adsf \" + name + \"abc\"\", to \"securibench.micro.inter.Inter3.f8(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 79
                          }
                        },
                        "message": {
                          "text": "Event #16: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 80
                          }
                        },
                        "message": {
                          "text": "Event #17: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f9(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 84
                          }
                        },
                        "message": {
                          "text": "Event #18: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event #19: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 71
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b693887e7cfc60ddf7badf9738ec7630"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 71
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 71
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 21. (Events #1 - #19)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f1(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f2(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f3(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #7: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #8: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f4(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #9: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #10: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f5(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #11: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #12: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f6(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #13: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 71
                          }
                        },
                        "message": {
                          "text": "Event #14: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 71
                          }
                        },
                        "message": {
                          "text": "Event #15: Passing the tainted data, \"\"adsf \" + name + \"abc\"\", to \"securibench.micro.inter.Inter3.f8(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 79
                          }
                        },
                        "message": {
                          "text": "Event #16: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 80
                          }
                        },
                        "message": {
                          "text": "Event #17: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f9(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 84
                          }
                        },
                        "message": {
                          "text": "Event #18: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event #19: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 85
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "321ec1898f4b693194a80b5c4211fc94"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 22. (Events #1 - #20)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f1(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f2(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #5: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 51
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f3(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 55
                          }
                        },
                        "message": {
                          "text": "Event #7: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #8: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f4(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 59
                          }
                        },
                        "message": {
                          "text": "Event #9: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #10: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f5(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #11: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 64
                          }
                        },
                        "message": {
                          "text": "Event #12: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f6(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #13: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 68
                          }
                        },
                        "message": {
                          "text": "Event #14: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f7(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 75
                          }
                        },
                        "message": {
                          "text": "Event #15: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 76
                          }
                        },
                        "message": {
                          "text": "Event #16: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f8(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 79
                          }
                        },
                        "message": {
                          "text": "Event #17: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 80
                          }
                        },
                        "message": {
                          "text": "Event #18: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter3.f9(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 84
                          }
                        },
                        "message": {
                          "text": "Event #19: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 85
                          }
                        },
                        "message": {
                          "text": "Event #20: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "1bac21881820e56a25931f7cc20b95ad"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"this.name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(this)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ae91d605d8be4984b78af0ed7e8bf142"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(this)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 7. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Making call to \"securibench.micro.inter.Inter4.f(javax.servlet.ServletResponse)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Reading the tainted data from the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #5: Printing \"this.name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "584aa60ffc9e54fff7456648aa59b636"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s1)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.inter.Inter5.id(java.lang.String)\". See details in steps 7 - 9. (Events #2.1 - #2.3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter5.id(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s1\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"in\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data through \"java.lang.String.toLowerCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.3: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.inter.Inter6.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "eae83965955c4e1aa5a676dff68ee479"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.inter.Inter6.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.inter.Inter6.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "eae83965955c4e1aa5a676dff68ee479"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.inter.Inter6.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"this.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(this)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ecec9cc7942486f622060335fb1d65c9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(this)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 12. (Events #1 - #10)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 37
                          }
                        },
                        "message": {
                          "text": "Event #2: Tainted data was stored to static field \"securibench.micro.inter.Inter7.name\", which is defined here."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 65
                          }
                        },
                        "message": {
                          "text": "Event #3: Passing the tainted data, \"securibench.micro.inter.Inter7.name\", to \"securibench.micro.inter.Inter7$ReflectivelyCreated.<init>(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #4: Parameter \"value\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #5: Passing the tainted data, \"value\", to \"securibench.micro.inter.Inter7$Base.<init>(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #6: Parameter \"value\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #7: Writing the tainted data to the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #8: Making call to \"securibench.micro.inter.Inter7$Base.foo()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #9: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #10: Printing \"this.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.inter.Inter7.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 62
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8e8017b07e4b3af6ce7ac92d9cde8020"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.inter.Inter7.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.inter.Inter7.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 63
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8e8017b07e4b3af6ce7ac92d9cde8020"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 63
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.inter.Inter7.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "046ae5460fd53e7940f9b7a21c1077eb"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter8.foo(java.lang.String)\". See details in steps 7 - 10. (Events #2.1 - #2.4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter8.foo(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter8.id(java.lang.String)\". See details in steps 12 - 15. (Events #2.2.1 - #2.2.4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.3: \"securibench.micro.inter.Inter8.id(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2.4: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #2.2.1: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2.2.2: Passing the tainted data, \"string\", to \"securibench.micro.inter.Inter8.id2(java.lang.String)\". See details in steps 17 - 18. (Events #2.2.2.1 - #2.2.2.2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2.2.3: \"securibench.micro.inter.Inter8.id2(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2.2.4: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "See step 8 to return to event 2.2."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event #2.2.2.1: Parameter \"string\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #2.2.2.2: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "See step 13 to return to event 2.2.2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8b4d2ed44f5e28b2306568e7691e9d90"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter9.foo(java.lang.String)\". See details in steps 7 - 9. (Events #2.1 - #2.3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter9.foo(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data through \"java.lang.String.toLowerCase()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 58
                          }
                        },
                        "message": {
                          "text": "Event #2.3: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 53
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6291f58027f378d0d124ff14dbae1ff7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s4)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"s1\", to \"securibench.micro.inter.Inter9.bar(java.lang.String)\". See details in steps 7 - 9. (Events #2.1 - #2.3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #3: \"securibench.micro.inter.Inter9.bar(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s4\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event #2.1: Parameter \"s1\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #2.2: Passing the tainted data through \"java.lang.String.toLowerCase(java.util.Locale)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 62
                          }
                        },
                        "message": {
                          "text": "Event #2.3: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/inter/Inter9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "See step 4 to return to event 2."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b48d8a8618195e71fdafcbccbf405253"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "9355f9167a96c307075425ab4b525a49"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
          "message": {
            "text": "INSECURE_RANDOM: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator.\nRemediation Advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
          },
          "taxa": [
            {
              "id": "330",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 40
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4b5765f5032f5cb61b93e2fd3d659426"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Use a cryptographically secure PRNG implementation such as \"java.security.SecureRandom\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 3. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: The random value \"(new java.util.Random()).nextBoolean()\" was generated using a cryptographically insecure pseudo-random number generator."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "714a7711b8e2159f1b1ca7428c365256"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "a312c8a3fd0ebcd73e74a2996ff96712"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEADCODE/deadcode/logical_contradiction/java",
          "message": {
            "text": "DEADCODE: Execution cannot reach the expression \"x % 7 == 29\" inside this statement: \"if ((x > 5 && x % 7 == 29) ...\"."
          },
          "taxa": [
            {
              "id": "561",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "272ab6d595cc2fa81d65fb7081c651b4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 5. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Assigning: \"x\" = \"3\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: At condition \"x > 5\", the value of \"x\" must be equal to 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: The condition \"x > 5\" cannot be true."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #4: Execution cannot reach the expression \"x % 7 == 29\" inside this statement: \"if ((x > 5 && x % 7 == 29) ...\"."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "398690a9b9ee71a3ff60e79e3ecd3651"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEADCODE/deadcode/logical_contradiction/java",
          "message": {
            "text": "DEADCODE: Execution cannot reach this statement: \"writer = resp.getWriter();\"."
          },
          "taxa": [
            {
              "id": "561",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "01657d699973b20d4677a6c5b3dc3801"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 6. (Events #1 - #5)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Assigning: \"x\" = \"2\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #2: Incrementing \"x\". The value of \"x\" is now 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #3: At condition \"x == 2\", the value of \"x\" must be equal to 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #4: The condition \"x == 2\" cannot be true."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #5: Execution cannot reach this statement: \"writer = resp.getWriter();\"."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "543369f8ea3bfae7606a4d63306117a2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "DEADCODE/deadcode/logical_contradiction/java",
          "message": {
            "text": "DEADCODE: Execution cannot reach this statement: \"writer = resp.getWriter();\"."
          },
          "taxa": [
            {
              "id": "561",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "63714a4103b090a78e469db42fcf80f4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 9. (Events #1 - #8)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Assigning: \"x\" = \"2\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Incrementing \"x\". The value of \"x\" is now 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: At condition \"x + y == 11\", the value of \"x\" must be equal to 3."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #4: Assigning: \"y\" = \"9\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #5: Assigning: \"y\" -= \"2\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #6: At condition \"x + y == 11\", the value of \"y\" must be equal to 7."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #7: The condition \"x + y == 11\" cannot be true."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #8: Execution cannot reach this statement: \"writer = resp.getWriter();\"."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "6f9b2f3fb57a912728ede4edfbaae2b4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred7.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred8.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f67818501fe58677da781bda2e4e45b2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred8.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/pred/Pred9.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "64c4e969042aa27f8b524074ebe3a102"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 39
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/pred/Pred9.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "FORWARD_NULL/null_pointer_dereference_exception/constant_null/java",
          "message": {
            "text": "FORWARD_NULL: Calling a method on null object \"idMethod\"."
          },
          "taxa": [
            {
              "id": "476",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 56
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "f35de7fb9107e30f6a39b17cc36e24e2"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 7. (Events #1 - #6)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Assigning: \"idMethod\" = \"null\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #2: Condition \"i < methods.length\", taking true branch."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 50
                          }
                        },
                        "message": {
                          "text": "Event #3: Condition \"method.getName().equals(\"id\")\", taking false branch."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #4: Jumping back to the beginning of the loop."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #5: Condition \"i < methods.length\", taking false branch."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #6: Calling a method on null object \"idMethod\"."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "20f970647f5d25168165f55f72a1069c"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "b50d9b88bdca0a9424196d460ec4dbf0"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"rc.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(rc)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 54
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5d51933e7a18a05e3db2b0d7aea48629"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(rc)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an aggressive or audit dataflow source. In this case, unwritten fields are treated as tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Tainted data was stored to field \"value\", which is defined here. This field is now considered to be tainted data throughout the program."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"rc.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.reflection.Refl4.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "37bf7fd3b77bec34682c8c4b072281fd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.reflection.Refl4.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"securibench.micro.reflection.Refl4.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "37bf7fd3b77bec34682c8c4b072281fd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/reflection/Refl4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #1: \"securibench.micro.reflection.Refl4.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d9fa4a3eca00d37f8a410ec2f6576ba9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ac2221afde03bf166b5ea8a91613e69e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 70
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "e0ce65208545af59b527ebde40c62b7e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 12. (Events #1 - #10)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.sanitizers.Sanitizers1.clean(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.charAt(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 70
                          }
                        },
                        "message": {
                          "text": "Event #5: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 77
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 77
                          }
                        },
                        "message": {
                          "text": "Event #7: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #8: \"securibench.micro.sanitizers.Sanitizers1.clean(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #9: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #10: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "8ebe389bbb27e6e939e2bb179c662f15"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 67
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "15abeea44cdcf038ae585a3e0dac11df"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 12. (Events #1 - #10)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.sanitizers.Sanitizers2.clean(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.charAt(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 67
                          }
                        },
                        "message": {
                          "text": "Event #5: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 74
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 74
                          }
                        },
                        "message": {
                          "text": "Event #7: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #8: \"securibench.micro.sanitizers.Sanitizers2.clean(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #9: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #10: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "d7c1c7515d343e95ffacfb1bd717bddd"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "ca4e3bc77b93c40102ba47db0a0eb471"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #2: Concatenating \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 61
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0a2e0ef1aef60accc5daac973d2da9e9"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 12. (Events #1 - #10)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.sanitizers.Sanitizers4.clean(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 53
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 56
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.charAt(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 61
                          }
                        },
                        "message": {
                          "text": "Event #5: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 65
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 65
                          }
                        },
                        "message": {
                          "text": "Event #7: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #8: \"securibench.micro.sanitizers.Sanitizers4.clean(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #9: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #10: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "67224a5e1015b7d01d9f523cdd9bbc24"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.writer\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 60
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5c0c59bd18ed8b556e1158e65c846104"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(ch)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 12. (Events #1 - #10)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Passing the tainted data, \"name\", to \"securibench.micro.sanitizers.Sanitizers6.clean(java.lang.String)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 54
                          }
                        },
                        "message": {
                          "text": "Event #3: Parameter \"name\" receives the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 57
                          }
                        },
                        "message": {
                          "text": "Event #4: Passing the tainted data through \"java.lang.String.charAt(int)\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 60
                          }
                        },
                        "message": {
                          "text": "Event #5: Concatenating \"ch\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Event #6: Passing the tainted data through \"java.lang.StringBuffer.toString()\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 66
                          }
                        },
                        "message": {
                          "text": "Event #7: Returning the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #8: \"securibench.micro.sanitizers.Sanitizers6.clean(java.lang.String)\" returns the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #9: Concatenating the tainted data."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/sanitizers/Sanitizers6.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #10: Printing to HTML output."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java",
          "message": {
            "text": "TRUST_BOUNDARY_VIOLATION: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
          },
          "taxa": [
            {
              "id": "501",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "33ca502496ba0f6bdce4b241e6623b4d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "3dc209c086303364476880da9a215868"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Storing the tainted data as a session attribute."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from a session attribute."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session1.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java",
          "message": {
            "text": "TRUST_BOUNDARY_VIOLATION: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
          },
          "taxa": [
            {
              "id": "501",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 42
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5ae82a40891e52e9001cf7b7af393a8e"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 40
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 47
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "7cf591c7ab6be023675a34be64045a1d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(s2)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Storing the tainted data as a session attribute."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from a session attribute."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session2.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 47
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"s2\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java",
          "message": {
            "text": "TRUST_BOUNDARY_VIOLATION: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner.\nRemediation Advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
          },
          "taxa": [
            {
              "id": "501",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 43
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "4cf8e41ca4ec6aee65d0f36aedb3694d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Check the user input against a list of acceptable strings (whitelisting). If the list must be dynamic, validate that the user input corresponds to expectations."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 4. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: \"javax.servlet.ServletRequest.getParameter(java.lang.String)\" returns data from an HTTP request."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/session/Session3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #2: Using the tainted data \"name\" in a context that is often assumed to be trustworthy. Because trusted data may not be validated or sanitized, this data could be mistakenly used in an insecure manner."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "UNUSED_VALUE/unused_value/adjacent/java",
          "message": {
            "text": "UNUSED_VALUE: Assigning value from \"name\" to \"w.value\" here, but that stored value is overwritten before it can be used."
          },
          "taxa": [
            {
              "id": "563",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "0fd23319cb0a72ecb55d0feb7956cde4"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 2 - 3. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #1: Overwriting previous write to \"w.value\" with value \"\"abc\"\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Assigning value from \"name\" to \"w.value\" here, but that stored value is overwritten before it can be used."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"w.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 49
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "335a3bb105eaef2f034807523b86f0ec"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(w)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"value\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates3.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 49
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"w.value\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 44
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5059f1a1646e146e17c4e32916692628"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "SINGLETON_RACE/singleton_race/_/java",
          "message": {
            "text": "SINGLETON_RACE: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 45
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "5059f1a1646e146e17c4e32916692628"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in step 2. (Event #1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 45
                          }
                        },
                        "message": {
                          "text": "Event #1: \"this.name\" is modified without proper synchronization. This member might be written by multiple threads serving simultaneous requests, leading to unpredictable behavior."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 48
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "04e114b19cd4d323c1dc44dd454b1649"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 44
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates4.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 48
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BAD_LOCK_OBJECT/bad_lock_object/interned_string/java",
          "message": {
            "text": "BAD_LOCK_OBJECT: Locking on an interned string can cause unexpected locking collisions with third party code.\nRemediation Advice: Instead of using \"this.name\" as a lock, create a final field of type Object which is only used as a lock."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "23b79edd90d50de8bbb4489cf37b21c7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Instead of using \"this.name\" as a lock, create a final field of type Object which is only used as a lock."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 4 - 5. (Events #1 - #2)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 2: See details in step 6. (Event #A1)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: The field \"this.name\" can get its value from a canonical representation of a string value."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Locking on an interned string can cause unexpected locking collisions with third party code."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 43
                          }
                        },
                        "message": {
                          "text": "Event #A1: Example 1: The string literal \"\"abc\"\" is an interned string."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "BAD_LOCK_OBJECT/overwrite_of_lock_field_during_critical_section/_/java",
          "message": {
            "text": "BAD_LOCK_OBJECT: Locking on the object referenced by field \"this.name\". This lock acquisition may race with another thread assigning to this field. The contents of \"this.name\" may change while a thread is inside the critical section, allowing two threads to enter the critical section simultaneously.\nRemediation Advice: Instead of using \"this.name\" as a lock, create a final field of type Object which is only used as a lock."
          },
          "taxa": [
            {
              "id": "543",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 41
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "23b79edd90d50de8bbb4489cf37b21c7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Instead of using \"this.name\" as a lock, create a final field of type Object which is only used as a lock."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event Set 1: See details in steps 3 - 5. (Events #1 - #3)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #1: Acquiring lock \"StrongUpdates5.name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 41
                          }
                        },
                        "message": {
                          "text": "Event #2: Locking on the object referenced by field \"this.name\". This lock acquisition may race with another thread assigning to this field. The contents of \"this.name\" may change while a thread is inside the critical section, allowing two threads to enter the critical section simultaneously."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #3: The expression \"name = req.getParameter(\"name\")\" assigns a new value to \"name\", a field whose contents are used as a lock. The locking behavior of this function may allow this assignment to occur multiple times."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "ruleId": "XSS/xss/_/java",
          "message": {
            "text": "XSS: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block.\nRemediation Advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
          },
          "taxa": [
            {
              "id": "79",
              "toolComponent": {
                "name": "CWE"
              }
            }
          ],
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                  "uriBaseId": "/code/"
                },
                "region": {
                  "startLine": 46
                }
              }
            }
          ],
          "partialFingerprints": {
            "primaryLocationLineHash": "86326a8cf3d607014c8aab716fd93b7d"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Remediation advice: Perform the following escaping in the following order to guard against cross-site scripting attacks with Java.\n\nFor example: \"Escape.html(name)\"\n\n\n* Use the \"Escape.html\" function from the Coverity Sanitizers Library. This escapes the output for HTML.\n\n"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event Set 1: Data flow from tainted source to string construction using insufficiently escaped tainted data and then to output. See details in steps 3 - 6. (Events #1 - #4)"
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #1: Reading data from an HTTP request, which is considered tainted."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 42
                          }
                        },
                        "message": {
                          "text": "Event #2: Writing the tainted data to the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #3: Reading the tainted data from the field \"name\"."
                        }
                      }
                    },
                    {
                      "location": {
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "securibench-micro/src/securibench/micro/strong_updates/StrongUpdates5.java",
                            "uriBaseId": "/code/"
                          },
                          "region": {
                            "startLine": 46
                          }
                        },
                        "message": {
                          "text": "Event #4: Printing \"name\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      ],
      "tool": {
        "driver": {
          "name": "Coverity",
          "organization": "Synopsys",
          "rules": [
            {
              "id": "XSS/xss/_/java",
              "shortDescription": {
                "text": "Cross-site scripting"
              },
              "fullDescription": {
                "text": "Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering: A user can execute arbitrary JavaScript on a web page viewed or accessed by another user, potentially allowing session hijacking, disclosing sensitive data in the DOM, or viewing of keyboard and mouse events."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "UNUSED_VALUE/unused_value/adjacent/java",
              "shortDescription": {
                "text": "Unused value"
              },
              "fullDescription": {
                "text": "A value assigned to a variable is never used: An assigned value that is never used may represent unnecessary computation, an incorrect algorithm, or possibly the need for cleanup or refactoring."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "563",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "INSECURE_RANDOM/insecure_random/insecure_random_value/java",
              "shortDescription": {
                "text": "Cryptographically weak PRNG"
              },
              "fullDescription": {
                "text": "Random value generated using a cryptographically insecure pseudo-random number generator: An attacker may be able to predict the values generated by a cryptographically weak PRNG."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "relationships": [
                {
                  "target": {
                    "id": "330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "HARDCODED_CREDENTIALS/hardcoded_credentials/password_in_connection_string/java",
              "shortDescription": {
                "text": "Use of hard-coded connection string password"
              },
              "fullDescription": {
                "text": "A connection string password is stored directly in the source code: Users with access to this source code can use this password to access production services or data.  Changing this password requires changing the code and re-deploying the application."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "259",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "RESOURCE_LEAK/resource_leak/_/java",
              "shortDescription": {
                "text": "Resource leak"
              },
              "fullDescription": {
                "text": "Leak of a system resource: The system resource will not be reclaimed and reused, reducing the future availability of the resource."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "SQLI/sql_injection/sink/java",
              "shortDescription": {
                "text": "SQL injection"
              },
              "fullDescription": {
                "text": "Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering: A user can change the intent of the SQL query, which may inappropriately disclose or corrupt data within the database."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "89",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "CSRF/csrf/database_update/java",
              "shortDescription": {
                "text": "Cross-site request forgery"
              },
              "fullDescription": {
                "text": "The web application controller modifies data or state and is unprotected from cross-site request forgery: Controllers that execute actions or tasks may be accessed to perform activities without the user's knowledge or authorization. These attacks are difficult to distinguish from legitimate requests."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "352",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "PATH_MANIPULATION/path_manipulation/_/java",
              "shortDescription": {
                "text": "Filesystem path, filename, or URI manipulation"
              },
              "fullDescription": {
                "text": "A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier): An attacker may access, modify, or corrupt files that contain sensitive information or are critical to the application."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "CSRF/csrf/filesystem_modification/java",
              "shortDescription": {
                "text": "Cross-site request forgery"
              },
              "fullDescription": {
                "text": "The web application controller modifies data or state and is unprotected from cross-site request forgery: Controllers that execute actions or tasks may be accessed to perform activities without the user's knowledge or authorization. These attacks are difficult to distinguish from legitimate requests."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "352",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "SINGLETON_RACE/singleton_race/_/java",
              "shortDescription": {
                "text": "Thread unsafe modification in singleton"
              },
              "fullDescription": {
                "text": "There is a thread unsafe modification of a field (instance or static) from a method call on a singleton: The thread unsafe modification can result in unpredictable behavior."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "543",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "DEADCODE/deadcode/logical_contradiction/java",
              "shortDescription": {
                "text": "Logically dead code"
              },
              "fullDescription": {
                "text": "Code can never be reached because of a logical contradiction: The indicated dead code may have performed some action; that action will never occur."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "561",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "FORWARD_NULL/null_pointer_dereference_exception/constant_null/java",
              "shortDescription": {
                "text": "Explicit null dereferenced"
              },
              "fullDescription": {
                "text": "Dereference of an explicit null value: A null pointer exception will occur."
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "476",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "TRUST_BOUNDARY_VIOLATION/trust_boundary_violation/_/java",
              "shortDescription": {
                "text": "Trust boundary violation"
              },
              "fullDescription": {
                "text": "A user-controllable string is stored in a trusted data structure: The tainted data can be mixed with trustworthy data and can be mistakenly used in an insecure manner."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "relationships": [
                {
                  "target": {
                    "id": "501",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "BAD_LOCK_OBJECT/bad_lock_object/interned_string/java",
              "shortDescription": {
                "text": "Bad choice of lock object"
              },
              "fullDescription": {
                "text": "Using an interned string as a lock may cause deadlocks or performance problems if a library also uses the interned string as a lock: Potential lock collisions"
              },
              "defaultConfiguration": {
                "level": "warning"
              },
              "relationships": [
                {
                  "target": {
                    "id": "543",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            },
            {
              "id": "BAD_LOCK_OBJECT/overwrite_of_lock_field_during_critical_section/_/java",
              "shortDescription": {
                "text": "Bad choice of lock object"
              },
              "fullDescription": {
                "text": "The field used as a lock can be assigned a different value while the critical section is operating. This can cause multiple threads to enter the critical section at the same time, which may cause nondeterministic behavior: Nondeterministic locking behavior"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "relationships": [
                {
                  "target": {
                    "id": "543",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  }
                }
              ],
              "properties": {
                "tags": []
              }
            }
          ]
        }
      }
    }
  ]
}