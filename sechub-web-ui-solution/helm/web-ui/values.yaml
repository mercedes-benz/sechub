# SPDX-License-Identifier: MIT

# This is a sample values file containing the defaults.

# SecHub web-ui container image:
image: "ghcr.io/mercedes-benz/sechub/sechub-web-ui:latest"
imagePullPolicy: "IfNotPresent"

# Optional: If your image is in a private registry, you can specify pull secrets defined in k8s
#   Docs: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#   Example:
# imagePullSecrets: |-
#   - name: sechub-pull-secret
#   - name: sps2

# Number of instances to spin up
replicaCount: 1

resources:
  requests:
    # Initial container memory size
    memory: 32Mi
  limits:
    # Maximum container memory size
    memory: 512Mi

web_ui:
  ssl:
    keystoreAlias: "undefined"
    # Alias in pkcs12 (.p12) keystore.
    # - On `undefined`, a self-signed certificate will be used.
    # - otherwise, a Kubernetes secret `secret-web-ui-ssl` must be defined containing
    #   - `keystore_file` (containing the ssl certificate chain)
    #     Inside the .p12 keystore, an alias with this name is expected
    #     pointing to the ssl key and certificate to use
    #   - `keystore_password`
  useCustomConfig: false
  # Setting useCustomConfig to `true` will mount a k8s configmap into /var/www/html/config.json.
  # In this case please create a configmap named `configmap-sechub-webui-custom-config`.
  # This way, custom values can be added (e.g. custom support email or url).
  # See https://github.com/mercedes-benz/sechub/blob/develop/sechub-web-ui-solution/README.adoc

# deploymentComment (optional):
#  When setting to a different value than before, it forces k8s to spin up a new container.
#  This way, you can force deployments e.g. when only secrets have changed.
deploymentComment: "my deployment comment"

# optional: Add annotations to template.metadata.annotations
#           Can contain multiple lines. Example for Prometheus actuator:
# templateMetadataAnnotations: |-
#   prometheus.io/scrape: "true"
#   prometheus.io/probe: "true"
#   prometheus.io/port: "10250"
#   prometheus.io/path: "/actuator/prometheus"

go_mmproxy:
  # Log the real client IP addresses via a go-mmproxy sidecar container
  # Otherwise one sees only the loadbalancer's IP in the logs.
  # go-mmproxy -> https://github.com/path-network/go-mmproxy
  # Spoofs the real client address taken from proxy-protocol so the SecHub server will log correctly.
  # (needs annotation loadbalancer.openstack.org/proxy-protocol: "true" - see above)
  enabled: false
  # Choose a "go-mmproxy" docker image. See e.g. https://hub.docker.com/search?q=go-mmproxy
  image: "example.org/go-mmproxy:2.1.0"
