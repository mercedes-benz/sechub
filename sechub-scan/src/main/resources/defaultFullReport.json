{
  "metaData": {
    "labels": {},
    "summary": {
      "codeScan": {
        "total": 302,
        "critical": 0,
        "high": 64,
        "medium": 113,
        "low": 123,
        "unclassified": 0,
        "info": 2,
        "details": {
          "high": [
            {
              "cweId": 327,
              "name": "Blocklisted import crypto/des: weak cryptographic primitive",
              "count": 1
            },
            {
              "cweId": 327,
              "name": "Blocklisted import crypto/md5: weak cryptographic primitive",
              "count": 1
            },
            {
              "cweId": 327,
              "name": "Blocklisted import crypto/rc4: weak cryptographic primitive",
              "count": 1
            },
            {
              "cweId": 327,
              "name": "Blocklisted import crypto/sha1: weak cryptographic primitive",
              "count": 1
            },
            {
              "cweId": 120,
              "name": "Buffer Overflow Unbounded Format",
              "count": 1
            },
            {
              "cweId": 94,
              "name": "Code Injection",
              "count": 1
            },
            {
              "cweId": 77,
              "name": "Command Injection",
              "count": 18
            },
            {
              "cweId": 276,
              "name": "Expect file permissions to be 0600 or less",
              "count": 1
            },
            {
              "cweId": 134,
              "name": "Format String Attack",
              "count": 1
            },
            {
              "cweId": 170,
              "name": "Improper Null Termination",
              "count": 2
            },
            {
              "cweId": 193,
              "name": "Off by One Error",
              "count": 4
            },
            {
              "cweId": 22,
              "name": "Potential file inclusion via variable",
              "count": 3
            },
            {
              "cweId": 79,
              "name": "Reflected XSS",
              "count": 5
            },
            {
              "cweId": 79,
              "name": "Reflected XSS All Clients",
              "count": 1
            },
            {
              "cweId": 89,
              "name": "SQL Injection",
              "count": 5
            },
            {
              "cweId": 89,
              "name": "SQL string concatenation",
              "count": 1
            },
            {
              "cweId": 89,
              "name": "SQL string formatting",
              "count": 1
            },
            {
              "cweId": 79,
              "name": "Stored XSS",
              "count": 4
            },
            {
              "cweId": 78,
              "name": "Subprocess launched with variable",
              "count": 3
            },
            {
              "cweId": 676,
              "name": "Use of net/http serve function that has no support for setting timeouts",
              "count": 1
            },
            {
              "cweId": 326,
              "name": "Use of weak cryptographic primitive",
              "count": 7
            },
            {
              "cweId": 338,
              "name": "Use of weak random number generator (math/rand instead of crypto/rand)",
              "count": 1
            }
          ],
          "medium": [
            {
              "cweId": 359,
              "name": "Client Privacy Violation",
              "count": 2
            },
            {
              "cweId": 89,
              "name": "Client Side Injection",
              "count": 1
            },
            {
              "cweId": 319,
              "name": "Communication over HTTP",
              "count": 1
            },
            {
              "cweId": 242,
              "name": "Dangerous Functions",
              "count": 12
            },
            {
              "cweId": 400,
              "name": "Denial Of Service Resource Exhaustion",
              "count": 3
            },
            {
              "cweId": 415,
              "name": "Double Free",
              "count": 3
            },
            {
              "cweId": 311,
              "name": "Encoding Used Instead of Encryption",
              "count": 1
            },
            {
              "cweId": 703,
              "name": "Errors unhandled.",
              "count": 14
            },
            {
              "cweId": 547,
              "name": "Hardcoded Password in Connection String",
              "count": 1
            },
            {
              "cweId": 611,
              "name": "Improper Restriction of XXE Ref",
              "count": 1
            },
            {
              "cweId": 326,
              "name": "Inadequate Encryption Strength",
              "count": 2
            },
            {
              "cweId": 522,
              "name": "Insecure Credential Storage Mechanism",
              "count": 8
            },
            {
              "cweId": 190,
              "name": "Integer Overflow",
              "count": 1
            },
            {
              "cweId": 401,
              "name": "Memory Leak",
              "count": 3
            },
            {
              "cweId": 346,
              "name": "Missing HSTS Header",
              "count": 3
            },
            {
              "cweId": 472,
              "name": "Parameter Tampering",
              "count": 3
            },
            {
              "cweId": 22,
              "name": "Path Traversal",
              "count": 1
            },
            {
              "cweId": 311,
              "name": "Personal Information Without Encryption",
              "count": 6
            },
            {
              "cweId": 256,
              "name": "Plaintext Storage Of A Password",
              "count": 6
            },
            {
              "cweId": 359,
              "name": "Privacy Violation",
              "count": 9
            },
            {
              "cweId": 366,
              "name": "Race Condition",
              "count": 10
            },
            {
              "cweId": 36,
              "name": "Reflected Absolute Path Traversal",
              "count": 2
            },
            {
              "cweId": 23,
              "name": "Reflected Relative Path Traversal",
              "count": 2
            },
            {
              "cweId": 77,
              "name": "Stored Command Injection",
              "count": 2
            },
            {
              "cweId": 134,
              "name": "Uncontrolled Format String",
              "count": 4
            },
            {
              "cweId": 416,
              "name": "Use After Free",
              "count": 3
            },
            {
              "cweId": 326,
              "name": "Use Of Weak Hashing Primitive",
              "count": 1
            },
            {
              "cweId": 338,
              "name": "Use of Cryptographically Weak PRNG",
              "count": 2
            },
            {
              "cweId": 759,
              "name": "Use of a One Way Hash without a Salt",
              "count": 2
            },
            {
              "cweId": 242,
              "name": "Use of unsafe calls should be audited",
              "count": 4
            }
          ],
          "low": [
            {
              "cweId": 829,
              "name": "Client Hardcoded Domain",
              "count": 3
            },
            {
              "cweId": 310,
              "name": "Client Weak Cryptographic Hash",
              "count": 2
            },
            {
              "cweId": 88,
              "name": "Command Argument Injection",
              "count": 9
            },
            {
              "cweId": 244,
              "name": "Heap Inspection",
              "count": 7
            },
            {
              "cweId": 248,
              "name": "Improper Error Handling",
              "count": 24
            },
            {
              "cweId": 248,
              "name": "Improper Exception Handling",
              "count": 2
            },
            {
              "cweId": 285,
              "name": "Improper Resource Access Authorization",
              "count": 2
            },
            {
              "cweId": 732,
              "name": "Incorrect Permission Assignment For Critical Resources",
              "count": 1
            },
            {
              "cweId": 209,
              "name": "Information Exposure Through an Error Message",
              "count": 8
            },
            {
              "cweId": 346,
              "name": "Missing CSP Header",
              "count": 1
            },
            {
              "cweId": 829,
              "name": "Missing Device Lock Verification",
              "count": 1
            },
            {
              "cweId": 693,
              "name": "Missing Jailbreak Check",
              "count": 1
            },
            {
              "cweId": 352,
              "name": "No Protection From Forgery",
              "count": 3
            },
            {
              "cweId": 319,
              "name": "Plain Text Transport Layer in Server",
              "count": 1
            },
            {
              "cweId": 693,
              "name": "Potential Clickjacking on Legacy Browsers",
              "count": 1
            },
            {
              "cweId": 359,
              "name": "Privacy Violation",
              "count": 6
            },
            {
              "cweId": 362,
              "name": "Race Condition In Cross Functionality",
              "count": 1
            },
            {
              "cweId": 328,
              "name": "Reversible One Way Hash",
              "count": 3
            },
            {
              "cweId": 88,
              "name": "Stored Command Argument Injection",
              "count": 2
            },
            {
              "cweId": 252,
              "name": "Unchecked Return Value",
              "count": 11
            },
            {
              "cweId": 327,
              "name": "Use Of Broken Or Risky Cryptographic Algorithm",
              "count": 6
            },
            {
              "cweId": 319,
              "name": "Use Of HTTP Sensitive Data Exposure",
              "count": 1
            },
            {
              "cweId": 259,
              "name": "Use Of Hardcoded Password",
              "count": 13
            },
            {
              "cweId": 242,
              "name": "Use Of Unsafe Package",
              "count": 1
            },
            {
              "cweId": 116,
              "name": "Use Of raw",
              "count": 3
            },
            {
              "cweId": 327,
              "name": "Use of Broken or Risky Cryptographic Algorithm",
              "count": 8
            },
            {
              "cweId": 259,
              "name": "Use of Hardcoded Password",
              "count": 2
            }
          ],
          "info": [
            {
              "cweId": 398,
              "name": "Empty Methods",
              "count": 1
            },
            {
              "cweId": 829,
              "name": "Third Party Keyboard Enabled",
              "count": 1
            }
          ]
        }
      }
    }
  },
  "jobUUID": "50a2be82-2f53-4d55-977c-e1b1a0aea74c",
  "trafficLight": "RED",
  "status": "SUCCESS",
  "reportVersion": "1.0",
  "messages": [],
  "result": {
    "count": 302,
    "findings": [
      {
        "id": 15,
        "description": "Potential file inclusion via variable",
        "name": "Potential file inclusion via variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 120,
          "column": 22,
          "source": "fileContent, err := os.ReadFile(path)"
        },
        "type": "codeScan",
        "cweId": 22
      },
      {
        "id": 16,
        "description": "Potential file inclusion via variable",
        "name": "Potential file inclusion via variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 105,
          "column": 15,
          "source": "file, err := os.Create(filepath)"
        },
        "type": "codeScan",
        "cweId": 22
      },
      {
        "id": 17,
        "description": "Potential file inclusion via variable",
        "name": "Potential file inclusion via variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 87,
          "column": 15,
          "source": "file, err := os.Open(filepath)"
        },
        "type": "codeScan",
        "cweId": 22
      },
      {
        "id": 41,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python3/argument_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/argument_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/argument_injection.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/argument_injection.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/argument_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python3/argument_injection.py",
                    "line": 9,
                    "column": 30,
                    "source": "command = \"ls {}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python3/argument_injection.py",
                      "line": 9,
                      "column": 23,
                      "source": "command = \"ls {}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python3/argument_injection.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"ls {}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python3/argument_injection.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: argument injection; CWE-88",
                          "relevantPart": "command"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 42,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python3/os_command_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/os_command_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/os_command_injection.py",
              "line": 8,
              "column": 24,
              "source": "command = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/os_command_injection.py",
                "line": 8,
                "column": 19,
                "source": "command = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/os_command_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "command = ' '.join(args)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Python/Python3/os_command_injection.py",
                    "line": 10,
                    "column": 15,
                    "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                    "relevantPart": "command"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 43,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python2/os_command_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/os_command_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python2/os_command_injection.py",
              "line": 8,
              "column": 24,
              "source": "command = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python2/os_command_injection.py",
                "line": 8,
                "column": 19,
                "source": "command = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python2/os_command_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "command = ' '.join(args)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Python/Python2/os_command_injection.py",
                    "line": 10,
                    "column": 15,
                    "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                    "relevantPart": "command"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 44,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python3/path_traversal_relative.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/path_traversal_relative.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/path_traversal_relative.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/path_traversal_relative.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/path_traversal_relative.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python3/path_traversal_relative.py",
                    "line": 9,
                    "column": 33,
                    "source": "command = \"cat ./{}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python3/path_traversal_relative.py",
                      "line": 9,
                      "column": 26,
                      "source": "command = \"cat ./{}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python3/path_traversal_relative.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"cat ./{}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python3/path_traversal_relative.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: path traversal; CWE-22",
                          "relevantPart": "command"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 45,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python2/argument_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/argument_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python2/argument_injection.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python2/argument_injection.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python2/argument_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python2/argument_injection.py",
                    "line": 9,
                    "column": 30,
                    "source": "command = \"ls {}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python2/argument_injection.py",
                      "line": 9,
                      "column": 23,
                      "source": "command = \"ls {}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python2/argument_injection.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"ls {}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python2/argument_injection.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: argument injection; CWE-88",
                          "relevantPart": "command"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 46,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection_passthru.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection_passthru.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection_passthru.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection_passthru.php",
                "line": 6,
                "column": 15,
                "source": "passthru($command);",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection_passthru.php",
                  "line": 6,
                  "column": 5,
                  "source": "passthru($command);",
                  "relevantPart": "passthru"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 47,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection.php",
                "line": 6,
                "column": 17,
                "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection.php",
                  "line": 6,
                  "column": 17,
                  "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
                  "relevantPart": "$_ShellCommand"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 48,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection_exec.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection_exec.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection_exec.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection_exec.php",
                "line": 6,
                "column": 24,
                "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection_exec.php",
                  "line": 6,
                  "column": 18,
                  "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
                  "relevantPart": "exec"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 49,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection_system.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection_system.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection_system.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection_system.php",
                "line": 6,
                "column": 13,
                "source": "system($command); # Weakness: OS command injection; CWE-78",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection_system.php",
                  "line": 6,
                  "column": 5,
                  "source": "system($command); # Weakness: OS command injection; CWE-78",
                  "relevantPart": "system"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 54,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
          "line": 7,
          "column": 33,
          "source": "let args:string[] = process.argv.slice(2);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
            "line": 7,
            "column": 38,
            "source": "let args:string[] = process.argv.slice(2);",
            "relevantPart": "slice",
            "calls": {
              "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
              "line": 7,
              "column": 9,
              "source": "let args:string[] = process.argv.slice(2);",
              "relevantPart": "args",
              "calls": {
                "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
                "line": 8,
                "column": 26,
                "source": "let command:string = args.join(\" \");",
                "relevantPart": "args",
                "calls": {
                  "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
                  "line": 8,
                  "column": 31,
                  "source": "let command:string = args.join(\" \");",
                  "relevantPart": "join",
                  "calls": {
                    "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
                    "line": 8,
                    "column": 9,
                    "source": "let command:string = args.join(\" \");",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/TypeScript/Node/Node/os_injection_exec.ts",
                      "line": 10,
                      "column": 10,
                      "source": "exec(command, (error, stdout, stderr) => { // # Weakness: OS command injection; CWE-78",
                      "relevantPart": "command"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 55,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/JavaScript/Node/os_injection_execSync.js",
          "line": 7,
          "column": 29,
          "source": "let arguments = process.argv.slice(2);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/JavaScript/Node/os_injection_execSync.js",
            "line": 7,
            "column": 34,
            "source": "let arguments = process.argv.slice(2);",
            "relevantPart": "slice",
            "calls": {
              "location": "Code/JavaScript/Node/os_injection_execSync.js",
              "line": 7,
              "column": 9,
              "source": "let arguments = process.argv.slice(2);",
              "relevantPart": "arguments",
              "calls": {
                "location": "Code/JavaScript/Node/os_injection_execSync.js",
                "line": 8,
                "column": 19,
                "source": "let command = arguments.join(\" \");",
                "relevantPart": "arguments",
                "calls": {
                  "location": "Code/JavaScript/Node/os_injection_execSync.js",
                  "line": 8,
                  "column": 29,
                  "source": "let command = arguments.join(\" \");",
                  "relevantPart": "join",
                  "calls": {
                    "location": "Code/JavaScript/Node/os_injection_execSync.js",
                    "line": 8,
                    "column": 9,
                    "source": "let command = arguments.join(\" \");",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/JavaScript/Node/os_injection_execSync.js",
                      "line": 10,
                      "column": 52,
                      "source": "let output = require('child_process').execSync(command, {stdio: 'inherit'}); // # Weakness: OS command injection; CWE-78",
                      "relevantPart": "command"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 56,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/JavaScript/Node/os_injection_exec.js",
          "line": 7,
          "column": 29,
          "source": "let arguments = process.argv.slice(2);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/JavaScript/Node/os_injection_exec.js",
            "line": 7,
            "column": 34,
            "source": "let arguments = process.argv.slice(2);",
            "relevantPart": "slice",
            "calls": {
              "location": "Code/JavaScript/Node/os_injection_exec.js",
              "line": 7,
              "column": 9,
              "source": "let arguments = process.argv.slice(2);",
              "relevantPart": "arguments",
              "calls": {
                "location": "Code/JavaScript/Node/os_injection_exec.js",
                "line": 8,
                "column": 19,
                "source": "let command = arguments.join(\" \");",
                "relevantPart": "arguments",
                "calls": {
                  "location": "Code/JavaScript/Node/os_injection_exec.js",
                  "line": 8,
                  "column": 29,
                  "source": "let command = arguments.join(\" \");",
                  "relevantPart": "join",
                  "calls": {
                    "location": "Code/JavaScript/Node/os_injection_exec.js",
                    "line": 8,
                    "column": 9,
                    "source": "let command = arguments.join(\" \");",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/JavaScript/Node/os_injection_exec.js",
                      "line": 10,
                      "column": 10,
                      "source": "exec(command, (error, stdout, stderr) => { // # Weakness: OS command injection; CWE-78",
                      "relevantPart": "command"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 62,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 5,
          "column": 27,
          "source": "int main(int argc, char** argv)",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/C/os_injection.c",
            "line": 11,
            "column": 28,
            "source": "commandLength = strlen(argv[1]) + 1;",
            "relevantPart": "argv",
            "calls": {
              "location": "Code/C/os_injection.c",
              "line": 13,
              "column": 22,
              "source": "strncpy(command, argv[1], commandLength);",
              "relevantPart": "argv",
              "calls": {
                "location": "Code/C/os_injection.c",
                "line": 13,
                "column": 13,
                "source": "strncpy(command, argv[1], commandLength);",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/C/os_injection.c",
                  "line": 14,
                  "column": 12,
                  "source": "system(command); // The weakness is CWE-78 (parent is CWE-77)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/C/os_injection.c",
                    "line": 14,
                    "column": 5,
                    "source": "system(command); // The weakness is CWE-78 (parent is CWE-77)",
                    "relevantPart": "system"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 63,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 7,
          "column": 27,
          "source": "int main(int argc, char **argv) {",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/C++/os_injection.cpp",
            "line": 13,
            "column": 42,
            "source": "commandLength = strlen(cat) + strlen(argv[1]) + 1;",
            "relevantPart": "argv",
            "calls": {
              "location": "Code/C++/os_injection.cpp",
              "line": 16,
              "column": 22,
              "source": "strncat(command, argv[1], (commandLength - strlen(cat)));",
              "relevantPart": "argv",
              "calls": {
                "location": "Code/C++/os_injection.cpp",
                "line": 16,
                "column": 13,
                "source": "strncat(command, argv[1], (commandLength - strlen(cat)));",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/C++/os_injection.cpp",
                  "line": 17,
                  "column": 12,
                  "source": "system(command); // The weakness is CWE-78 (parent is CWE-77)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/C++/os_injection.cpp",
                    "line": 17,
                    "column": 5,
                    "source": "system(command); // The weakness is CWE-78 (parent is CWE-77)",
                    "relevantPart": "system"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 72,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/os_command_injection.go",
          "line": 11,
          "column": 34,
          "source": "argsWithoutProgramName := os.Args[1:]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/os_command_injection.go",
            "line": 11,
            "column": 5,
            "source": "argsWithoutProgramName := os.Args[1:]",
            "relevantPart": "argsWithoutProgramName",
            "calls": {
              "location": "Code/Go/os_command_injection.go",
              "line": 18,
              "column": 29,
              "source": "command := strings.Join(argsWithoutProgramName, \" \")",
              "relevantPart": "argsWithoutProgramName",
              "calls": {
                "location": "Code/Go/os_command_injection.go",
                "line": 18,
                "column": 24,
                "source": "command := strings.Join(argsWithoutProgramName, \" \")",
                "relevantPart": "Join",
                "calls": {
                  "location": "Code/Go/os_command_injection.go",
                  "line": 18,
                  "column": 5,
                  "source": "command := strings.Join(argsWithoutProgramName, \" \")",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Go/os_command_injection.go",
                    "line": 20,
                    "column": 30,
                    "source": "out, err := exec.Command(command).Output() // Weakness: OS command injection; CWE-78",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/Go/os_command_injection.go",
                      "line": 20,
                      "column": 22,
                      "source": "out, err := exec.Command(command).Output() // Weakness: OS command injection; CWE-78",
                      "relevantPart": "Command",
                      "calls": {
                        "location": "Code/Go/os_command_injection.go",
                        "line": 20,
                        "column": 39,
                        "source": "out, err := exec.Command(command).Output() // Weakness: OS command injection; CWE-78",
                        "relevantPart": "Output"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 74,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Perl/os_injection.pl",
          "line": 4,
          "column": 26,
          "source": "$command = join(\" \", @ARGV);",
          "relevantPart": "@ARGV",
          "calls": {
            "location": "Code/Perl/os_injection.pl",
            "line": 4,
            "column": 20,
            "source": "$command = join(\" \", @ARGV);",
            "relevantPart": "join",
            "calls": {
              "location": "Code/Perl/os_injection.pl",
              "line": 4,
              "column": 5,
              "source": "$command = join(\" \", @ARGV);",
              "relevantPart": "$command",
              "calls": {
                "location": "Code/Perl/os_injection.pl",
                "line": 5,
                "column": 13,
                "source": "system \"$command\"; # Weakness: OS command injection; CWE-78",
                "relevantPart": "$command",
                "calls": {
                  "location": "Code/Perl/os_injection.pl",
                  "line": 5,
                  "column": 64,
                  "source": "system \"$command\"; # Weakness: OS command injection; CWE-78",
                  "relevantPart": "system"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 75,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Kotlin/OSInjection.kt",
          "line": 1,
          "column": 10,
          "source": "fun main(args: Array<String>) {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Kotlin/OSInjection.kt",
            "line": 4,
            "column": 23,
            "source": "val command = args.joinToString(\" \")",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Kotlin/OSInjection.kt",
              "line": 4,
              "column": 28,
              "source": "val command = args.joinToString(\" \")",
              "relevantPart": "joinToString",
              "calls": {
                "location": "Code/Kotlin/OSInjection.kt",
                "line": 4,
                "column": 13,
                "source": "val command = args.joinToString(\" \")",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/Kotlin/OSInjection.kt",
                  "line": 5,
                  "column": 35,
                  "source": "Runtime.getRuntime().exec(command) // Weakness: OS Injection; CWE 78",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Kotlin/OSInjection.kt",
                    "line": 5,
                    "column": 30,
                    "source": "Runtime.getRuntime().exec(command) // Weakness: OS Injection; CWE 78",
                    "relevantPart": "exec"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 81,
        "name": "Command Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Java/CommandInjection.java",
          "line": 15,
          "column": 38,
          "source": "public static void main(String[] args) throws IOException {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Java/CommandInjection.java",
            "line": 21,
            "column": 34,
            "source": "commands.add(\"ls \" + args[0]);",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Java/CommandInjection.java",
              "line": 21,
              "column": 25,
              "source": "commands.add(\"ls \" + args[0]);",
              "relevantPart": "add",
              "calls": {
                "location": "Code/Java/CommandInjection.java",
                "line": 21,
                "column": 13,
                "source": "commands.add(\"ls \" + args[0]);",
                "relevantPart": "commands",
                "calls": {
                  "location": "Code/Java/CommandInjection.java",
                  "line": 23,
                  "column": 51,
                  "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                  "relevantPart": "commands",
                  "calls": {
                    "location": "Code/Java/CommandInjection.java",
                    "line": 23,
                    "column": 32,
                    "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                    "relevantPart": "ProcessBuilder",
                    "calls": {
                      "location": "Code/Java/CommandInjection.java",
                      "line": 24,
                      "column": 41,
                      "source": ".redirectErrorStream(true)",
                      "relevantPart": "redirectErrorStream",
                      "calls": {
                        "location": "Code/Java/CommandInjection.java",
                        "line": 25,
                        "column": 36,
                        "source": ".redirectOutput(ProcessBuilder.Redirect.INHERIT);",
                        "relevantPart": "redirectOutput",
                        "calls": {
                          "location": "Code/Java/CommandInjection.java",
                          "line": 23,
                          "column": 28,
                          "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                          "relevantPart": "p",
                          "calls": {
                            "location": "Code/Java/CommandInjection.java",
                            "line": 27,
                            "column": 46,
                            "source": "System.out.println(\"COMMAND: \" + p.command());",
                            "relevantPart": "p",
                            "calls": {
                              "location": "Code/Java/CommandInjection.java",
                              "line": 29,
                              "column": 13,
                              "source": "p.start(); // CWE-77: Improper Neutralization of Special Elements used in a Command",
                              "relevantPart": "p",
                              "calls": {
                                "location": "Code/Java/CommandInjection.java",
                                "line": 29,
                                "column": 20,
                                "source": "p.start(); // CWE-77: Improper Neutralization of Special Elements used in a Command",
                                "relevantPart": "start"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 10,
        "description": "Subprocess launched with variable",
        "name": "Subprocess launched with variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/os_command_injection.go",
          "line": 20,
          "column": 17,
          "source": "out, err := exec.Command(command).Output() // Weakness: OS command injection; CWE-78"
        },
        "type": "codeScan",
        "cweId": 78
      },
      {
        "id": 11,
        "description": "Subprocess launched with variable",
        "name": "Subprocess launched with variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/improperLimitation.go",
          "line": 31,
          "column": 18,
          "source": "output, err := exec.Command(\"cat\", homeDir).Output() // Execute cat with the malicious input"
        },
        "type": "codeScan",
        "cweId": 78
      },
      {
        "id": 12,
        "description": "Subprocess launched with variable",
        "name": "Subprocess launched with variable",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/argumentInjection.go",
          "line": 26,
          "column": 9,
          "source": "cmd := exec.Command(\"ls\", dir...) // Weakness: CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')"
        },
        "type": "codeScan",
        "cweId": 78
      },
      {
        "id": 57,
        "name": "Reflected XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/reflected_xss.php",
          "line": 4,
          "column": 14,
          "source": "$name = $_GET[\"name\"];",
          "relevantPart": "_GET",
          "calls": {
            "location": "Code/PHP/reflected_xss.php",
            "line": 4,
            "column": 6,
            "source": "$name = $_GET[\"name\"];",
            "relevantPart": "name",
            "calls": {
              "location": "Code/PHP/reflected_xss.php",
              "line": 7,
              "column": 26,
              "source": "echo \"Hello \" . $name . \"\\n\"; # Weakness: The user `$name` input is not neutralized and instead just displayed; CWE-79",
              "relevantPart": "name",
              "calls": {
                "location": "Code/PHP/reflected_xss.php",
                "line": 7,
                "column": 31,
                "source": "echo \"Hello \" . $name . \"\\n\"; # Weakness: The user `$name` input is not neutralized and instead just displayed; CWE-79",
                "relevantPart": "BinaryExpr"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 58,
        "name": "Reflected XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection.php",
                "line": 6,
                "column": 17,
                "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection.php",
                  "line": 6,
                  "column": 17,
                  "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
                  "relevantPart": "$_ShellCommand",
                  "calls": {
                    "location": "Code/PHP/os_injection.php",
                    "line": 6,
                    "column": 6,
                    "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
                    "relevantPart": "output",
                    "calls": {
                      "location": "Code/PHP/os_injection.php",
                      "line": 7,
                      "column": 12,
                      "source": "echo \"$output\";",
                      "relevantPart": "output"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 59,
        "name": "Reflected XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection_exec.php",
          "line": 5,
          "column": 30,
          "source": "$command = implode(\" \", $argv);",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/PHP/os_injection_exec.php",
            "line": 5,
            "column": 16,
            "source": "$command = implode(\" \", $argv);",
            "relevantPart": "implode",
            "calls": {
              "location": "Code/PHP/os_injection_exec.php",
              "line": 5,
              "column": 6,
              "source": "$command = implode(\" \", $argv);",
              "relevantPart": "command",
              "calls": {
                "location": "Code/PHP/os_injection_exec.php",
                "line": 6,
                "column": 24,
                "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/PHP/os_injection_exec.php",
                  "line": 6,
                  "column": 18,
                  "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
                  "relevantPart": "exec",
                  "calls": {
                    "location": "Code/PHP/os_injection_exec.php",
                    "line": 6,
                    "column": 6,
                    "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
                    "relevantPart": "last_line",
                    "calls": {
                      "location": "Code/PHP/os_injection_exec.php",
                      "line": 7,
                      "column": 12,
                      "source": "echo \"$last_line\\n\";",
                      "relevantPart": "last_line",
                      "calls": {
                        "location": "Code/PHP/os_injection_exec.php",
                        "line": 7,
                        "column": 12,
                        "source": "echo \"$last_line\\n\";",
                        "relevantPart": "BinaryExpr"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 60,
        "name": "Reflected XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/JavaScript/Node/reflected_xss.js",
          "line": 8,
          "column": 34,
          "source": "var name = url.parse(request.url, true).query['name'];",
          "relevantPart": "url",
          "calls": {
            "location": "Code/JavaScript/Node/reflected_xss.js",
            "line": 8,
            "column": 20,
            "source": "var name = url.parse(request.url, true).query['name'];",
            "relevantPart": "parse",
            "calls": {
              "location": "Code/JavaScript/Node/reflected_xss.js",
              "line": 8,
              "column": 45,
              "source": "var name = url.parse(request.url, true).query['name'];",
              "relevantPart": "query",
              "calls": {
                "location": "Code/JavaScript/Node/reflected_xss.js",
                "line": 8,
                "column": 52,
                "source": "var name = url.parse(request.url, true).query['name'];",
                "relevantPart": "name",
                "calls": {
                  "location": "Code/JavaScript/Node/reflected_xss.js",
                  "line": 8,
                  "column": 9,
                  "source": "var name = url.parse(request.url, true).query['name'];",
                  "relevantPart": "name",
                  "calls": {
                    "location": "Code/JavaScript/Node/reflected_xss.js",
                    "line": 17,
                    "column": 35,
                    "source": "<h1>Welcome ${name}</h1> ",
                    "relevantPart": "name",
                    "calls": {
                      "location": "Code/JavaScript/Node/reflected_xss.js",
                      "line": 13,
                      "column": 18,
                      "source": "response.write( // Weakness: The user `name` input is not neutralized and instead just displayed; CWE-79",
                      "relevantPart": "write"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 61,
        "name": "Reflected XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
          "line": 9,
          "column": 30,
          "source": "let name = request.query.name;",
          "relevantPart": "name",
          "calls": {
            "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
            "line": 9,
            "column": 9,
            "source": "let name = request.query.name;",
            "relevantPart": "name",
            "calls": {
              "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
              "line": 13,
              "column": 28,
              "source": "message = `Hello ${name}`",
              "relevantPart": "name",
              "calls": {
                "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
                "line": 13,
                "column": 9,
                "source": "message = `Hello ${name}`",
                "relevantPart": "message",
                "calls": {
                  "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
                  "line": 21,
                  "column": 19,
                  "source": "response.send(message);",
                  "relevantPart": "message",
                  "calls": {
                    "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
                    "line": 21,
                    "column": 14,
                    "source": "response.send(message);",
                    "relevantPart": "send"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 68,
        "name": "Stored XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 7,
          "column": 28,
          "source": "@message = Message.find(params[:id])",
          "relevantPart": "find",
          "calls": {
            "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
            "line": 7,
            "column": 5,
            "source": "@message = Message.find(params[:id])",
            "relevantPart": "message",
            "calls": {
              "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
              "line": 23,
              "column": 4,
              "source": "end",
              "relevantPart": "show",
              "calls": {
                "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
                "line": 23,
                "column": 4,
                "source": "end",
                "relevantPart": "ViewMethod_b1b7ab69",
                "calls": {
                  "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                  "line": 5,
                  "column": 305,
                  "source": "<p><%= raw(@message.text) %></p>",
                  "relevantPart": "message",
                  "calls": {
                    "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                    "line": 5,
                    "column": 313,
                    "source": "<p><%= raw(@message.text) %></p>",
                    "relevantPart": "text",
                    "calls": {
                      "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                      "line": 5,
                      "column": 300,
                      "source": "<p><%= raw(@message.text) %></p>",
                      "relevantPart": "raw"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 69,
        "name": "Stored XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 7,
          "column": 28,
          "source": "@message = Message.find(params[:id])",
          "relevantPart": "find",
          "calls": {
            "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
            "line": 7,
            "column": 5,
            "source": "@message = Message.find(params[:id])",
            "relevantPart": "message",
            "calls": {
              "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
              "line": 23,
              "column": 4,
              "source": "end",
              "relevantPart": "show",
              "calls": {
                "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
                "line": 23,
                "column": 4,
                "source": "end",
                "relevantPart": "ViewMethod_b1b7ab69",
                "calls": {
                  "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                  "line": 4,
                  "column": 305,
                  "source": "<h4><%= raw(@message.title) %></h4>",
                  "relevantPart": "message",
                  "calls": {
                    "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                    "line": 4,
                    "column": 313,
                    "source": "<h4><%= raw(@message.title) %></h4>",
                    "relevantPart": "title",
                    "calls": {
                      "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
                      "line": 4,
                      "column": 300,
                      "source": "<h4><%= raw(@message.title) %></h4>",
                      "relevantPart": "raw"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 70,
        "name": "Stored XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection.php",
          "line": 6,
          "column": 17,
          "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
          "relevantPart": "command",
          "calls": {
            "location": "Code/PHP/os_injection.php",
            "line": 6,
            "column": 17,
            "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
            "relevantPart": "$_ShellCommand",
            "calls": {
              "location": "Code/PHP/os_injection.php",
              "line": 6,
              "column": 6,
              "source": "$output = `$command`; # Weakness: OS command injection; CWE-78",
              "relevantPart": "output",
              "calls": {
                "location": "Code/PHP/os_injection.php",
                "line": 7,
                "column": 12,
                "source": "echo \"$output\";",
                "relevantPart": "output"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 71,
        "name": "Stored XSS",
        "severity": "HIGH",
        "code": {
          "location": "Code/PHP/os_injection_exec.php",
          "line": 6,
          "column": 24,
          "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
          "relevantPart": "command",
          "calls": {
            "location": "Code/PHP/os_injection_exec.php",
            "line": 6,
            "column": 18,
            "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
            "relevantPart": "exec",
            "calls": {
              "location": "Code/PHP/os_injection_exec.php",
              "line": 6,
              "column": 6,
              "source": "$last_line = exec($command); # Weakness: OS command injection; CWE-78",
              "relevantPart": "last_line",
              "calls": {
                "location": "Code/PHP/os_injection_exec.php",
                "line": 7,
                "column": 12,
                "source": "echo \"$last_line\\n\";",
                "relevantPart": "last_line",
                "calls": {
                  "location": "Code/PHP/os_injection_exec.php",
                  "line": 7,
                  "column": 12,
                  "source": "echo \"$last_line\\n\";",
                  "relevantPart": "BinaryExpr"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 76,
        "name": "Reflected XSS All Clients",
        "severity": "HIGH",
        "code": {
          "location": "Code/Java/XSS/src/main/java/XSS/App.java",
          "line": 39,
          "column": 49,
          "source": "String nameParameter = request.getParameter(\"name\");",
          "relevantPart": "\"\"name\"\"",
          "calls": {
            "location": "Code/Java/XSS/src/main/java/XSS/App.java",
            "line": 39,
            "column": 48,
            "source": "String nameParameter = request.getParameter(\"name\");",
            "relevantPart": "getParameter",
            "calls": {
              "location": "Code/Java/XSS/src/main/java/XSS/App.java",
              "line": 39,
              "column": 12,
              "source": "String nameParameter = request.getParameter(\"name\");",
              "relevantPart": "nameParameter",
              "calls": {
                "location": "Code/Java/XSS/src/main/java/XSS/App.java",
                "line": 50,
                "column": 43,
                "source": "writer.write(\"Hello \" + nameParameter); // reflected cross-site scripting; CWE-79",
                "relevantPart": "nameParameter",
                "calls": {
                  "location": "Code/Java/XSS/src/main/java/XSS/App.java",
                  "line": 50,
                  "column": 31,
                  "source": "writer.write(\"Hello \" + nameParameter); // reflected cross-site scripting; CWE-79",
                  "relevantPart": "write"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 79
      },
      {
        "id": 13,
        "description": "SQL string formatting",
        "name": "SQL string formatting",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/sql_injection.go",
          "line": 16,
          "column": 10,
          "source": "q := fmt.Sprintf(\"SELECT * FROM foo where name = '%s'\", os.Args[1]) //Error: SQL Injection; CWE-89"
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 14,
        "description": "SQL string concatenation",
        "name": "SQL string concatenation",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/vuln-qt-go/main.go",
          "line": 187,
          "column": 26,
          "source": "rows, err := db.Query(\"select name, price from product order by \" + text)"
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 66,
        "name": "SQL Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python2/sql_injection.py",
          "line": 45,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/sql_injection.py",
            "line": 45,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python2/sql_injection.py",
              "line": 46,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python2/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python2/sql_injection.py",
                  "line": 28,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python2/sql_injection.py",
                    "line": 28,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python2/sql_injection.py",
                      "line": 28,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python2/sql_injection.py",
                        "line": 30,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command)",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python2/sql_injection.py",
                          "line": 30,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command)",
                          "relevantPart": "execute"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 67,
        "name": "SQL Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python3/sql_injection.py",
          "line": 44,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/sql_injection.py",
            "line": 44,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python3/sql_injection.py",
              "line": 45,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python3/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python3/sql_injection.py",
                  "line": 27,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python3/sql_injection.py",
                    "line": 27,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python3/sql_injection.py",
                      "line": 27,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python3/sql_injection.py",
                        "line": 29,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python3/sql_injection.py",
                          "line": 29,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                          "relevantPart": "execute"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 77,
        "name": "SQL Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
          "line": 57,
          "column": 41,
          "source": "String personId = input.nextLine(); // Weakeness: The input from the user is not properly checked",
          "relevantPart": "nextLine",
          "calls": {
            "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
            "line": 57,
            "column": 16,
            "source": "String personId = input.nextLine(); // Weakeness: The input from the user is not properly checked",
            "relevantPart": "personId",
            "calls": {
              "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
              "line": 60,
              "column": 74,
              "source": "String sqlStatement = \"SELECT Username FROM Users WHERE Id = \" + personId + \";\";",
              "relevantPart": "personId",
              "calls": {
                "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                "line": 60,
                "column": 16,
                "source": "String sqlStatement = \"SELECT Username FROM Users WHERE Id = \" + personId + \";\";",
                "relevantPart": "sqlStatement",
                "calls": {
                  "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                  "line": 68,
                  "column": 60,
                  "source": "ResultSet resultFromQuery = query.executeQuery(sqlStatement); // CWE-89: SQL Injection",
                  "relevantPart": "sqlStatement",
                  "calls": {
                    "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                    "line": 68,
                    "column": 59,
                    "source": "ResultSet resultFromQuery = query.executeQuery(sqlStatement); // CWE-89: SQL Injection",
                    "relevantPart": "executeQuery"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 80,
        "name": "SQL Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/sql_injection.go",
          "line": 16,
          "column": 64,
          "source": "q := fmt.Sprintf(\"SELECT * FROM foo where name = '%s'\", os.Args[1]) //Error: SQL Injection; CWE-89 ",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sql_injection.go",
            "line": 16,
            "column": 14,
            "source": "q := fmt.Sprintf(\"SELECT * FROM foo where name = '%s'\", os.Args[1]) //Error: SQL Injection; CWE-89 ",
            "relevantPart": "Sprintf",
            "calls": {
              "location": "Code/Go/sql_injection.go",
              "line": 16,
              "column": 5,
              "source": "q := fmt.Sprintf(\"SELECT * FROM foo where name = '%s'\", os.Args[1]) //Error: SQL Injection; CWE-89 ",
              "relevantPart": "q",
              "calls": {
                "location": "Code/Go/sql_injection.go",
                "line": 17,
                "column": 27,
                "source": "rows, err := db.Query(q)",
                "relevantPart": "q",
                "calls": {
                  "location": "Code/Go/sql_injection.go",
                  "line": 17,
                  "column": 21,
                  "source": "rows, err := db.Query(q)",
                  "relevantPart": "Query"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 82,
        "name": "SQL Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
          "line": 7,
          "column": 10,
          "source": "fun main(args: Array<String>) {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
            "line": 10,
            "column": 24,
            "source": "val username = args.joinToString(\" \")",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
              "line": 10,
              "column": 29,
              "source": "val username = args.joinToString(\" \")",
              "relevantPart": "joinToString",
              "calls": {
                "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                "line": 10,
                "column": 13,
                "source": "val username = args.joinToString(\" \")",
                "relevantPart": "username",
                "calls": {
                  "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                  "line": 11,
                  "column": 20,
                  "source": "searchUser(username)",
                  "relevantPart": "username",
                  "calls": {
                    "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                    "line": 17,
                    "column": 16,
                    "source": "fun searchUser(username: String) {",
                    "relevantPart": "username",
                    "calls": {
                      "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                      "line": 19,
                      "column": 61,
                      "source": "val sql = \"SELECT * FROM USER WHERE USERNAME = '\" + username + \"'\"",
                      "relevantPart": "username",
                      "calls": {
                        "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                        "line": 19,
                        "column": 13,
                        "source": "val sql = \"SELECT * FROM USER WHERE USERNAME = '\" + username + \"'\"",
                        "relevantPart": "sql",
                        "calls": {
                          "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                          "line": 21,
                          "column": 48,
                          "source": "val resultSet = statement.executeQuery(sql)",
                          "relevantPart": "sql",
                          "calls": {
                            "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                            "line": 21,
                            "column": 35,
                            "source": "val resultSet = statement.executeQuery(sql)",
                            "relevantPart": "executeQuery"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 73,
        "name": "Code Injection",
        "severity": "HIGH",
        "code": {
          "location": "Code/Python/Python3/eval_injection.py",
          "line": 6,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/eval_injection.py",
            "line": 6,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/eval_injection.py",
              "line": 7,
              "column": 25,
              "source": "print(eval('+'.join(args))) # Weakness: Eval injection; CWE-95",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/eval_injection.py",
                "line": 7,
                "column": 20,
                "source": "print(eval('+'.join(args))) # Weakness: Eval injection; CWE-95",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/eval_injection.py",
                  "line": 7,
                  "column": 11,
                  "source": "print(eval('+'.join(args))) # Weakness: Eval injection; CWE-95",
                  "relevantPart": "eval"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 94
      },
      {
        "id": 79,
        "name": "Buffer Overflow Unbounded Format",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/buffer_overflow.c",
          "line": 10,
          "column": 17,
          "source": "scanf(\"%s\", name); // CWE-120: in case the name is longer than NAME_LENGTH, a buffer overflow occurs.",
          "relevantPart": "name",
          "calls": {
            "location": "Code/C/buffer_overflow.c",
            "line": 10,
            "column": 5,
            "source": "scanf(\"%s\", name); // CWE-120: in case the name is longer than NAME_LENGTH, a buffer overflow occurs.",
            "relevantPart": "scanf",
            "calls": {
              "location": "Code/C/buffer_overflow.c",
              "line": 10,
              "column": 17,
              "source": "scanf(\"%s\", name); // CWE-120: in case the name is longer than NAME_LENGTH, a buffer overflow occurs.",
              "relevantPart": "name"
            }
          }
        },
        "type": "codeScan",
        "cweId": 120
      },
      {
        "id": 78,
        "name": "Format String Attack",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/format_string.c",
          "line": 8,
          "column": 27,
          "source": "int main(int argc, char **argv) {",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/C/format_string.c",
            "line": 15,
            "column": 17,
            "source": "memcpy(buf, argv[1], 5012);",
            "relevantPart": "argv",
            "calls": {
              "location": "Code/C/format_string.c",
              "line": 16,
              "column": 18,
              "source": "printWrapper(argv[1]);",
              "relevantPart": "argv",
              "calls": {
                "location": "Code/C/format_string.c",
                "line": 4,
                "column": 25,
                "source": "void printWrapper(char *string) {",
                "relevantPart": "string",
                "calls": {
                  "location": "Code/C/format_string.c",
                  "line": 5,
                  "column": 12,
                  "source": "printf(string); // Weakness: Use of Externally-Controlled Format String; CWE-134",
                  "relevantPart": "string"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 134
      },
      {
        "id": 64,
        "name": "Improper Null Termination",
        "severity": "HIGH",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 15,
          "column": 13,
          "source": "strncpy(command, cat, commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 170
      },
      {
        "id": 65,
        "name": "Improper Null Termination",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 13,
          "column": 13,
          "source": "strncpy(command, argv[1], commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 170
      },
      {
        "id": 50,
        "name": "Off by One Error",
        "severity": "HIGH",
        "code": {
          "location": "Code/C++/out_of_bounds_write.cpp",
          "line": 10,
          "column": 34,
          "source": "std::cout << \"value is: \" << a[2] << \"\\n\";",
          "relevantPart": "a"
        },
        "type": "codeScan",
        "cweId": 193
      },
      {
        "id": 51,
        "name": "Off by One Error",
        "severity": "HIGH",
        "code": {
          "location": "Code/C++/out_of_bounds_write.cpp",
          "line": 8,
          "column": 5,
          "source": "a[2] = 3; //CWE-787: Out-of-bounds Write. Writing to memory which is not part of the array",
          "relevantPart": "a"
        },
        "type": "codeScan",
        "cweId": 193
      },
      {
        "id": 52,
        "name": "Off by One Error",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/out_of_bounds_write.c",
          "line": 9,
          "column": 18,
          "source": "printf(\"%d\", a[2]);",
          "relevantPart": "a"
        },
        "type": "codeScan",
        "cweId": 193
      },
      {
        "id": 53,
        "name": "Off by One Error",
        "severity": "HIGH",
        "code": {
          "location": "Code/C/out_of_bounds_write.c",
          "line": 7,
          "column": 5,
          "source": "a[2] = 3; //CWE-787: Out-of-bounds Write. Writing to memory which is not part of the array",
          "relevantPart": "a"
        },
        "type": "codeScan",
        "cweId": 193
      },
      {
        "id": 18,
        "description": "Expect file permissions to be 0600 or less",
        "name": "Expect file permissions to be 0600 or less",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 54,
          "column": 18,
          "source": "outFile, err := os.OpenFile(outFileName, os.O_WRONLY|os.O_CREATE, 0644)"
        },
        "type": "codeScan",
        "cweId": 276
      },
      {
        "id": 2,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 51,
          "column": 19,
          "source": "hashedPassword = sha1.Sum([]byte(strings.TrimSpace(password))) // Weakness CWE-328, CWE-759"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 3,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 26,
          "column": 26,
          "source": "hashedLoginPassword := sha1.Sum([]byte(strings.TrimSpace(loginPass)))"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 4,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakRC4.go",
          "line": 17,
          "column": 21,
          "source": "cryptCipher2, _ := rc4.NewCipher([]byte(\"mySecret\")) // Weakness: CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 5,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakRC4.go",
          "line": 11,
          "column": 10,
          "source": "c, _ := rc4.NewCipher([]byte(\"mySecret\")) // Weakness: CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 6,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 51,
          "column": 19,
          "source": "hashedPassword = md5.Sum([]byte(strings.TrimSpace(password))) // Weakness CWE-328, CWE-759"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 7,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 26,
          "column": 26,
          "source": "hashedLoginPassword := md5.Sum([]byte(strings.TrimSpace(loginPass)))"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 8,
        "description": "Use of weak cryptographic primitive",
        "name": "Use of weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakDES.go",
          "line": 11,
          "column": 19,
          "source": "cipher, error := des.NewCipher([]byte(\"mySecret\")) // Weakness: CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 19,
        "description": "Blocklisted import crypto/sha1: weak cryptographic primitive",
        "name": "Blocklisted import crypto/sha1: weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 4,
          "column": 2,
          "source": "\"crypto/sha1\""
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 20,
        "description": "Blocklisted import crypto/rc4: weak cryptographic primitive",
        "name": "Blocklisted import crypto/rc4: weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakRC4.go",
          "line": 4,
          "column": 2,
          "source": "\"crypto/rc4\""
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 21,
        "description": "Blocklisted import crypto/md5: weak cryptographic primitive",
        "name": "Blocklisted import crypto/md5: weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 4,
          "column": 2,
          "source": "\"crypto/md5\""
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 22,
        "description": "Blocklisted import crypto/des: weak cryptographic primitive",
        "name": "Blocklisted import crypto/des: weak cryptographic primitive",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/weakDES.go",
          "line": 4,
          "column": 2,
          "source": "\"crypto/des\""
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 1,
        "description": "Use of weak random number generator (math/rand instead of crypto/rand)",
        "name": "Use of weak random number generator (math/rand instead of crypto/rand)",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 75,
          "column": 16,
          "source": "randomizer := rand.New(rand.NewSource(int64(seed)))"
        },
        "type": "codeScan",
        "cweId": 338
      },
      {
        "id": 9,
        "description": "Use of net/http serve function that has no support for setting timeouts",
        "name": "Use of net/http serve function that has no support for setting timeouts",
        "severity": "HIGH",
        "code": {
          "location": "Code/Go/webAssembly/server/main.go",
          "line": 9,
          "column": 9,
          "source": "err := http.ListenAndServe(\"127.0.0.1:8080\", http.FileServer(http.Dir(\"../assets\")))"
        },
        "type": "codeScan",
        "cweId": 676
      },
      {
        "id": 172,
        "name": "Path Traversal",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/path_traversal_absolute.py",
          "line": 7,
          "column": 20,
          "source": "filename = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/path_traversal_absolute.py",
            "line": 7,
            "column": 5,
            "source": "filename = sys.argv[1]",
            "relevantPart": "filename",
            "calls": {
              "location": "Code/Python/Python3/path_traversal_absolute.py",
              "line": 8,
              "column": 38,
              "source": "path = os.path.join(os.getcwd(), filename)",
              "relevantPart": "filename",
              "calls": {
                "location": "Code/Python/Python3/path_traversal_absolute.py",
                "line": 8,
                "column": 20,
                "source": "path = os.path.join(os.getcwd(), filename)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/path_traversal_absolute.py",
                  "line": 8,
                  "column": 5,
                  "source": "path = os.path.join(os.getcwd(), filename)",
                  "relevantPart": "path",
                  "calls": {
                    "location": "Code/Python/Python3/path_traversal_absolute.py",
                    "line": 10,
                    "column": 19,
                    "source": "with open(path, \"r\") as f:",
                    "relevantPart": "path",
                    "calls": {
                      "location": "Code/Python/Python3/path_traversal_absolute.py",
                      "line": 10,
                      "column": 14,
                      "source": "with open(path, \"r\") as f:",
                      "relevantPart": "open"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 22
      },
      {
        "id": 158,
        "name": "Reflected Relative Path Traversal",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 27,
          "column": 16,
          "source": "filePath = os.Args[2]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 27,
            "column": 2,
            "source": "filePath = os.Args[2]",
            "relevantPart": "filePath",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 44,
              "column": 22,
              "source": "content := readFile(filePath)",
              "relevantPart": "filePath",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 119,
                "column": 15,
                "source": "func readFile(path string) [][]byte {",
                "relevantPart": "path",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 120,
                  "column": 34,
                  "source": "fileContent, err := os.ReadFile(path)",
                  "relevantPart": "path"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 23
      },
      {
        "id": 159,
        "name": "Reflected Relative Path Traversal",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 26,
          "column": 14,
          "source": "secret = os.Args[1]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 26,
            "column": 2,
            "source": "secret = os.Args[1]",
            "relevantPart": "secret",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 36,
              "column": 35,
              "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
              "relevantPart": "secret",
              "calls": {
                "location": "Code/Go/predictableCBC_IV.go",
                "line": 64,
                "column": 17,
                "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCBC_IV.go",
                  "line": 66,
                  "column": 9,
                  "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/Go/predictableCBC_IV.go",
                    "line": 66,
                    "column": 36,
                    "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                    "relevantPart": "ciphertext",
                    "calls": {
                      "location": "Code/Go/predictableCBC_IV.go",
                      "line": 71,
                      "column": 16,
                      "source": "return append(ciphertext, padtext...)",
                      "relevantPart": "ciphertext",
                      "calls": {
                        "location": "Code/Go/predictableCBC_IV.go",
                        "line": 71,
                        "column": 9,
                        "source": "return append(ciphertext, padtext...)",
                        "relevantPart": "append",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 36,
                          "column": 17,
                          "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                          "relevantPart": "addPadding",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 36,
                            "column": 2,
                            "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                            "relevantPart": "secretBytes",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 49,
                              "column": 36,
                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                              "relevantPart": "secretBytes",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 87,
                                "column": 14,
                                "source": "func encrypt(secret, plainText []byte) []byte {",
                                "relevantPart": "secret",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 88,
                                  "column": 30,
                                  "source": "block, err := aes.NewCipher(secret)",
                                  "relevantPart": "secret",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 88,
                                    "column": 20,
                                    "source": "block, err := aes.NewCipher(secret)",
                                    "relevantPart": "NewCipher",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 88,
                                      "column": 2,
                                      "source": "block, err := aes.NewCipher(secret)",
                                      "relevantPart": "block",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 92,
                                        "column": 31,
                                        "source": "aesGCM, err := cipher.NewGCM(block)",
                                        "relevantPart": "block",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 92,
                                          "column": 24,
                                          "source": "aesGCM, err := cipher.NewGCM(block)",
                                          "relevantPart": "NewGCM",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 92,
                                            "column": 2,
                                            "source": "aesGCM, err := cipher.NewGCM(block)",
                                            "relevantPart": "aesGCM",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 97,
                                              "column": 16,
                                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                              "relevantPart": "aesGCM",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 97,
                                                "column": 23,
                                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                "relevantPart": "Seal",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 97,
                                                  "column": 2,
                                                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                  "relevantPart": "cipherText",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 98,
                                                    "column": 9,
                                                    "source": "return cipherText",
                                                    "relevantPart": "cipherText",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 49,
                                                      "column": 28,
                                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                      "relevantPart": "encrypt",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 49,
                                                        "column": 4,
                                                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                        "relevantPart": "cipherTextLine",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 59,
                                                          "column": 23,
                                                          "source": "for _, line := range cipherTextLine {",
                                                          "relevantPart": "cipherTextLine",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 59,
                                                            "column": 17,
                                                            "source": "for _, line := range cipherTextLine {",
                                                            "relevantPart": "line",
                                                            "calls": {
                                                              "location": "Code/Go/sameNonce_GCM.go",
                                                              "line": 62,
                                                              "column": 53,
                                                              "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                              "relevantPart": "line",
                                                              "calls": {
                                                                "location": "Code/Go/sameNonce_GCM.go",
                                                                "line": 62,
                                                                "column": 37,
                                                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                                "relevantPart": "Sprintf"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 23
      },
      {
        "id": 156,
        "name": "Reflected Absolute Path Traversal",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 27,
          "column": 16,
          "source": "filePath = os.Args[2]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 27,
            "column": 2,
            "source": "filePath = os.Args[2]",
            "relevantPart": "filePath",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 44,
              "column": 22,
              "source": "content := readFile(filePath)",
              "relevantPart": "filePath",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 119,
                "column": 15,
                "source": "func readFile(path string) [][]byte {",
                "relevantPart": "path",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 120,
                  "column": 34,
                  "source": "fileContent, err := os.ReadFile(path)",
                  "relevantPart": "path"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 36
      },
      {
        "id": 157,
        "name": "Reflected Absolute Path Traversal",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 26,
          "column": 14,
          "source": "secret = os.Args[1]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 26,
            "column": 2,
            "source": "secret = os.Args[1]",
            "relevantPart": "secret",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 36,
              "column": 35,
              "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
              "relevantPart": "secret",
              "calls": {
                "location": "Code/Go/predictableCBC_IV.go",
                "line": 64,
                "column": 17,
                "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCBC_IV.go",
                  "line": 66,
                  "column": 9,
                  "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/Go/predictableCBC_IV.go",
                    "line": 66,
                    "column": 36,
                    "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                    "relevantPart": "ciphertext",
                    "calls": {
                      "location": "Code/Go/predictableCBC_IV.go",
                      "line": 71,
                      "column": 16,
                      "source": "return append(ciphertext, padtext...)",
                      "relevantPart": "ciphertext",
                      "calls": {
                        "location": "Code/Go/predictableCBC_IV.go",
                        "line": 71,
                        "column": 9,
                        "source": "return append(ciphertext, padtext...)",
                        "relevantPart": "append",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 36,
                          "column": 17,
                          "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                          "relevantPart": "addPadding",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 36,
                            "column": 2,
                            "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                            "relevantPart": "secretBytes",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 49,
                              "column": 36,
                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                              "relevantPart": "secretBytes",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 87,
                                "column": 14,
                                "source": "func encrypt(secret, plainText []byte) []byte {",
                                "relevantPart": "secret",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 88,
                                  "column": 30,
                                  "source": "block, err := aes.NewCipher(secret)",
                                  "relevantPart": "secret",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 88,
                                    "column": 20,
                                    "source": "block, err := aes.NewCipher(secret)",
                                    "relevantPart": "NewCipher",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 88,
                                      "column": 2,
                                      "source": "block, err := aes.NewCipher(secret)",
                                      "relevantPart": "block",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 92,
                                        "column": 31,
                                        "source": "aesGCM, err := cipher.NewGCM(block)",
                                        "relevantPart": "block",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 92,
                                          "column": 24,
                                          "source": "aesGCM, err := cipher.NewGCM(block)",
                                          "relevantPart": "NewGCM",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 92,
                                            "column": 2,
                                            "source": "aesGCM, err := cipher.NewGCM(block)",
                                            "relevantPart": "aesGCM",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 97,
                                              "column": 16,
                                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                              "relevantPart": "aesGCM",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 97,
                                                "column": 23,
                                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                "relevantPart": "Seal",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 97,
                                                  "column": 2,
                                                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                  "relevantPart": "cipherText",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 98,
                                                    "column": 9,
                                                    "source": "return cipherText",
                                                    "relevantPart": "cipherText",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 49,
                                                      "column": 28,
                                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                      "relevantPart": "encrypt",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 49,
                                                        "column": 4,
                                                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                        "relevantPart": "cipherTextLine",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 59,
                                                          "column": 23,
                                                          "source": "for _, line := range cipherTextLine {",
                                                          "relevantPart": "cipherTextLine",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 59,
                                                            "column": 17,
                                                            "source": "for _, line := range cipherTextLine {",
                                                            "relevantPart": "line",
                                                            "calls": {
                                                              "location": "Code/Go/sameNonce_GCM.go",
                                                              "line": 62,
                                                              "column": 53,
                                                              "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                              "relevantPart": "line",
                                                              "calls": {
                                                                "location": "Code/Go/sameNonce_GCM.go",
                                                                "line": 62,
                                                                "column": 37,
                                                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                                "relevantPart": "Sprintf"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 36
      },
      {
        "id": 160,
        "name": "Stored Command Injection",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
          "line": 17,
          "column": 33,
          "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
          "relevantPart": "load",
          "calls": {
            "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
            "line": 17,
            "column": 9,
            "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
            "relevantPart": "system_command",
            "calls": {
              "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
              "line": 18,
              "column": 19,
              "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
              "relevantPart": "system_command"
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 161,
        "name": "Stored Command Injection",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
          "line": 17,
          "column": 33,
          "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
          "relevantPart": "load",
          "calls": {
            "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
            "line": 17,
            "column": 9,
            "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
            "relevantPart": "system_command",
            "calls": {
              "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
              "line": 18,
              "column": 19,
              "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
              "relevantPart": "system_command"
            }
          }
        },
        "type": "codeScan",
        "cweId": 77
      },
      {
        "id": 168,
        "name": "Client Side Injection",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
          "line": 7,
          "column": 10,
          "source": "fun main(args: Array<String>) {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
            "line": 10,
            "column": 24,
            "source": "val username = args.joinToString(\" \")",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
              "line": 10,
              "column": 29,
              "source": "val username = args.joinToString(\" \")",
              "relevantPart": "joinToString",
              "calls": {
                "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                "line": 10,
                "column": 13,
                "source": "val username = args.joinToString(\" \")",
                "relevantPart": "username",
                "calls": {
                  "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                  "line": 11,
                  "column": 20,
                  "source": "searchUser(username)",
                  "relevantPart": "username",
                  "calls": {
                    "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                    "line": 17,
                    "column": 16,
                    "source": "fun searchUser(username: String) {",
                    "relevantPart": "username",
                    "calls": {
                      "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                      "line": 19,
                      "column": 61,
                      "source": "val sql = \"SELECT * FROM USER WHERE USERNAME = '\" + username + \"'\"",
                      "relevantPart": "username",
                      "calls": {
                        "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                        "line": 19,
                        "column": 13,
                        "source": "val sql = \"SELECT * FROM USER WHERE USERNAME = '\" + username + \"'\"",
                        "relevantPart": "sql",
                        "calls": {
                          "location": "Code/Kotlin/SQLInjection/src/main/kotlin/SQLInjection.kt",
                          "line": 21,
                          "column": 48,
                          "source": "val resultSet = statement.executeQuery(sql)",
                          "relevantPart": "sql"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 89
      },
      {
        "id": 134,
        "name": "Uncontrolled Format String",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/sql_injection.py",
          "line": 44,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/sql_injection.py",
            "line": 44,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python3/sql_injection.py",
              "line": 45,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python3/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python3/sql_injection.py",
                  "line": 27,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python3/sql_injection.py",
                    "line": 27,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python3/sql_injection.py",
                      "line": 27,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python3/sql_injection.py",
                        "line": 28,
                        "column": 51,
                        "source": "print(\"SQL Command to be executed: {}\".format(sql_command)) # Weakness: The argument is passed into the SQL command; CWE-134",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python3/sql_injection.py",
                          "line": 28,
                          "column": 44,
                          "source": "print(\"SQL Command to be executed: {}\".format(sql_command)) # Weakness: The argument is passed into the SQL command; CWE-134",
                          "relevantPart": "format",
                          "calls": {
                            "location": "Code/Python/Python3/sql_injection.py",
                            "line": 28,
                            "column": 5,
                            "source": "print(\"SQL Command to be executed: {}\".format(sql_command)) # Weakness: The argument is passed into the SQL command; CWE-134",
                            "relevantPart": "print"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 134
      },
      {
        "id": 135,
        "name": "Uncontrolled Format String",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python2/sql_injection.py",
          "line": 45,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/sql_injection.py",
            "line": 45,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python2/sql_injection.py",
              "line": 46,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python2/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python2/sql_injection.py",
                  "line": 28,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python2/sql_injection.py",
                    "line": 28,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python2/sql_injection.py",
                      "line": 28,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python2/sql_injection.py",
                        "line": 29,
                        "column": 51,
                        "source": "print \"SQL Command to be executed: {}\".format(sql_command)",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python2/sql_injection.py",
                          "line": 29,
                          "column": 44,
                          "source": "print \"SQL Command to be executed: {}\".format(sql_command)",
                          "relevantPart": "format",
                          "calls": {
                            "location": "Code/Python/Python2/sql_injection.py",
                            "line": 29,
                            "column": 5,
                            "source": "print \"SQL Command to be executed: {}\".format(sql_command)",
                            "relevantPart": "print"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 134
      },
      {
        "id": 136,
        "name": "Uncontrolled Format String",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/sql_injection.py",
          "line": 44,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/sql_injection.py",
            "line": 44,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python3/sql_injection.py",
              "line": 45,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python3/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python3/sql_injection.py",
                  "line": 27,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python3/sql_injection.py",
                    "line": 27,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python3/sql_injection.py",
                      "line": 27,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python3/sql_injection.py",
                        "line": 29,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python3/sql_injection.py",
                          "line": 29,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                          "relevantPart": "execute",
                          "calls": {
                            "location": "Code/Python/Python3/sql_injection.py",
                            "line": 29,
                            "column": 5,
                            "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                            "relevantPart": "cursor",
                            "calls": {
                              "location": "Code/Python/Python3/sql_injection.py",
                              "line": 31,
                              "column": 18,
                              "source": "result_set = cursor.fetchall()",
                              "relevantPart": "cursor",
                              "calls": {
                                "location": "Code/Python/Python3/sql_injection.py",
                                "line": 31,
                                "column": 25,
                                "source": "result_set = cursor.fetchall()",
                                "relevantPart": "fetchall",
                                "calls": {
                                  "location": "Code/Python/Python3/sql_injection.py",
                                  "line": 31,
                                  "column": 5,
                                  "source": "result_set = cursor.fetchall()",
                                  "relevantPart": "result_set",
                                  "calls": {
                                    "location": "Code/Python/Python3/sql_injection.py",
                                    "line": 34,
                                    "column": 20,
                                    "source": "for row in result_set:",
                                    "relevantPart": "result_set",
                                    "calls": {
                                      "location": "Code/Python/Python3/sql_injection.py",
                                      "line": 34,
                                      "column": 9,
                                      "source": "for row in result_set:",
                                      "relevantPart": "row",
                                      "calls": {
                                        "location": "Code/Python/Python3/sql_injection.py",
                                        "line": 35,
                                        "column": 19,
                                        "source": "print(row)",
                                        "relevantPart": "row",
                                        "calls": {
                                          "location": "Code/Python/Python3/sql_injection.py",
                                          "line": 35,
                                          "column": 13,
                                          "source": "print(row)",
                                          "relevantPart": "print"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 134
      },
      {
        "id": 137,
        "name": "Uncontrolled Format String",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python2/sql_injection.py",
          "line": 45,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/sql_injection.py",
            "line": 45,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python2/sql_injection.py",
              "line": 46,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python2/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python2/sql_injection.py",
                  "line": 28,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python2/sql_injection.py",
                    "line": 28,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python2/sql_injection.py",
                      "line": 28,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python2/sql_injection.py",
                        "line": 30,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command)",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python2/sql_injection.py",
                          "line": 30,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command)",
                          "relevantPart": "execute",
                          "calls": {
                            "location": "Code/Python/Python2/sql_injection.py",
                            "line": 30,
                            "column": 5,
                            "source": "cursor = conn.execute(sql_command)",
                            "relevantPart": "cursor",
                            "calls": {
                              "location": "Code/Python/Python2/sql_injection.py",
                              "line": 32,
                              "column": 18,
                              "source": "result_set = cursor.fetchall()",
                              "relevantPart": "cursor",
                              "calls": {
                                "location": "Code/Python/Python2/sql_injection.py",
                                "line": 32,
                                "column": 25,
                                "source": "result_set = cursor.fetchall()",
                                "relevantPart": "fetchall",
                                "calls": {
                                  "location": "Code/Python/Python2/sql_injection.py",
                                  "line": 32,
                                  "column": 5,
                                  "source": "result_set = cursor.fetchall()",
                                  "relevantPart": "result_set",
                                  "calls": {
                                    "location": "Code/Python/Python2/sql_injection.py",
                                    "line": 35,
                                    "column": 20,
                                    "source": "for row in result_set:",
                                    "relevantPart": "result_set",
                                    "calls": {
                                      "location": "Code/Python/Python2/sql_injection.py",
                                      "line": 35,
                                      "column": 9,
                                      "source": "for row in result_set:",
                                      "relevantPart": "row",
                                      "calls": {
                                        "location": "Code/Python/Python2/sql_injection.py",
                                        "line": 36,
                                        "column": 19,
                                        "source": "print row",
                                        "relevantPart": "row",
                                        "calls": {
                                          "location": "Code/Python/Python2/sql_injection.py",
                                          "line": 36,
                                          "column": 13,
                                          "source": "print row",
                                          "relevantPart": "print"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 134
      },
      {
        "id": 171,
        "name": "Integer Overflow",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/integer_overflow.c",
          "line": 8,
          "column": 11,
          "source": "i = i + 1;  // Weakness: Integer Overflow, calculation not working as expected; CWE-190",
          "relevantPart": "BinaryExpr",
          "calls": {
            "location": "Code/C/integer_overflow.c",
            "line": 8,
            "column": 5,
            "source": "i = i + 1;  // Weakness: Integer Overflow, calculation not working as expected; CWE-190",
            "relevantPart": "i"
          }
        },
        "type": "codeScan",
        "cweId": 190
      },
      {
        "id": 23,
        "description": "Use of unsafe calls should be audited",
        "name": "Use of unsafe calls should be audited",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/useAfterFree.go",
          "line": 14,
          "column": 25,
          "source": "buff1Ptr := (*[10]int)(unsafe.Pointer(&buff))"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 24,
        "description": "Use of unsafe calls should be audited",
        "name": "Use of unsafe calls should be audited",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/outOfBoundsWrite.go",
          "line": 24,
          "column": 26,
          "source": "buff1ptr := (*[12]byte)(unsafe.Pointer(&buff[9]))"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 25,
        "description": "Use of unsafe calls should be audited",
        "name": "Use of unsafe calls should be audited",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/outOfBoundsRead.go",
          "line": 23,
          "column": 27,
          "source": "dangerous := (*[50]byte)(unsafe.Pointer(&slogan[0])) // Creating CWE-125"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 26,
        "description": "Use of unsafe calls should be audited",
        "name": "Use of unsafe calls should be audited",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/bufferCopy.go",
          "line": 13,
          "column": 32,
          "source": "inputBufferPtr := (*[15]byte)(unsafe.Pointer(&inputBuffer))"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 83,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/buffer_overflow.c",
          "line": 10,
          "column": 5,
          "source": "scanf(\"%s\", name); // CWE-120: in case the name is longer than NAME_LENGTH, a buffer overflow occurs.",
          "relevantPart": "scanf"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 84,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/format_string.c",
          "line": 15,
          "column": 5,
          "source": "memcpy(buf, argv[1], 5012);",
          "relevantPart": "memcpy"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 85,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 29,
          "column": 9,
          "source": "sprintf(&hex_digest[i*2], \"%02x\", digest[i]);",
          "relevantPart": "sprintf"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 86,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 11,
          "column": 21,
          "source": "commandLength = strlen(argv[1]) + 1;",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 87,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 13,
          "column": 5,
          "source": "strncpy(command, argv[1], commandLength);",
          "relevantPart": "strncpy"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 88,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 21,
          "column": 41,
          "source": "EVP_DigestUpdate(context, password, strlen(password));",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 89,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 43,
          "column": 29,
          "source": "printf(\"length: %ld\\n\", strlen(hex_digest));",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 90,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 13,
          "column": 21,
          "source": "commandLength = strlen(cat) + strlen(argv[1]) + 1;",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 91,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 13,
          "column": 35,
          "source": "commandLength = strlen(cat) + strlen(argv[1]) + 1;",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 92,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 15,
          "column": 5,
          "source": "strncpy(command, cat, commandLength);",
          "relevantPart": "strncpy"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 93,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 16,
          "column": 5,
          "source": "strncat(command, argv[1], (commandLength - strlen(cat)));",
          "relevantPart": "strncat"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 94,
        "name": "Dangerous Functions",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 16,
          "column": 48,
          "source": "strncat(command, argv[1], (commandLength - strlen(cat)));",
          "relevantPart": "strlen"
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 122,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
            "line": 28,
            "column": 33,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "CxLeftShiftVar24",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
              "line": 28,
              "column": 15,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar24"
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 123,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
            "line": 28,
            "column": 33,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "CxLeftShiftVar8",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
              "line": 28,
              "column": 15,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar8"
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 124,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
          "line": 30,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
            "line": 30,
            "column": 33,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "CxLeftShiftVar16",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
              "line": 30,
              "column": 15,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar16"
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 125,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 28,
          "column": 49,
          "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 28,
            "column": 60,
            "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
            "relevantPart": "data",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 28,
              "column": 33,
              "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
              "relevantPart": "secure_vector",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 28,
                "column": 33,
                "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                "relevantPart": "plaintextBuffer",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 31,
                  "column": 18,
                  "source": "cipher->finish(plaintextBuffer);",
                  "relevantPart": "plaintextBuffer",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 33,
                    "column": 80,
                    "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                    "relevantPart": "plaintextBuffer",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 33,
                      "column": 96,
                      "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                      "relevantPart": "size",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 33,
                        "column": 15,
                        "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                        "relevantPart": "plaintext",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 33,
                          "column": 15,
                          "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                          "relevantPart": "plaintext",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 35,
                            "column": 10,
                            "source": "return plaintext;",
                            "relevantPart": "plaintext",
                            "calls": {
                              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                              "line": 24,
                              "column": 22,
                              "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                              "relevantPart": "decrypt",
                              "calls": {
                                "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                "line": 24,
                                "column": 10,
                                "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                  "line": 25,
                                  "column": 35,
                                  "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                    "line": 25,
                                    "column": 35,
                                    "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                      "line": 25,
                                      "column": 32,
                                      "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                      "relevantPart": "CxLeftShiftVar7",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                        "line": 25,
                                        "column": 15,
                                        "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                        "relevantPart": "CxLeftShiftVar7"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 126,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 28,
          "column": 49,
          "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 28,
            "column": 60,
            "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
            "relevantPart": "data",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 28,
              "column": 33,
              "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
              "relevantPart": "secure_vector",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 28,
                "column": 33,
                "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                "relevantPart": "plaintextBuffer",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 31,
                  "column": 18,
                  "source": "cipher->finish(plaintextBuffer);",
                  "relevantPart": "plaintextBuffer",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 33,
                    "column": 80,
                    "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                    "relevantPart": "plaintextBuffer",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 33,
                      "column": 96,
                      "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                      "relevantPart": "size",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 33,
                        "column": 15,
                        "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                        "relevantPart": "plaintext",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 33,
                          "column": 15,
                          "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                          "relevantPart": "plaintext",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 35,
                            "column": 10,
                            "source": "return plaintext;",
                            "relevantPart": "plaintext",
                            "calls": {
                              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                              "line": 24,
                              "column": 22,
                              "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                              "relevantPart": "decrypt",
                              "calls": {
                                "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                "line": 24,
                                "column": 10,
                                "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                  "line": 25,
                                  "column": 35,
                                  "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                    "line": 25,
                                    "column": 35,
                                    "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                      "line": 25,
                                      "column": 32,
                                      "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                      "relevantPart": "CxLeftShiftVar23",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                        "line": 25,
                                        "column": 15,
                                        "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                        "relevantPart": "CxLeftShiftVar23"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 127,
        "name": "Plaintext Storage Of A Password",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 28,
          "column": 49,
          "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 28,
            "column": 60,
            "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
            "relevantPart": "data",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 28,
              "column": 33,
              "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
              "relevantPart": "secure_vector",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 28,
                "column": 33,
                "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                "relevantPart": "plaintextBuffer",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 31,
                  "column": 18,
                  "source": "cipher->finish(plaintextBuffer);",
                  "relevantPart": "plaintextBuffer",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 33,
                    "column": 80,
                    "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                    "relevantPart": "plaintextBuffer",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 33,
                      "column": 96,
                      "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                      "relevantPart": "size",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 33,
                        "column": 15,
                        "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                        "relevantPart": "plaintext",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 33,
                          "column": 15,
                          "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                          "relevantPart": "plaintext",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 35,
                            "column": 10,
                            "source": "return plaintext;",
                            "relevantPart": "plaintext",
                            "calls": {
                              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                              "line": 26,
                              "column": 22,
                              "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                              "relevantPart": "decrypt",
                              "calls": {
                                "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                "line": 26,
                                "column": 10,
                                "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                  "line": 27,
                                  "column": 35,
                                  "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                    "line": 27,
                                    "column": 35,
                                    "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                      "line": 27,
                                      "column": 32,
                                      "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                      "relevantPart": "CxLeftShiftVar15",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                        "line": 27,
                                        "column": 15,
                                        "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                        "relevantPart": "CxLeftShiftVar15"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 256
      },
      {
        "id": 128,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
            "line": 28,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
              "line": 28,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar8",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                "line": 28,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar8"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 129,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
            "line": 28,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
              "line": 28,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar24",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                "line": 28,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar24"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 130,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
          "line": 30,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
            "line": 30,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
              "line": 30,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar16",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                "line": 30,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar16"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 131,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                      "line": 24,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                        "line": 24,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                          "line": 25,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                            "line": 25,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                              "line": 25,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar7",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                                "line": 25,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar7"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 132,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                      "line": 24,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                        "line": 24,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                          "line": 25,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                            "line": 25,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                              "line": 25,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar23",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                                "line": 25,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar23"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 133,
        "name": "Personal Information Without Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                      "line": 26,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                        "line": 26,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                          "line": 27,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                            "line": 27,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                              "line": 27,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar15",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                                "line": 27,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar15"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 176,
        "name": "Encoding Used Instead of Encryption",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 12,
          "column": 33,
          "source": "Botan::secure_vector<uint8_t> ciphertextBuffer(plaintext.data(), plaintext.data() + plaintext.length());",
          "relevantPart": "ciphertextBuffer",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 15,
            "column": 18,
            "source": "cipher->finish(ciphertextBuffer);",
            "relevantPart": "ciphertextBuffer",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 17,
              "column": 28,
              "source": "return Botan::hex_encode(ciphertextBuffer);",
              "relevantPart": "ciphertextBuffer",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 17,
                "column": 17,
                "source": "return Botan::hex_encode(ciphertextBuffer);",
                "relevantPart": "hex_encode"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 311
      },
      {
        "id": 167,
        "name": "Communication over HTTP",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Swift/vulnerable-ios/vulnerable-ios/ContentView.swift",
          "line": 30,
          "column": 44,
          "source": "let url = URL(string: \"http://www.google.de\")!",
          "relevantPart": "\"http://www.google.de\"",
          "calls": {
            "location": "Code/Swift/vulnerable-ios/vulnerable-ios/ContentView.swift",
            "line": 30,
            "column": 31,
            "source": "let url = URL(string: \"http://www.google.de\")!",
            "relevantPart": "URL",
            "calls": {
              "location": "Code/Swift/vulnerable-ios/vulnerable-ios/ContentView.swift",
              "line": 30,
              "column": 25,
              "source": "let url = URL(string: \"http://www.google.de\")!",
              "relevantPart": "url",
              "calls": {
                "location": "Code/Swift/vulnerable-ios/vulnerable-ios/ContentView.swift",
                "line": 32,
                "column": 54,
                "source": "URLSession.shared.dataTask(with: url) { (data, response, error) in",
                "relevantPart": "url",
                "calls": {
                  "location": "Code/Swift/vulnerable-ios/vulnerable-ios/ContentView.swift",
                  "line": 32,
                  "column": 39,
                  "source": "URLSession.shared.dataTask(with: url) { (data, response, error) in",
                  "relevantPart": "dataTask"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 319
      },
      {
        "id": 150,
        "name": "Inadequate Encryption Strength",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Scala/RiskyCryptographicAlgorithmMd5.scala",
          "line": 7,
          "column": 22,
          "source": "md5Digest.update(password.getBytes())",
          "relevantPart": "password",
          "calls": {
            "location": "Code/Scala/RiskyCryptographicAlgorithmMd5.scala",
            "line": 7,
            "column": 31,
            "source": "md5Digest.update(password.getBytes())",
            "relevantPart": "getBytes"
          }
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 151,
        "name": "Inadequate Encryption Strength",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Scala/RiskyCryptographicAlgorithmSha1.scala",
          "line": 7,
          "column": 23,
          "source": "sha1Digest.update(password.getBytes())",
          "relevantPart": "password",
          "calls": {
            "location": "Code/Scala/RiskyCryptographicAlgorithmSha1.scala",
            "line": 7,
            "column": 32,
            "source": "sha1Digest.update(password.getBytes())",
            "relevantPart": "getBytes"
          }
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 177,
        "name": "Use Of Weak Hashing Primitive",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 16,
          "column": 52,
          "source": "const EVP_MD *algorithm = EVP_get_digestbyname(\"SHA1\");",
          "relevantPart": "\"SHA1\""
        },
        "type": "codeScan",
        "cweId": 326
      },
      {
        "id": 162,
        "name": "Use of Cryptographically Weak PRNG",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 75,
          "column": 21,
          "source": "randomizer := rand.New(rand.NewSource(int64(seed)))",
          "relevantPart": "New"
        },
        "type": "codeScan",
        "cweId": 338
      },
      {
        "id": 163,
        "name": "Use of Cryptographically Weak PRNG",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 75,
          "column": 30,
          "source": "randomizer := rand.New(rand.NewSource(int64(seed)))",
          "relevantPart": "NewSource"
        },
        "type": "codeScan",
        "cweId": 338
      },
      {
        "id": 166,
        "name": "Missing HSTS Header",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/PHP/os_injection_exec.php",
          "line": 3,
          "column": 1,
          "source": "if (count($argv) > 1) {",
          "relevantPart": "if"
        },
        "type": "codeScan",
        "cweId": 346
      },
      {
        "id": 173,
        "name": "Missing HSTS Header",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
          "line": 21,
          "column": 14,
          "source": "response.send(message);",
          "relevantPart": "send"
        },
        "type": "codeScan",
        "cweId": 346
      },
      {
        "id": 174,
        "name": "Missing HSTS Header",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Java/XSS/src/main/java/XSS/App.java",
          "line": 45,
          "column": 30,
          "source": "writer.write(\"<!DOCTYPE html><html><head><title>Vulnerable JakartaEE App</title></head><body>\");",
          "relevantPart": "write"
        },
        "type": "codeScan",
        "cweId": 346
      },
      {
        "id": 105,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 45,
          "column": 2,
          "source": "cipherTextLine := make([][]byte, len(content))",
          "relevantPart": "cipherTextLine",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 59,
            "column": 23,
            "source": "for _, line := range cipherTextLine {",
            "relevantPart": "cipherTextLine",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 59,
              "column": 17,
              "source": "for _, line := range cipherTextLine {",
              "relevantPart": "line",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 62,
                "column": 53,
                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                "relevantPart": "line",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 62,
                  "column": 37,
                  "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                  "relevantPart": "Sprintf",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 62,
                    "column": 21,
                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                    "relevantPart": "WriteString"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 106,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 92,
          "column": 17,
          "source": "aesGCM, err := cipher.NewGCM(block)",
          "relevantPart": "crypto/cipher",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 92,
            "column": 24,
            "source": "aesGCM, err := cipher.NewGCM(block)",
            "relevantPart": "NewGCM",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 92,
              "column": 2,
              "source": "aesGCM, err := cipher.NewGCM(block)",
              "relevantPart": "aesGCM",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 97,
                "column": 16,
                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                "relevantPart": "aesGCM",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 97,
                  "column": 23,
                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                  "relevantPart": "Seal",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 97,
                    "column": 2,
                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                    "relevantPart": "cipherText",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 98,
                      "column": 9,
                      "source": "return cipherText",
                      "relevantPart": "cipherText",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 49,
                        "column": 28,
                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                        "relevantPart": "encrypt",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 49,
                          "column": 4,
                          "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                          "relevantPart": "cipherTextLine",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 59,
                            "column": 23,
                            "source": "for _, line := range cipherTextLine {",
                            "relevantPart": "cipherTextLine",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 59,
                              "column": 17,
                              "source": "for _, line := range cipherTextLine {",
                              "relevantPart": "line",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 62,
                                "column": 53,
                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                "relevantPart": "line",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 62,
                                  "column": 37,
                                  "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                  "relevantPart": "Sprintf",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 62,
                                    "column": 21,
                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                    "relevantPart": "WriteString"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 107,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 40,
          "column": 17,
          "source": "secretBytes = secretBytes[:32]",
          "relevantPart": "secretBytes",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 40,
            "column": 3,
            "source": "secretBytes = secretBytes[:32]",
            "relevantPart": "secretBytes",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 49,
              "column": 36,
              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
              "relevantPart": "secretBytes",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 87,
                "column": 14,
                "source": "func encrypt(secret, plainText []byte) []byte {",
                "relevantPart": "secret",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 88,
                  "column": 30,
                  "source": "block, err := aes.NewCipher(secret)",
                  "relevantPart": "secret",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 88,
                    "column": 20,
                    "source": "block, err := aes.NewCipher(secret)",
                    "relevantPart": "NewCipher",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 88,
                      "column": 2,
                      "source": "block, err := aes.NewCipher(secret)",
                      "relevantPart": "block",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 92,
                        "column": 31,
                        "source": "aesGCM, err := cipher.NewGCM(block)",
                        "relevantPart": "block",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 92,
                          "column": 24,
                          "source": "aesGCM, err := cipher.NewGCM(block)",
                          "relevantPart": "NewGCM",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 92,
                            "column": 2,
                            "source": "aesGCM, err := cipher.NewGCM(block)",
                            "relevantPart": "aesGCM",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 97,
                              "column": 16,
                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                              "relevantPart": "aesGCM",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 97,
                                "column": 23,
                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                "relevantPart": "Seal",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 97,
                                  "column": 2,
                                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                  "relevantPart": "cipherText",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 98,
                                    "column": 9,
                                    "source": "return cipherText",
                                    "relevantPart": "cipherText",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 49,
                                      "column": 28,
                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                      "relevantPart": "encrypt",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 49,
                                        "column": 4,
                                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                        "relevantPart": "cipherTextLine",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 59,
                                          "column": 23,
                                          "source": "for _, line := range cipherTextLine {",
                                          "relevantPart": "cipherTextLine",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 59,
                                            "column": 17,
                                            "source": "for _, line := range cipherTextLine {",
                                            "relevantPart": "line",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 62,
                                              "column": 53,
                                              "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                              "relevantPart": "line",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 62,
                                                "column": 37,
                                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                "relevantPart": "Sprintf",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 62,
                                                  "column": 21,
                                                  "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                  "relevantPart": "WriteString"
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 108,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 67,
          "column": 30,
          "source": "padding = (blockSize - len(ciphertext)%blockSize)",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCBC_IV.go",
            "line": 71,
            "column": 16,
            "source": "return append(ciphertext, padtext...)",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCBC_IV.go",
              "line": 71,
              "column": 9,
              "source": "return append(ciphertext, padtext...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 109,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCTR.go",
          "line": 68,
          "column": 30,
          "source": "padding = (blockSize - len(ciphertext)%blockSize)",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCTR.go",
            "line": 72,
            "column": 16,
            "source": "return append(ciphertext, padtext...)",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCTR.go",
              "line": 72,
              "column": 9,
              "source": "return append(ciphertext, padtext...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 110,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 132,
          "column": 30,
          "source": "padding = (blockSize - len(cipherText)%blockSize)",
          "relevantPart": "cipherText",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 136,
            "column": 16,
            "source": "return append(cipherText, padText...)",
            "relevantPart": "cipherText",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 136,
              "column": 9,
              "source": "return append(cipherText, padText...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 111,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCTR.go",
          "line": 67,
          "column": 9,
          "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCTR.go",
            "line": 67,
            "column": 36,
            "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCTR.go",
              "line": 72,
              "column": 16,
              "source": "return append(ciphertext, padtext...)",
              "relevantPart": "ciphertext",
              "calls": {
                "location": "Code/Go/predictableCTR.go",
                "line": 72,
                "column": 9,
                "source": "return append(ciphertext, padtext...)",
                "relevantPart": "append",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 17,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "addPadding",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 36,
                    "column": 2,
                    "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 49,
                      "column": 36,
                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                      "relevantPart": "secretBytes",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 87,
                        "column": 14,
                        "source": "func encrypt(secret, plainText []byte) []byte {",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 30,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "secret",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 20,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "NewCipher",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 88,
                              "column": 2,
                              "source": "block, err := aes.NewCipher(secret)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 31,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "block",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 24,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "NewGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 92,
                                    "column": 2,
                                    "source": "aesGCM, err := cipher.NewGCM(block)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 16,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "aesGCM",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 23,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "Seal",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 97,
                                          "column": 2,
                                          "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 98,
                                            "column": 9,
                                            "source": "return cipherText",
                                            "relevantPart": "cipherText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 28,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "encrypt",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 49,
                                                "column": 4,
                                                "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 23,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "cipherTextLine",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 59,
                                                    "column": 17,
                                                    "source": "for _, line := range cipherTextLine {",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 53,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "line",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 37,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "Sprintf",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 62,
                                                          "column": 21,
                                                          "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                          "relevantPart": "WriteString"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 112,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 131,
          "column": 9,
          "source": "if len(cipherText)%16 != 0 && len(cipherText) != 24 {",
          "relevantPart": "cipherText",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 131,
            "column": 36,
            "source": "if len(cipherText)%16 != 0 && len(cipherText) != 24 {",
            "relevantPart": "cipherText",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 136,
              "column": 16,
              "source": "return append(cipherText, padText...)",
              "relevantPart": "cipherText",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 136,
                "column": 9,
                "source": "return append(cipherText, padText...)",
                "relevantPart": "append",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 17,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "addPadding",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 36,
                    "column": 2,
                    "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 49,
                      "column": 36,
                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                      "relevantPart": "secretBytes",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 87,
                        "column": 14,
                        "source": "func encrypt(secret, plainText []byte) []byte {",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 30,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "secret",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 20,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "NewCipher",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 88,
                              "column": 2,
                              "source": "block, err := aes.NewCipher(secret)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 31,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "block",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 24,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "NewGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 92,
                                    "column": 2,
                                    "source": "aesGCM, err := cipher.NewGCM(block)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 16,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "aesGCM",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 23,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "Seal",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 97,
                                          "column": 2,
                                          "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 98,
                                            "column": 9,
                                            "source": "return cipherText",
                                            "relevantPart": "cipherText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 28,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "encrypt",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 49,
                                                "column": 4,
                                                "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 23,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "cipherTextLine",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 59,
                                                    "column": 17,
                                                    "source": "for _, line := range cipherTextLine {",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 53,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "line",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 37,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "Sprintf",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 62,
                                                          "column": 21,
                                                          "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                          "relevantPart": "WriteString"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 113,
        "name": "Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 26,
          "column": 2,
          "source": "secret = os.Args[1]",
          "relevantPart": "secret",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 36,
            "column": 35,
            "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
            "relevantPart": "secret",
            "calls": {
              "location": "Code/Go/predictableCBC_IV.go",
              "line": 64,
              "column": 17,
              "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
              "relevantPart": "ciphertext",
              "calls": {
                "location": "Code/Go/predictableCBC_IV.go",
                "line": 66,
                "column": 9,
                "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCBC_IV.go",
                  "line": 66,
                  "column": 36,
                  "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/Go/predictableCBC_IV.go",
                    "line": 71,
                    "column": 16,
                    "source": "return append(ciphertext, padtext...)",
                    "relevantPart": "ciphertext",
                    "calls": {
                      "location": "Code/Go/predictableCBC_IV.go",
                      "line": 71,
                      "column": 9,
                      "source": "return append(ciphertext, padtext...)",
                      "relevantPart": "append",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 36,
                        "column": 17,
                        "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                        "relevantPart": "addPadding",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 36,
                          "column": 2,
                          "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                          "relevantPart": "secretBytes",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 49,
                            "column": 36,
                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                            "relevantPart": "secretBytes",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 87,
                              "column": 14,
                              "source": "func encrypt(secret, plainText []byte) []byte {",
                              "relevantPart": "secret",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 88,
                                "column": 30,
                                "source": "block, err := aes.NewCipher(secret)",
                                "relevantPart": "secret",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 88,
                                  "column": 20,
                                  "source": "block, err := aes.NewCipher(secret)",
                                  "relevantPart": "NewCipher",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 88,
                                    "column": 2,
                                    "source": "block, err := aes.NewCipher(secret)",
                                    "relevantPart": "block",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 92,
                                      "column": 31,
                                      "source": "aesGCM, err := cipher.NewGCM(block)",
                                      "relevantPart": "block",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 92,
                                        "column": 24,
                                        "source": "aesGCM, err := cipher.NewGCM(block)",
                                        "relevantPart": "NewGCM",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 92,
                                          "column": 2,
                                          "source": "aesGCM, err := cipher.NewGCM(block)",
                                          "relevantPart": "aesGCM",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 97,
                                            "column": 16,
                                            "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                            "relevantPart": "aesGCM",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 97,
                                              "column": 23,
                                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                              "relevantPart": "Seal",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 97,
                                                "column": 2,
                                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                "relevantPart": "cipherText",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 98,
                                                  "column": 9,
                                                  "source": "return cipherText",
                                                  "relevantPart": "cipherText",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 49,
                                                    "column": 28,
                                                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                    "relevantPart": "encrypt",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 49,
                                                      "column": 4,
                                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                      "relevantPart": "cipherTextLine",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 59,
                                                        "column": 23,
                                                        "source": "for _, line := range cipherTextLine {",
                                                        "relevantPart": "cipherTextLine",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 59,
                                                          "column": 17,
                                                          "source": "for _, line := range cipherTextLine {",
                                                          "relevantPart": "line",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 62,
                                                            "column": 53,
                                                            "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                            "relevantPart": "line",
                                                            "calls": {
                                                              "location": "Code/Go/sameNonce_GCM.go",
                                                              "line": 62,
                                                              "column": 37,
                                                              "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                              "relevantPart": "Sprintf",
                                                              "calls": {
                                                                "location": "Code/Go/sameNonce_GCM.go",
                                                                "line": 62,
                                                                "column": 21,
                                                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                                "relevantPart": "WriteString"
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 152,
        "name": "Client Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
          "line": 12,
          "column": 9,
          "source": "const password: string = \"Insecure\"; // Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "password",
          "calls": {
            "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
            "line": 14,
            "column": 16,
            "source": "password_md5(password);",
            "relevantPart": "password",
            "calls": {
              "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
              "line": 3,
              "column": 23,
              "source": "function password_md5(password: string) {",
              "relevantPart": "password",
              "calls": {
                "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
                "line": 8,
                "column": 33,
                "source": "console.log(`MD5\\t-> Value: ${password}; Hexdigest: ${hashInHex}`); // Weakness: password is logged to the console; CWE-359",
                "relevantPart": "password",
                "calls": {
                  "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
                  "line": 8,
                  "column": 11,
                  "source": "console.log(`MD5\\t-> Value: ${password}; Hexdigest: ${hashInHex}`); // Weakness: password is logged to the console; CWE-359",
                  "relevantPart": "log"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 153,
        "name": "Client Privacy Violation",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
          "line": 12,
          "column": 9,
          "source": "const password: string = \"Insecure\"; // Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "password",
          "calls": {
            "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
            "line": 14,
            "column": 17,
            "source": "password_sha1(password);",
            "relevantPart": "password",
            "calls": {
              "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
              "line": 3,
              "column": 24,
              "source": "function password_sha1(password: string) {",
              "relevantPart": "password",
              "calls": {
                "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
                "line": 8,
                "column": 34,
                "source": "console.log(`SHA1\\t-> Value: ${password}; Hexdigest: ${hashInHex}`); // Weakness: password is logged to the console; CWE-359",
                "relevantPart": "password",
                "calls": {
                  "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
                  "line": 8,
                  "column": 11,
                  "source": "console.log(`SHA1\\t-> Value: ${password}; Hexdigest: ${hashInHex}`); // Weakness: password is logged to the console; CWE-359",
                  "relevantPart": "log"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 95,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 436,
          "column": 19,
          "source": "size = size - #init",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 96,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 841,
          "column": 13,
          "source": "n = n + mul * bytes[i]",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 97,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 845,
          "column": 13,
          "source": "n = n - mul",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 98,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 734,
          "column": 41,
          "source": "bytes2[i + 1] = bytes2[i + 1] + 1",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 99,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 762,
          "column": 41,
          "source": "bytes2[i + 1] = bytes2[i + 1] + 1",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 100,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 301,
          "column": 17,
          "source": "m = m + e * 2^(mantissa_width - 16)",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 101,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 329,
          "column": 13,
          "source": "e = e + 1022",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 102,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 633,
          "column": 17,
          "source": "low = low + 40 -- patch pour userdata il y a un dÃ©calage !",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 103,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 692,
          "column": 17,
          "source": "p = p + 2^sizeof_pointer",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 104,
        "name": "Race Condition",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Lua/3rdparty/lua_attack/bytecode_exploit.lua",
          "line": 701,
          "column": 17,
          "source": "i = i + 1",
          "relevantPart": "BinaryExpr"
        },
        "type": "codeScan",
        "cweId": 366
      },
      {
        "id": 138,
        "name": "Denial Of Service Resource Exhaustion",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 27,
          "column": 16,
          "source": "filePath = os.Args[2]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 27,
            "column": 2,
            "source": "filePath = os.Args[2]",
            "relevantPart": "filePath",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 44,
              "column": 22,
              "source": "content := readFile(filePath)",
              "relevantPart": "filePath",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 119,
                "column": 15,
                "source": "func readFile(path string) [][]byte {",
                "relevantPart": "path",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 120,
                  "column": 34,
                  "source": "fileContent, err := os.ReadFile(path)",
                  "relevantPart": "path",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 120,
                    "column": 25,
                    "source": "fileContent, err := os.ReadFile(path)",
                    "relevantPart": "ReadFile",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 120,
                      "column": 2,
                      "source": "fileContent, err := os.ReadFile(path)",
                      "relevantPart": "fileContent",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 125,
                        "column": 27,
                        "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                        "relevantPart": "fileContent",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 125,
                          "column": 21,
                          "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                          "relevantPart": "Split",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 125,
                            "column": 2,
                            "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                            "relevantPart": "fileLines",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 126,
                              "column": 9,
                              "source": "return fileLines",
                              "relevantPart": "fileLines",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 44,
                                "column": 13,
                                "source": "content := readFile(filePath)",
                                "relevantPart": "readFile",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 44,
                                  "column": 2,
                                  "source": "content := readFile(filePath)",
                                  "relevantPart": "content",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 47,
                                    "column": 27,
                                    "source": "for index, line := range content {",
                                    "relevantPart": "content",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 47,
                                      "column": 21,
                                      "source": "for index, line := range content {",
                                      "relevantPart": "len",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 47,
                                        "column": 6,
                                        "source": "for index, line := range content {",
                                        "relevantPart": "<"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 400
      },
      {
        "id": 139,
        "name": "Denial Of Service Resource Exhaustion",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 27,
          "column": 16,
          "source": "filePath = os.Args[2]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 27,
            "column": 2,
            "source": "filePath = os.Args[2]",
            "relevantPart": "filePath",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 44,
              "column": 22,
              "source": "content := readFile(filePath)",
              "relevantPart": "filePath",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 119,
                "column": 15,
                "source": "func readFile(path string) [][]byte {",
                "relevantPart": "path",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 120,
                  "column": 34,
                  "source": "fileContent, err := os.ReadFile(path)",
                  "relevantPart": "path",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 120,
                    "column": 25,
                    "source": "fileContent, err := os.ReadFile(path)",
                    "relevantPart": "ReadFile",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 120,
                      "column": 2,
                      "source": "fileContent, err := os.ReadFile(path)",
                      "relevantPart": "fileContent",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 125,
                        "column": 27,
                        "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                        "relevantPart": "fileContent",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 125,
                          "column": 21,
                          "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                          "relevantPart": "Split",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 125,
                            "column": 2,
                            "source": "fileLines := bytes.Split(fileContent, []byte(\"\\n\"))",
                            "relevantPart": "fileLines",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 126,
                              "column": 9,
                              "source": "return fileLines",
                              "relevantPart": "fileLines",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 44,
                                "column": 13,
                                "source": "content := readFile(filePath)",
                                "relevantPart": "readFile",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 44,
                                  "column": 2,
                                  "source": "content := readFile(filePath)",
                                  "relevantPart": "content",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 47,
                                    "column": 27,
                                    "source": "for index, line := range content {",
                                    "relevantPart": "content",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 47,
                                      "column": 21,
                                      "source": "for index, line := range content {",
                                      "relevantPart": "line",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 49,
                                        "column": 49,
                                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                        "relevantPart": "line",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 87,
                                          "column": 22,
                                          "source": "func encrypt(secret, plainText []byte) []byte {",
                                          "relevantPart": "plainText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 97,
                                            "column": 40,
                                            "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                            "relevantPart": "plainText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 97,
                                              "column": 23,
                                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                              "relevantPart": "Seal",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 97,
                                                "column": 2,
                                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                "relevantPart": "cipherText",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 98,
                                                  "column": 9,
                                                  "source": "return cipherText",
                                                  "relevantPart": "cipherText",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 49,
                                                    "column": 28,
                                                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                    "relevantPart": "encrypt",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 49,
                                                      "column": 4,
                                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                      "relevantPart": "cipherTextLine",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 59,
                                                        "column": 23,
                                                        "source": "for _, line := range cipherTextLine {",
                                                        "relevantPart": "cipherTextLine",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 59,
                                                          "column": 17,
                                                          "source": "for _, line := range cipherTextLine {",
                                                          "relevantPart": "len",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 59,
                                                            "column": 17,
                                                            "source": "for _, line := range cipherTextLine {",
                                                            "relevantPart": "<"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 400
      },
      {
        "id": 140,
        "name": "Denial Of Service Resource Exhaustion",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 26,
          "column": 14,
          "source": "secret = os.Args[1]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 26,
            "column": 2,
            "source": "secret = os.Args[1]",
            "relevantPart": "secret",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 36,
              "column": 35,
              "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
              "relevantPart": "secret",
              "calls": {
                "location": "Code/Go/predictableCBC_IV.go",
                "line": 64,
                "column": 17,
                "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCBC_IV.go",
                  "line": 66,
                  "column": 9,
                  "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/Go/predictableCBC_IV.go",
                    "line": 66,
                    "column": 36,
                    "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
                    "relevantPart": "ciphertext",
                    "calls": {
                      "location": "Code/Go/predictableCBC_IV.go",
                      "line": 71,
                      "column": 16,
                      "source": "return append(ciphertext, padtext...)",
                      "relevantPart": "ciphertext",
                      "calls": {
                        "location": "Code/Go/predictableCBC_IV.go",
                        "line": 71,
                        "column": 9,
                        "source": "return append(ciphertext, padtext...)",
                        "relevantPart": "append",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 36,
                          "column": 17,
                          "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                          "relevantPart": "addPadding",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 36,
                            "column": 2,
                            "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                            "relevantPart": "secretBytes",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 49,
                              "column": 36,
                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                              "relevantPart": "secretBytes",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 87,
                                "column": 14,
                                "source": "func encrypt(secret, plainText []byte) []byte {",
                                "relevantPart": "secret",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 88,
                                  "column": 30,
                                  "source": "block, err := aes.NewCipher(secret)",
                                  "relevantPart": "secret",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 88,
                                    "column": 20,
                                    "source": "block, err := aes.NewCipher(secret)",
                                    "relevantPart": "NewCipher",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 88,
                                      "column": 2,
                                      "source": "block, err := aes.NewCipher(secret)",
                                      "relevantPart": "block",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 92,
                                        "column": 31,
                                        "source": "aesGCM, err := cipher.NewGCM(block)",
                                        "relevantPart": "block",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 92,
                                          "column": 24,
                                          "source": "aesGCM, err := cipher.NewGCM(block)",
                                          "relevantPart": "NewGCM",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 92,
                                            "column": 2,
                                            "source": "aesGCM, err := cipher.NewGCM(block)",
                                            "relevantPart": "aesGCM",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 97,
                                              "column": 16,
                                              "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                              "relevantPart": "aesGCM",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 97,
                                                "column": 23,
                                                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                "relevantPart": "Seal",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 97,
                                                  "column": 2,
                                                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                                  "relevantPart": "cipherText",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 98,
                                                    "column": 9,
                                                    "source": "return cipherText",
                                                    "relevantPart": "cipherText",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 49,
                                                      "column": 28,
                                                      "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                      "relevantPart": "encrypt",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 49,
                                                        "column": 4,
                                                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                        "relevantPart": "cipherTextLine",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 59,
                                                          "column": 23,
                                                          "source": "for _, line := range cipherTextLine {",
                                                          "relevantPart": "cipherTextLine",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 59,
                                                            "column": 17,
                                                            "source": "for _, line := range cipherTextLine {",
                                                            "relevantPart": "len",
                                                            "calls": {
                                                              "location": "Code/Go/sameNonce_GCM.go",
                                                              "line": 59,
                                                              "column": 17,
                                                              "source": "for _, line := range cipherTextLine {",
                                                              "relevantPart": "<"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 400
      },
      {
        "id": 144,
        "name": "Memory Leak",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 12,
          "column": 5,
          "source": "command = (char *) malloc(commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 401
      },
      {
        "id": 145,
        "name": "Memory Leak",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 26,
          "column": 5,
          "source": "hex_digest = (char *)malloc(hex_digest_length);",
          "relevantPart": "hex_digest"
        },
        "type": "codeScan",
        "cweId": 401
      },
      {
        "id": 146,
        "name": "Memory Leak",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 14,
          "column": 5,
          "source": "command = (char *)malloc(commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 401
      },
      {
        "id": 141,
        "name": "Double Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/double_free.cpp",
          "line": 9,
          "column": 10,
          "source": "free(value);",
          "relevantPart": "value",
          "calls": {
            "location": "Code/C++/double_free.cpp",
            "line": 10,
            "column": 10,
            "source": "free(value); // CWE-415: free() is called twice.",
            "relevantPart": "value"
          }
        },
        "type": "codeScan",
        "cweId": 415
      },
      {
        "id": 142,
        "name": "Double Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/double_delete.cpp",
          "line": 9,
          "column": 12,
          "source": "delete value;",
          "relevantPart": "value",
          "calls": {
            "location": "Code/C++/double_delete.cpp",
            "line": 10,
            "column": 12,
            "source": "delete value; // CWE-415: delete is called twice.",
            "relevantPart": "value"
          }
        },
        "type": "codeScan",
        "cweId": 415
      },
      {
        "id": 143,
        "name": "Double Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/double_free.c",
          "line": 17,
          "column": 10,
          "source": "free(user);",
          "relevantPart": "user",
          "calls": {
            "location": "Code/C/double_free.c",
            "line": 18,
            "column": 10,
            "source": "free(user); // CWE-415: free() is called twice.",
            "relevantPart": "user"
          }
        },
        "type": "codeScan",
        "cweId": 415
      },
      {
        "id": 147,
        "name": "Use After Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/double_free.cpp",
          "line": 9,
          "column": 10,
          "source": "free(value);",
          "relevantPart": "value",
          "calls": {
            "location": "Code/C++/double_free.cpp",
            "line": 10,
            "column": 10,
            "source": "free(value); // CWE-415: free() is called twice.",
            "relevantPart": "value"
          }
        },
        "type": "codeScan",
        "cweId": 416
      },
      {
        "id": 148,
        "name": "Use After Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C++/double_delete.cpp",
          "line": 9,
          "column": 12,
          "source": "delete value;",
          "relevantPart": "value",
          "calls": {
            "location": "Code/C++/double_delete.cpp",
            "line": 10,
            "column": 12,
            "source": "delete value; // CWE-415: delete is called twice.",
            "relevantPart": "value"
          }
        },
        "type": "codeScan",
        "cweId": 416
      },
      {
        "id": 149,
        "name": "Use After Free",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/C/double_free.c",
          "line": 17,
          "column": 10,
          "source": "free(user);",
          "relevantPart": "user",
          "calls": {
            "location": "Code/C/double_free.c",
            "line": 18,
            "column": 10,
            "source": "free(user); // CWE-415: free() is called twice.",
            "relevantPart": "user"
          }
        },
        "type": "codeScan",
        "cweId": 416
      },
      {
        "id": 154,
        "name": "Parameter Tampering",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/sql_injection.py",
          "line": 44,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/sql_injection.py",
            "line": 44,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python3/sql_injection.py",
              "line": 45,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python3/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python3/sql_injection.py",
                  "line": 27,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python3/sql_injection.py",
                    "line": 27,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python3/sql_injection.py",
                      "line": 27,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg)",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python3/sql_injection.py",
                        "line": 29,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python3/sql_injection.py",
                          "line": 29,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command) # Weakness: The argument is passed into the SQL command; CWE-89",
                          "relevantPart": "execute"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 472
      },
      {
        "id": 155,
        "name": "Parameter Tampering",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python2/sql_injection.py",
          "line": 45,
          "column": 19,
          "source": "arg = sys.argv[1]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/sql_injection.py",
            "line": 45,
            "column": 9,
            "source": "arg = sys.argv[1]",
            "relevantPart": "arg",
            "calls": {
              "location": "Code/Python/Python2/sql_injection.py",
              "line": 46,
              "column": 14,
              "source": "main(arg)",
              "relevantPart": "arg",
              "calls": {
                "location": "Code/Python/Python2/sql_injection.py",
                "line": 6,
                "column": 10,
                "source": "def main(arg):",
                "relevantPart": "arg",
                "calls": {
                  "location": "Code/Python/Python2/sql_injection.py",
                  "line": 28,
                  "column": 66,
                  "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                  "relevantPart": "arg",
                  "calls": {
                    "location": "Code/Python/Python2/sql_injection.py",
                    "line": 28,
                    "column": 59,
                    "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                    "relevantPart": "format",
                    "calls": {
                      "location": "Code/Python/Python2/sql_injection.py",
                      "line": 28,
                      "column": 5,
                      "source": "sql_command = \"SELECT * FROM USERS WHERE EMAIL='{}';\".format(arg) # Weakness: The argument is passed into the SQL command; CWE-89",
                      "relevantPart": "sql_command",
                      "calls": {
                        "location": "Code/Python/Python2/sql_injection.py",
                        "line": 30,
                        "column": 27,
                        "source": "cursor = conn.execute(sql_command)",
                        "relevantPart": "sql_command",
                        "calls": {
                          "location": "Code/Python/Python2/sql_injection.py",
                          "line": 30,
                          "column": 19,
                          "source": "cursor = conn.execute(sql_command)",
                          "relevantPart": "execute"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 472
      },
      {
        "id": 175,
        "name": "Parameter Tampering",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
          "line": 57,
          "column": 41,
          "source": "String personId = input.nextLine(); // Weakeness: The input from the user is not properly checked",
          "relevantPart": "nextLine",
          "calls": {
            "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
            "line": 57,
            "column": 16,
            "source": "String personId = input.nextLine(); // Weakeness: The input from the user is not properly checked",
            "relevantPart": "personId",
            "calls": {
              "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
              "line": 60,
              "column": 74,
              "source": "String sqlStatement = \"SELECT Username FROM Users WHERE Id = \" + personId + \";\";",
              "relevantPart": "personId",
              "calls": {
                "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                "line": 60,
                "column": 16,
                "source": "String sqlStatement = \"SELECT Username FROM Users WHERE Id = \" + personId + \";\";",
                "relevantPart": "sqlStatement",
                "calls": {
                  "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                  "line": 68,
                  "column": 60,
                  "source": "ResultSet resultFromQuery = query.executeQuery(sqlStatement); // CWE-89: SQL Injection",
                  "relevantPart": "sqlStatement",
                  "calls": {
                    "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                    "line": 68,
                    "column": 59,
                    "source": "ResultSet resultFromQuery = query.executeQuery(sqlStatement); // CWE-89: SQL Injection",
                    "relevantPart": "executeQuery"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 472
      },
      {
        "id": 114,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 129,
          "column": 17,
          "source": "func addPadding(cipherText []byte, blockSize int) []byte {",
          "relevantPart": "cipherText",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 131,
            "column": 9,
            "source": "if len(cipherText)%16 != 0 && len(cipherText) != 24 {",
            "relevantPart": "cipherText",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 131,
              "column": 36,
              "source": "if len(cipherText)%16 != 0 && len(cipherText) != 24 {",
              "relevantPart": "cipherText",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 136,
                "column": 16,
                "source": "return append(cipherText, padText...)",
                "relevantPart": "cipherText",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 136,
                  "column": 9,
                  "source": "return append(cipherText, padText...)",
                  "relevantPart": "append",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 36,
                    "column": 17,
                    "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                    "relevantPart": "addPadding",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 36,
                      "column": 2,
                      "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                      "relevantPart": "secretBytes",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 49,
                        "column": 36,
                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                        "relevantPart": "secretBytes",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 87,
                          "column": 14,
                          "source": "func encrypt(secret, plainText []byte) []byte {",
                          "relevantPart": "secret",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 30,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "secret",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 88,
                              "column": 20,
                              "source": "block, err := aes.NewCipher(secret)",
                              "relevantPart": "NewCipher",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 88,
                                "column": 2,
                                "source": "block, err := aes.NewCipher(secret)",
                                "relevantPart": "block",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 31,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "block",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 92,
                                    "column": 24,
                                    "source": "aesGCM, err := cipher.NewGCM(block)",
                                    "relevantPart": "NewGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 92,
                                      "column": 2,
                                      "source": "aesGCM, err := cipher.NewGCM(block)",
                                      "relevantPart": "aesGCM",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 16,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "aesGCM",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 97,
                                          "column": 23,
                                          "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                          "relevantPart": "Seal",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 97,
                                            "column": 2,
                                            "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                            "relevantPart": "cipherText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 98,
                                              "column": 9,
                                              "source": "return cipherText",
                                              "relevantPart": "cipherText",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 49,
                                                "column": 28,
                                                "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                "relevantPart": "encrypt",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 49,
                                                  "column": 4,
                                                  "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                  "relevantPart": "cipherTextLine",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 59,
                                                    "column": 23,
                                                    "source": "for _, line := range cipherTextLine {",
                                                    "relevantPart": "cipherTextLine",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 59,
                                                      "column": 17,
                                                      "source": "for _, line := range cipherTextLine {",
                                                      "relevantPart": "line",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 53,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "line",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 62,
                                                          "column": 37,
                                                          "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                          "relevantPart": "Sprintf",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 62,
                                                            "column": 21,
                                                            "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                            "relevantPart": "WriteString"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 115,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCTR.go",
          "line": 65,
          "column": 17,
          "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCTR.go",
            "line": 67,
            "column": 9,
            "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCTR.go",
              "line": 67,
              "column": 36,
              "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
              "relevantPart": "ciphertext",
              "calls": {
                "location": "Code/Go/predictableCTR.go",
                "line": 72,
                "column": 16,
                "source": "return append(ciphertext, padtext...)",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCTR.go",
                  "line": 72,
                  "column": 9,
                  "source": "return append(ciphertext, padtext...)",
                  "relevantPart": "append",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 36,
                    "column": 17,
                    "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                    "relevantPart": "addPadding",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 36,
                      "column": 2,
                      "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                      "relevantPart": "secretBytes",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 49,
                        "column": 36,
                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                        "relevantPart": "secretBytes",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 87,
                          "column": 14,
                          "source": "func encrypt(secret, plainText []byte) []byte {",
                          "relevantPart": "secret",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 30,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "secret",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 88,
                              "column": 20,
                              "source": "block, err := aes.NewCipher(secret)",
                              "relevantPart": "NewCipher",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 88,
                                "column": 2,
                                "source": "block, err := aes.NewCipher(secret)",
                                "relevantPart": "block",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 31,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "block",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 92,
                                    "column": 24,
                                    "source": "aesGCM, err := cipher.NewGCM(block)",
                                    "relevantPart": "NewGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 92,
                                      "column": 2,
                                      "source": "aesGCM, err := cipher.NewGCM(block)",
                                      "relevantPart": "aesGCM",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 16,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "aesGCM",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 97,
                                          "column": 23,
                                          "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                          "relevantPart": "Seal",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 97,
                                            "column": 2,
                                            "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                            "relevantPart": "cipherText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 98,
                                              "column": 9,
                                              "source": "return cipherText",
                                              "relevantPart": "cipherText",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 49,
                                                "column": 28,
                                                "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                "relevantPart": "encrypt",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 49,
                                                  "column": 4,
                                                  "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                  "relevantPart": "cipherTextLine",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 59,
                                                    "column": 23,
                                                    "source": "for _, line := range cipherTextLine {",
                                                    "relevantPart": "cipherTextLine",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 59,
                                                      "column": 17,
                                                      "source": "for _, line := range cipherTextLine {",
                                                      "relevantPart": "line",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 53,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "line",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 62,
                                                          "column": 37,
                                                          "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                          "relevantPart": "Sprintf",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 62,
                                                            "column": 21,
                                                            "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                            "relevantPart": "WriteString"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 116,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 64,
          "column": 17,
          "source": "func addPadding(ciphertext []byte, blockSize int) []byte {",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCBC_IV.go",
            "line": 66,
            "column": 9,
            "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCBC_IV.go",
              "line": 66,
              "column": 36,
              "source": "if len(ciphertext)%16 != 0 && len(ciphertext) != 24 {",
              "relevantPart": "ciphertext",
              "calls": {
                "location": "Code/Go/predictableCBC_IV.go",
                "line": 71,
                "column": 16,
                "source": "return append(ciphertext, padtext...)",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/Go/predictableCBC_IV.go",
                  "line": 71,
                  "column": 9,
                  "source": "return append(ciphertext, padtext...)",
                  "relevantPart": "append",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 36,
                    "column": 17,
                    "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                    "relevantPart": "addPadding",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 36,
                      "column": 2,
                      "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                      "relevantPart": "secretBytes",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 49,
                        "column": 36,
                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                        "relevantPart": "secretBytes",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 87,
                          "column": 14,
                          "source": "func encrypt(secret, plainText []byte) []byte {",
                          "relevantPart": "secret",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 30,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "secret",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 88,
                              "column": 20,
                              "source": "block, err := aes.NewCipher(secret)",
                              "relevantPart": "NewCipher",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 88,
                                "column": 2,
                                "source": "block, err := aes.NewCipher(secret)",
                                "relevantPart": "block",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 31,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "block",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 92,
                                    "column": 24,
                                    "source": "aesGCM, err := cipher.NewGCM(block)",
                                    "relevantPart": "NewGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 92,
                                      "column": 2,
                                      "source": "aesGCM, err := cipher.NewGCM(block)",
                                      "relevantPart": "aesGCM",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 16,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "aesGCM",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 97,
                                          "column": 23,
                                          "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                          "relevantPart": "Seal",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 97,
                                            "column": 2,
                                            "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                            "relevantPart": "cipherText",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 98,
                                              "column": 9,
                                              "source": "return cipherText",
                                              "relevantPart": "cipherText",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 49,
                                                "column": 28,
                                                "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                "relevantPart": "encrypt",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 49,
                                                  "column": 4,
                                                  "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                                  "relevantPart": "cipherTextLine",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 59,
                                                    "column": 23,
                                                    "source": "for _, line := range cipherTextLine {",
                                                    "relevantPart": "cipherTextLine",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 59,
                                                      "column": 17,
                                                      "source": "for _, line := range cipherTextLine {",
                                                      "relevantPart": "line",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 53,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "line",
                                                        "calls": {
                                                          "location": "Code/Go/sameNonce_GCM.go",
                                                          "line": 62,
                                                          "column": 37,
                                                          "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                          "relevantPart": "Sprintf",
                                                          "calls": {
                                                            "location": "Code/Go/sameNonce_GCM.go",
                                                            "line": 62,
                                                            "column": 21,
                                                            "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                            "relevantPart": "WriteString"
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 117,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 132,
          "column": 30,
          "source": "padding = (blockSize - len(cipherText)%blockSize)",
          "relevantPart": "cipherText",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 136,
            "column": 16,
            "source": "return append(cipherText, padText...)",
            "relevantPart": "cipherText",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 136,
              "column": 9,
              "source": "return append(cipherText, padText...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 118,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCTR.go",
          "line": 68,
          "column": 30,
          "source": "padding = (blockSize - len(ciphertext)%blockSize)",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCTR.go",
            "line": 72,
            "column": 16,
            "source": "return append(ciphertext, padtext...)",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCTR.go",
              "line": 72,
              "column": 9,
              "source": "return append(ciphertext, padtext...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 119,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 67,
          "column": 30,
          "source": "padding = (blockSize - len(ciphertext)%blockSize)",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/Go/predictableCBC_IV.go",
            "line": 71,
            "column": 16,
            "source": "return append(ciphertext, padtext...)",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/Go/predictableCBC_IV.go",
              "line": 71,
              "column": 9,
              "source": "return append(ciphertext, padtext...)",
              "relevantPart": "append",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 36,
                "column": 17,
                "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                "relevantPart": "addPadding",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 36,
                  "column": 2,
                  "source": "secretBytes := addPadding([]byte(secret), aes.BlockSize)",
                  "relevantPart": "secretBytes",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 49,
                    "column": 36,
                    "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                    "relevantPart": "secretBytes",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 87,
                      "column": 14,
                      "source": "func encrypt(secret, plainText []byte) []byte {",
                      "relevantPart": "secret",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 88,
                        "column": 30,
                        "source": "block, err := aes.NewCipher(secret)",
                        "relevantPart": "secret",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 88,
                          "column": 20,
                          "source": "block, err := aes.NewCipher(secret)",
                          "relevantPart": "NewCipher",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 88,
                            "column": 2,
                            "source": "block, err := aes.NewCipher(secret)",
                            "relevantPart": "block",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 92,
                              "column": 31,
                              "source": "aesGCM, err := cipher.NewGCM(block)",
                              "relevantPart": "block",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 92,
                                "column": 24,
                                "source": "aesGCM, err := cipher.NewGCM(block)",
                                "relevantPart": "NewGCM",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 92,
                                  "column": 2,
                                  "source": "aesGCM, err := cipher.NewGCM(block)",
                                  "relevantPart": "aesGCM",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 97,
                                    "column": 16,
                                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                    "relevantPart": "aesGCM",
                                    "calls": {
                                      "location": "Code/Go/sameNonce_GCM.go",
                                      "line": 97,
                                      "column": 23,
                                      "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                      "relevantPart": "Seal",
                                      "calls": {
                                        "location": "Code/Go/sameNonce_GCM.go",
                                        "line": 97,
                                        "column": 2,
                                        "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                                        "relevantPart": "cipherText",
                                        "calls": {
                                          "location": "Code/Go/sameNonce_GCM.go",
                                          "line": 98,
                                          "column": 9,
                                          "source": "return cipherText",
                                          "relevantPart": "cipherText",
                                          "calls": {
                                            "location": "Code/Go/sameNonce_GCM.go",
                                            "line": 49,
                                            "column": 28,
                                            "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                            "relevantPart": "encrypt",
                                            "calls": {
                                              "location": "Code/Go/sameNonce_GCM.go",
                                              "line": 49,
                                              "column": 4,
                                              "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                                              "relevantPart": "cipherTextLine",
                                              "calls": {
                                                "location": "Code/Go/sameNonce_GCM.go",
                                                "line": 59,
                                                "column": 23,
                                                "source": "for _, line := range cipherTextLine {",
                                                "relevantPart": "cipherTextLine",
                                                "calls": {
                                                  "location": "Code/Go/sameNonce_GCM.go",
                                                  "line": 59,
                                                  "column": 17,
                                                  "source": "for _, line := range cipherTextLine {",
                                                  "relevantPart": "line",
                                                  "calls": {
                                                    "location": "Code/Go/sameNonce_GCM.go",
                                                    "line": 62,
                                                    "column": 53,
                                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                    "relevantPart": "line",
                                                    "calls": {
                                                      "location": "Code/Go/sameNonce_GCM.go",
                                                      "line": 62,
                                                      "column": 37,
                                                      "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                      "relevantPart": "Sprintf",
                                                      "calls": {
                                                        "location": "Code/Go/sameNonce_GCM.go",
                                                        "line": 62,
                                                        "column": 21,
                                                        "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                                        "relevantPart": "WriteString"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 120,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 92,
          "column": 17,
          "source": "aesGCM, err := cipher.NewGCM(block)",
          "relevantPart": "crypto/cipher",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 92,
            "column": 24,
            "source": "aesGCM, err := cipher.NewGCM(block)",
            "relevantPart": "NewGCM",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 92,
              "column": 2,
              "source": "aesGCM, err := cipher.NewGCM(block)",
              "relevantPart": "aesGCM",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 97,
                "column": 16,
                "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                "relevantPart": "aesGCM",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 97,
                  "column": 23,
                  "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                  "relevantPart": "Seal",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 97,
                    "column": 2,
                    "source": "cipherText := aesGCM.Seal(nil, nonce, plainText, nil) // Weakness: CWE-1204: Generation of Weak Initialization Vector (IV)",
                    "relevantPart": "cipherText",
                    "calls": {
                      "location": "Code/Go/sameNonce_GCM.go",
                      "line": 98,
                      "column": 9,
                      "source": "return cipherText",
                      "relevantPart": "cipherText",
                      "calls": {
                        "location": "Code/Go/sameNonce_GCM.go",
                        "line": 49,
                        "column": 28,
                        "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                        "relevantPart": "encrypt",
                        "calls": {
                          "location": "Code/Go/sameNonce_GCM.go",
                          "line": 49,
                          "column": 4,
                          "source": "cipherTextLine[index] = encrypt(secretBytes, line)",
                          "relevantPart": "cipherTextLine",
                          "calls": {
                            "location": "Code/Go/sameNonce_GCM.go",
                            "line": 59,
                            "column": 23,
                            "source": "for _, line := range cipherTextLine {",
                            "relevantPart": "cipherTextLine",
                            "calls": {
                              "location": "Code/Go/sameNonce_GCM.go",
                              "line": 59,
                              "column": 17,
                              "source": "for _, line := range cipherTextLine {",
                              "relevantPart": "line",
                              "calls": {
                                "location": "Code/Go/sameNonce_GCM.go",
                                "line": 62,
                                "column": 53,
                                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                "relevantPart": "line",
                                "calls": {
                                  "location": "Code/Go/sameNonce_GCM.go",
                                  "line": 62,
                                  "column": 37,
                                  "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                  "relevantPart": "Sprintf",
                                  "calls": {
                                    "location": "Code/Go/sameNonce_GCM.go",
                                    "line": 62,
                                    "column": 21,
                                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                                    "relevantPart": "WriteString"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 121,
        "name": "Insecure Credential Storage Mechanism",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 45,
          "column": 2,
          "source": "cipherTextLine := make([][]byte, len(content))",
          "relevantPart": "cipherTextLine",
          "calls": {
            "location": "Code/Go/sameNonce_GCM.go",
            "line": 59,
            "column": 23,
            "source": "for _, line := range cipherTextLine {",
            "relevantPart": "cipherTextLine",
            "calls": {
              "location": "Code/Go/sameNonce_GCM.go",
              "line": 59,
              "column": 17,
              "source": "for _, line := range cipherTextLine {",
              "relevantPart": "line",
              "calls": {
                "location": "Code/Go/sameNonce_GCM.go",
                "line": 62,
                "column": 53,
                "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                "relevantPart": "line",
                "calls": {
                  "location": "Code/Go/sameNonce_GCM.go",
                  "line": 62,
                  "column": 37,
                  "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                  "relevantPart": "Sprintf",
                  "calls": {
                    "location": "Code/Go/sameNonce_GCM.go",
                    "line": 62,
                    "column": 21,
                    "source": "_, err = outFile.WriteString(fmt.Sprintf(\"%x\\n\", line))",
                    "relevantPart": "WriteString"
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 522
      },
      {
        "id": 169,
        "name": "Hardcoded Password in Connection String",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sql_injection.go",
          "line": 12,
          "column": 36,
          "source": "db, err := sql.Open(\"sqlite3\", \":memory:\")",
          "relevantPart": "\":memory:\""
        },
        "type": "codeScan",
        "cweId": 547
      },
      {
        "id": 170,
        "name": "Improper Restriction of XXE Ref",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
          "line": 8,
          "column": 16,
          "source": "FILENAME = sys.argv[1] if len(sys.argv) > 1 else \"/etc/passwd\"",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
            "line": 8,
            "column": 1,
            "source": "FILENAME = sys.argv[1] if len(sys.argv) > 1 else \"/etc/passwd\"",
            "relevantPart": "FILENAME",
            "calls": {
              "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
              "line": 9,
              "column": 38,
              "source": "payload = get_payload_file_expansion(FILENAME)",
              "relevantPart": "FILENAME",
              "calls": {
                "location": "Code/Python/Python3/xml_vulnerabilities/payloads/external_entity_expansion.py",
                "line": 2,
                "column": 32,
                "source": "def get_payload_file_expansion(filename):",
                "relevantPart": "filename",
                "calls": {
                  "location": "Code/Python/Python3/xml_vulnerabilities/payloads/external_entity_expansion.py",
                  "line": 3,
                  "column": 55,
                  "source": "return  f'<!DOCTYPE d [<!ENTITY e SYSTEM \"file://{filename}\">]><t>&e;</t>'",
                  "relevantPart": "filename",
                  "calls": {
                    "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
                    "line": 9,
                    "column": 11,
                    "source": "payload = get_payload_file_expansion(FILENAME)",
                    "relevantPart": "get_payload_file_expansion",
                    "calls": {
                      "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
                      "line": 9,
                      "column": 1,
                      "source": "payload = get_payload_file_expansion(FILENAME)",
                      "relevantPart": "payload",
                      "calls": {
                        "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
                        "line": 12,
                        "column": 23,
                        "source": "minidom = parseString(payload) # Weakness: Improper Restriction of XML External Entity Reference; CWE-611",
                        "relevantPart": "payload",
                        "calls": {
                          "location": "Code/Python/Python3/xml_vulnerabilities/external_entity_expansion_minidom.py",
                          "line": 12,
                          "column": 11,
                          "source": "minidom = parseString(payload) # Weakness: Improper Restriction of XML External Entity Reference; CWE-611",
                          "relevantPart": "parseString"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 611
      },
      {
        "id": 27,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 43,
          "column": 2,
          "source": "fmt.Scanln(&password)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 28,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 40,
          "column": 2,
          "source": "fmt.Scanln(&username)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 29,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 25,
          "column": 3,
          "source": "fmt.Scanln(&loginPass)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 30,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 20,
          "column": 2,
          "source": "fmt.Scan(&choice)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 31,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 43,
          "column": 2,
          "source": "fmt.Scanln(&password)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 32,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 40,
          "column": 2,
          "source": "fmt.Scanln(&username)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 33,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 25,
          "column": 3,
          "source": "fmt.Scanln(&loginPass)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 34,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 20,
          "column": 2,
          "source": "fmt.Scan(&choice)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 35,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/vuln-qt-go/main.go",
          "line": 218,
          "column": 3,
          "source": "db.Close()"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 36,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/vuln-qt-go/main.go",
          "line": 172,
          "column": 2,
          "source": "numRowsQuery.Scan(&numRows)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 37,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/vuln-qt-go/main.go",
          "line": 168,
          "column": 2,
          "source": "db.Begin()"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 38,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 69,
          "column": 2,
          "source": "outFile.Close()"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 39,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 113,
          "column": 3,
          "source": "csvWriter.Write([]string{rowValue})"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 40,
        "description": "Errors unhandled.",
        "name": "Errors unhandled.",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 41,
          "column": 3,
          "source": "writeCSV(\"out.csv\", cipherTexts)"
        },
        "type": "codeScan",
        "cweId": 703
      },
      {
        "id": 164,
        "name": "Use of a One Way Hash without a Salt",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Java/Sha1.java",
          "line": 10,
          "column": 22,
          "source": "sha1Digest.update(password.getBytes());",
          "relevantPart": "password",
          "calls": {
            "location": "Code/Java/Sha1.java",
            "line": 10,
            "column": 39,
            "source": "sha1Digest.update(password.getBytes());",
            "relevantPart": "getBytes",
            "calls": {
              "location": "Code/Java/Sha1.java",
              "line": 10,
              "column": 4,
              "source": "sha1Digest.update(password.getBytes());",
              "relevantPart": "sha1Digest",
              "calls": {
                "location": "Code/Java/Sha1.java",
                "line": 11,
                "column": 23,
                "source": "byte[] hashValue = sha1Digest.digest();",
                "relevantPart": "sha1Digest",
                "calls": {
                  "location": "Code/Java/Sha1.java",
                  "line": 11,
                  "column": 40,
                  "source": "byte[] hashValue = sha1Digest.digest();",
                  "relevantPart": "digest"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 759
      },
      {
        "id": 165,
        "name": "Use of a One Way Hash without a Salt",
        "severity": "MEDIUM",
        "code": {
          "location": "Code/Java/MD5.java",
          "line": 10,
          "column": 22,
          "source": "sha1Digest.update(password.getBytes());",
          "relevantPart": "password",
          "calls": {
            "location": "Code/Java/MD5.java",
            "line": 10,
            "column": 39,
            "source": "sha1Digest.update(password.getBytes());",
            "relevantPart": "getBytes",
            "calls": {
              "location": "Code/Java/MD5.java",
              "line": 10,
              "column": 4,
              "source": "sha1Digest.update(password.getBytes());",
              "relevantPart": "sha1Digest",
              "calls": {
                "location": "Code/Java/MD5.java",
                "line": 11,
                "column": 23,
                "source": "byte[] hashValue = sha1Digest.digest();",
                "relevantPart": "sha1Digest",
                "calls": {
                  "location": "Code/Java/MD5.java",
                  "line": 11,
                  "column": 40,
                  "source": "byte[] hashValue = sha1Digest.digest();",
                  "relevantPart": "digest"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 759
      },
      {
        "id": 247,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/os_command_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/os_command_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python2/os_command_injection.py",
              "line": 8,
              "column": 24,
              "source": "command = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python2/os_command_injection.py",
                "line": 8,
                "column": 19,
                "source": "command = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python2/os_command_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "command = ' '.join(args)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Python/Python2/os_command_injection.py",
                    "line": 10,
                    "column": 15,
                    "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/Python/Python2/os_command_injection.py",
                      "line": 10,
                      "column": 8,
                      "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                      "relevantPart": "system"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 248,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/os_command_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/os_command_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/os_command_injection.py",
              "line": 8,
              "column": 24,
              "source": "command = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/os_command_injection.py",
                "line": 8,
                "column": 19,
                "source": "command = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/os_command_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "command = ' '.join(args)",
                  "relevantPart": "command",
                  "calls": {
                    "location": "Code/Python/Python3/os_command_injection.py",
                    "line": 10,
                    "column": 15,
                    "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                    "relevantPart": "command",
                    "calls": {
                      "location": "Code/Python/Python3/os_command_injection.py",
                      "line": 10,
                      "column": 8,
                      "source": "os.system(command) # Weakness: OS command injection; CWE-78",
                      "relevantPart": "system"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 249,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/argument_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/argument_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/argument_injection.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/argument_injection.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/argument_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python3/argument_injection.py",
                    "line": 9,
                    "column": 30,
                    "source": "command = \"ls {}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python3/argument_injection.py",
                      "line": 9,
                      "column": 23,
                      "source": "command = \"ls {}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python3/argument_injection.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"ls {}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python3/argument_injection.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: argument injection; CWE-88",
                          "relevantPart": "command",
                          "calls": {
                            "location": "Code/Python/Python3/argument_injection.py",
                            "line": 11,
                            "column": 8,
                            "source": "os.system(command) # Weakness: argument injection; CWE-88",
                            "relevantPart": "system"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 250,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/argument_injection.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python2/argument_injection.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python2/argument_injection.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python2/argument_injection.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python2/argument_injection.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python2/argument_injection.py",
                    "line": 9,
                    "column": 30,
                    "source": "command = \"ls {}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python2/argument_injection.py",
                      "line": 9,
                      "column": 23,
                      "source": "command = \"ls {}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python2/argument_injection.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"ls {}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python2/argument_injection.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: argument injection; CWE-88",
                          "relevantPart": "command",
                          "calls": {
                            "location": "Code/Python/Python2/argument_injection.py",
                            "line": 11,
                            "column": 8,
                            "source": "os.system(command) # Weakness: argument injection; CWE-88",
                            "relevantPart": "system"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 251,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/path_traversal_relative.py",
          "line": 7,
          "column": 16,
          "source": "args = sys.argv[1:]",
          "relevantPart": "argv",
          "calls": {
            "location": "Code/Python/Python3/path_traversal_relative.py",
            "line": 7,
            "column": 5,
            "source": "args = sys.argv[1:]",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Python/Python3/path_traversal_relative.py",
              "line": 8,
              "column": 26,
              "source": "arguments = ' '.join(args)",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Python/Python3/path_traversal_relative.py",
                "line": 8,
                "column": 21,
                "source": "arguments = ' '.join(args)",
                "relevantPart": "join",
                "calls": {
                  "location": "Code/Python/Python3/path_traversal_relative.py",
                  "line": 8,
                  "column": 5,
                  "source": "arguments = ' '.join(args)",
                  "relevantPart": "arguments",
                  "calls": {
                    "location": "Code/Python/Python3/path_traversal_relative.py",
                    "line": 9,
                    "column": 33,
                    "source": "command = \"cat ./{}\".format(arguments)",
                    "relevantPart": "arguments",
                    "calls": {
                      "location": "Code/Python/Python3/path_traversal_relative.py",
                      "line": 9,
                      "column": 26,
                      "source": "command = \"cat ./{}\".format(arguments)",
                      "relevantPart": "format",
                      "calls": {
                        "location": "Code/Python/Python3/path_traversal_relative.py",
                        "line": 9,
                        "column": 5,
                        "source": "command = \"cat ./{}\".format(arguments)",
                        "relevantPart": "command",
                        "calls": {
                          "location": "Code/Python/Python3/path_traversal_relative.py",
                          "line": 11,
                          "column": 15,
                          "source": "os.system(command) # Weakness: path traversal; CWE-22",
                          "relevantPart": "command",
                          "calls": {
                            "location": "Code/Python/Python3/path_traversal_relative.py",
                            "line": 11,
                            "column": 8,
                            "source": "os.system(command) # Weakness: path traversal; CWE-22",
                            "relevantPart": "system"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 265,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/argumentInjection.go",
          "line": 22,
          "column": 12,
          "source": "dir := os.Args[1:]",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/argumentInjection.go",
            "line": 22,
            "column": 2,
            "source": "dir := os.Args[1:]",
            "relevantPart": "dir",
            "calls": {
              "location": "Code/Go/argumentInjection.go",
              "line": 26,
              "column": 28,
              "source": "cmd := exec.Command(\"ls\", dir...) // Weakness: CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
              "relevantPart": "dir",
              "calls": {
                "location": "Code/Go/argumentInjection.go",
                "line": 26,
                "column": 14,
                "source": "cmd := exec.Command(\"ls\", dir...) // Weakness: CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
                "relevantPart": "Command",
                "calls": {
                  "location": "Code/Go/argumentInjection.go",
                  "line": 26,
                  "column": 2,
                  "source": "cmd := exec.Command(\"ls\", dir...) // Weakness: CWE-88: Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
                  "relevantPart": "cmd",
                  "calls": {
                    "location": "Code/Go/argumentInjection.go",
                    "line": 27,
                    "column": 14,
                    "source": "out, err := cmd.Output()",
                    "relevantPart": "cmd",
                    "calls": {
                      "location": "Code/Go/argumentInjection.go",
                      "line": 27,
                      "column": 18,
                      "source": "out, err := cmd.Output()",
                      "relevantPart": "Output"
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 266,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/improperLimitation.go",
          "line": 13,
          "column": 13,
          "source": "args := os.Args",
          "relevantPart": "Args",
          "calls": {
            "location": "Code/Go/improperLimitation.go",
            "line": 13,
            "column": 2,
            "source": "args := os.Args",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Go/improperLimitation.go",
              "line": 14,
              "column": 9,
              "source": "if len(args) < 2 {",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Go/improperLimitation.go",
                "line": 27,
                "column": 59,
                "source": "homeDir := \"/home/\" + string(user[:len(user)-1]) + \"/\" + args[1] // Here the malicious input is passed",
                "relevantPart": "args",
                "calls": {
                  "location": "Code/Go/improperLimitation.go",
                  "line": 27,
                  "column": 2,
                  "source": "homeDir := \"/home/\" + string(user[:len(user)-1]) + \"/\" + args[1] // Here the malicious input is passed",
                  "relevantPart": "homeDir",
                  "calls": {
                    "location": "Code/Go/improperLimitation.go",
                    "line": 31,
                    "column": 38,
                    "source": "output, err := exec.Command(\"cat\", homeDir).Output() // Execute cat with the malicious input",
                    "relevantPart": "homeDir",
                    "calls": {
                      "location": "Code/Go/improperLimitation.go",
                      "line": 31,
                      "column": 23,
                      "source": "output, err := exec.Command(\"cat\", homeDir).Output() // Execute cat with the malicious input",
                      "relevantPart": "Command",
                      "calls": {
                        "location": "Code/Go/improperLimitation.go",
                        "line": 31,
                        "column": 47,
                        "source": "output, err := exec.Command(\"cat\", homeDir).Output() // Execute cat with the malicious input",
                        "relevantPart": "Output"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 273,
        "name": "Stored Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
          "line": 17,
          "column": 33,
          "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
          "relevantPart": "load",
          "calls": {
            "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
            "line": 17,
            "column": 9,
            "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
            "relevantPart": "system_command",
            "calls": {
              "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
              "line": 18,
              "column": 19,
              "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
              "relevantPart": "system_command",
              "calls": {
                "location": "Code/Python/Python3/deserialization_of_untrusted_data.py",
                "line": 18,
                "column": 12,
                "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
                "relevantPart": "system"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 274,
        "name": "Stored Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
          "line": 17,
          "column": 33,
          "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
          "relevantPart": "load",
          "calls": {
            "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
            "line": 17,
            "column": 9,
            "source": "system_command = pickle.load(open(file_name, \"rb\")) # Weakness: deserializing untrusted data; CWE-502",
            "relevantPart": "system_command",
            "calls": {
              "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
              "line": 18,
              "column": 19,
              "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
              "relevantPart": "system_command",
              "calls": {
                "location": "Code/Python/Python2/deserialization_of_untrusted_data.py",
                "line": 18,
                "column": 12,
                "source": "os.system(system_command) # Weakness: using untrusted data for an operating system command injection; CWE-78",
                "relevantPart": "system"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 283,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Scala/CommandInjection.scala",
          "line": 3,
          "column": 14,
          "source": "def main(args: Array[String]): Unit = {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Scala/CommandInjection.scala",
            "line": 6,
            "column": 45,
            "source": "var command = \"bash -c \\\"ls \" + args(0) +\"\\\"\" ",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Scala/CommandInjection.scala",
              "line": 6,
              "column": 45,
              "source": "var command = \"bash -c \\\"ls \" + args(0) +\"\\\"\" ",
              "relevantPart": "args",
              "calls": {
                "location": "Code/Scala/CommandInjection.scala",
                "line": 6,
                "column": 17,
                "source": "var command = \"bash -c \\\"ls \" + args(0) +\"\\\"\" ",
                "relevantPart": "command",
                "calls": {
                  "location": "Code/Scala/CommandInjection.scala",
                  "line": 8,
                  "column": 26,
                  "source": "var output = command.!! //Weakness: CWE-77 Improper Neutralization of Special Elements used in a Command",
                  "relevantPart": "command"
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 285,
        "name": "Command Argument Injection",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/CommandInjection.java",
          "line": 15,
          "column": 38,
          "source": "public static void main(String[] args) throws IOException {",
          "relevantPart": "args",
          "calls": {
            "location": "Code/Java/CommandInjection.java",
            "line": 21,
            "column": 34,
            "source": "commands.add(\"ls \" + args[0]);",
            "relevantPart": "args",
            "calls": {
              "location": "Code/Java/CommandInjection.java",
              "line": 21,
              "column": 25,
              "source": "commands.add(\"ls \" + args[0]);",
              "relevantPart": "add",
              "calls": {
                "location": "Code/Java/CommandInjection.java",
                "line": 21,
                "column": 13,
                "source": "commands.add(\"ls \" + args[0]);",
                "relevantPart": "commands",
                "calls": {
                  "location": "Code/Java/CommandInjection.java",
                  "line": 23,
                  "column": 51,
                  "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                  "relevantPart": "commands",
                  "calls": {
                    "location": "Code/Java/CommandInjection.java",
                    "line": 23,
                    "column": 32,
                    "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                    "relevantPart": "ProcessBuilder",
                    "calls": {
                      "location": "Code/Java/CommandInjection.java",
                      "line": 24,
                      "column": 41,
                      "source": ".redirectErrorStream(true)",
                      "relevantPart": "redirectErrorStream",
                      "calls": {
                        "location": "Code/Java/CommandInjection.java",
                        "line": 25,
                        "column": 36,
                        "source": ".redirectOutput(ProcessBuilder.Redirect.INHERIT);",
                        "relevantPart": "redirectOutput",
                        "calls": {
                          "location": "Code/Java/CommandInjection.java",
                          "line": 23,
                          "column": 28,
                          "source": "ProcessBuilder p = new ProcessBuilder(commands)",
                          "relevantPart": "p",
                          "calls": {
                            "location": "Code/Java/CommandInjection.java",
                            "line": 27,
                            "column": 46,
                            "source": "System.out.println(\"COMMAND: \" + p.command());",
                            "relevantPart": "p",
                            "calls": {
                              "location": "Code/Java/CommandInjection.java",
                              "line": 29,
                              "column": 13,
                              "source": "p.start(); // CWE-77: Improper Neutralization of Special Elements used in a Command",
                              "relevantPart": "p",
                              "calls": {
                                "location": "Code/Java/CommandInjection.java",
                                "line": 29,
                                "column": 20,
                                "source": "p.start(); // CWE-77: Improper Neutralization of Special Elements used in a Command",
                                "relevantPart": "start"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 88
      },
      {
        "id": 262,
        "name": "Use Of raw",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
          "line": 4,
          "column": 300,
          "source": "<h4><%= raw(@message.title) %></h4>",
          "relevantPart": "raw"
        },
        "type": "codeScan",
        "cweId": 116
      },
      {
        "id": 263,
        "name": "Use Of raw",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/show.html.erb",
          "line": 5,
          "column": 300,
          "source": "<p><%= raw(@message.text) %></p>",
          "relevantPart": "raw"
        },
        "type": "codeScan",
        "cweId": 116
      },
      {
        "id": 264,
        "name": "Use Of raw",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/views/messages/index.html.erb",
          "line": 5,
          "column": 300,
          "source": "<li><%= link_to raw(message.title), message_path(message) %></li>",
          "relevantPart": "raw"
        },
        "type": "codeScan",
        "cweId": 116
      },
      {
        "id": 221,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/Sha1.java",
          "line": 14,
          "column": 37,
          "source": "} catch (NoSuchAlgorithmException e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/Sha1.java",
            "line": 15,
            "column": 4,
            "source": "e.printStackTrace();",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/Sha1.java",
              "line": 15,
              "column": 21,
              "source": "e.printStackTrace();",
              "relevantPart": "printStackTrace"
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 222,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/MD5.java",
          "line": 14,
          "column": 37,
          "source": "} catch (NoSuchAlgorithmException e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/MD5.java",
            "line": 15,
            "column": 4,
            "source": "e.printStackTrace();",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/MD5.java",
              "line": 15,
              "column": 21,
              "source": "e.printStackTrace();",
              "relevantPart": "printStackTrace"
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 223,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/DigestThreads.java",
          "line": 48,
          "column": 43,
          "source": "} catch (NoSuchAlgorithmException ex) {",
          "relevantPart": "ex",
          "calls": {
            "location": "Code/Java/DigestThreads.java",
            "line": 49,
            "column": 13,
            "source": "ex.printStackTrace();",
            "relevantPart": "ex",
            "calls": {
              "location": "Code/Java/DigestThreads.java",
              "line": 49,
              "column": 31,
              "source": "ex.printStackTrace();",
              "relevantPart": "printStackTrace"
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 224,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/DigestThreads.java",
          "line": 50,
          "column": 28,
          "source": "} catch (Exception e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/DigestThreads.java",
            "line": 51,
            "column": 13,
            "source": "e.printStackTrace();",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/DigestThreads.java",
              "line": 51,
              "column": 30,
              "source": "e.printStackTrace();",
              "relevantPart": "printStackTrace"
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 225,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/DigestThreads.java",
          "line": 92,
          "column": 39,
          "source": "} catch (InterruptedException iex) {",
          "relevantPart": "iex",
          "calls": {
            "location": "Code/Java/DigestThreads.java",
            "line": 93,
            "column": 13,
            "source": "iex.printStackTrace();",
            "relevantPart": "iex",
            "calls": {
              "location": "Code/Java/DigestThreads.java",
              "line": 93,
              "column": 32,
              "source": "iex.printStackTrace();",
              "relevantPart": "printStackTrace"
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 226,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
          "line": 30,
          "column": 31,
          "source": "} catch (SQLException e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
            "line": 31,
            "column": 32,
            "source": "System.out.println(e.getMessage());",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
              "line": 31,
              "column": 44,
              "source": "System.out.println(e.getMessage());",
              "relevantPart": "getMessage",
              "calls": {
                "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                "line": 31,
                "column": 31,
                "source": "System.out.println(e.getMessage());",
                "relevantPart": "println"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 227,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
          "line": 45,
          "column": 31,
          "source": "} catch (SQLException e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
            "line": 47,
            "column": 32,
            "source": "System.out.println(e.getMessage());",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
              "line": 47,
              "column": 44,
              "source": "System.out.println(e.getMessage());",
              "relevantPart": "getMessage",
              "calls": {
                "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                "line": 47,
                "column": 31,
                "source": "System.out.println(e.getMessage());",
                "relevantPart": "println"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 228,
        "name": "Information Exposure Through an Error Message",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
          "line": 74,
          "column": 31,
          "source": "} catch (SQLException e) {",
          "relevantPart": "e",
          "calls": {
            "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
            "line": 76,
            "column": 32,
            "source": "System.out.println(e.getMessage());",
            "relevantPart": "e",
            "calls": {
              "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
              "line": 76,
              "column": 44,
              "source": "System.out.println(e.getMessage());",
              "relevantPart": "getMessage",
              "calls": {
                "location": "Code/Java/SQLInjection/app/src/main/java/sqlinjection/SQLinjection.java",
                "line": 76,
                "column": 31,
                "source": "System.out.println(e.getMessage());",
                "relevantPart": "println"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 209
      },
      {
        "id": 291,
        "name": "Use Of Unsafe Package",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/bufferCopy.go",
          "line": 5,
          "column": 2,
          "source": "\"unsafe\"",
          "relevantPart": "\"unsafe\""
        },
        "type": "codeScan",
        "cweId": 242
      },
      {
        "id": 229,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
          "line": 27,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 230,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
          "line": 29,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 231,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
          "line": 27,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 232,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 9,
          "column": 8,
          "source": "auto cipher =  Botan::Cipher_Mode::create(algorithm, Botan::Cipher_Dir::ENCRYPTION);",
          "relevantPart": "cipher"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 233,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 21,
          "column": 30,
          "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 234,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 25,
          "column": 8,
          "source": "auto cipher =  Botan::Cipher_Mode::create(algorithm, Botan::Cipher_Dir::DECRYPTION);",
          "relevantPart": "cipher"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 293,
        "name": "Heap Inspection",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/WeaklyEncodedKey.java",
          "line": 18,
          "column": 16,
          "source": "String pass = new String(Base64.getDecoder().decode(bufferedReader.readLine())); // Weakness: CWE-261: Weak Encoding for Password",
          "relevantPart": "pass"
        },
        "type": "codeScan",
        "cweId": 244
      },
      {
        "id": 178,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 41,
          "column": 3,
          "source": "writeCSV(\"out.csv\", cipherTexts)",
          "relevantPart": "ExprStmt"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 179,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/predictableCBC_IV.go",
          "line": 45,
          "column": 9,
          "source": "block, _ := aes.NewCipher(secretBytes)",
          "relevantPart": "_"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 180,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/predictableCTR.go",
          "line": 57,
          "column": 9,
          "source": "block, _ := aes.NewCipher(secret)",
          "relevantPart": "_"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 181,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/deserialize.go",
          "line": 22,
          "column": 3,
          "source": "panic(\"Error serializing object\")",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 182,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/deserialize.go",
          "line": 42,
          "column": 3,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 183,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 56,
          "column": 3,
          "source": "panic(\"Could not create file: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 184,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 65,
          "column": 4,
          "source": "panic(\"Couldn't write line to file: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 185,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 78,
          "column": 4,
          "source": "panic(\"Could not read cipher line: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 186,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 90,
          "column": 3,
          "source": "panic(\"Could not create a block: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 187,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 94,
          "column": 3,
          "source": "panic(\"Cannot create a gcm block cipher: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 188,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 104,
          "column": 3,
          "source": "panic(\"Could not create a block: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 189,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 108,
          "column": 3,
          "source": "panic(\"Cannot create a gcm block cipher: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 190,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 112,
          "column": 3,
          "source": "panic(\"Could not decrypt cipher: \" + err.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 191,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sameNonce_GCM.go",
          "line": 122,
          "column": 3,
          "source": "panic(\"Could not read the file!\")",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 192,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sql_injection.go",
          "line": 14,
          "column": 9,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 193,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sql_injection.go",
          "line": 19,
          "column": 9,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 194,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakDES.go",
          "line": 14,
          "column": 3,
          "source": "panic(\"We have a problem: \" + error.Error())",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 195,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 36,
          "column": 4,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 196,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 49,
          "column": 4,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 197,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 54,
          "column": 4,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 198,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 89,
          "column": 3,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 199,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/ascon/asconMisuse.go",
          "line": 98,
          "column": 3,
          "source": "panic(err)",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 200,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/webAssembly/wasm/main.go",
          "line": 15,
          "column": 3,
          "source": "panic(\"Unable to get document object\")",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 201,
        "name": "Improper Error Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/webAssembly/wasm/main.go",
          "line": 46,
          "column": 4,
          "source": "panic(\"Could not convert numbers!\")",
          "relevantPart": "panic"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 267,
        "name": "Improper Exception Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 7,
          "column": 28,
          "source": "@message = Message.find(params[:id])",
          "relevantPart": "find"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 268,
        "name": "Improper Exception Handling",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 3,
          "column": 24,
          "source": "@messages = Message.all",
          "relevantPart": "all"
        },
        "type": "codeScan",
        "cweId": 248
      },
      {
        "id": 202,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/buffer_overflow.c",
          "line": 10,
          "column": 5,
          "source": "scanf(\"%s\", name); // CWE-120: in case the name is longer than NAME_LENGTH, a buffer overflow occurs.",
          "relevantPart": "scanf"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 203,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 29,
          "column": 9,
          "source": "sprintf(&hex_digest[i*2], \"%02x\", digest[i]);",
          "relevantPart": "sprintf"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 204,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/double_free.cpp",
          "line": 5,
          "column": 10,
          "source": "int* value = (int*)malloc(sizeof(int));",
          "relevantPart": "value"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 205,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
          "line": 27,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 206,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
          "line": 29,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 207,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
          "line": 27,
          "column": 10,
          "source": "auto ciphertext = encrypt(text, key, initializationVector, algorithm);",
          "relevantPart": "ciphertext"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 208,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/use_after_free.c",
          "line": 10,
          "column": 11,
          "source": "User* user = malloc(sizeof(*user));",
          "relevantPart": "user"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 209,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/double_free.c",
          "line": 10,
          "column": 11,
          "source": "User* user = malloc(sizeof(*user));",
          "relevantPart": "user"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 210,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/os_injection.cpp",
          "line": 14,
          "column": 5,
          "source": "command = (char *)malloc(commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 211,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 26,
          "column": 5,
          "source": "hex_digest = (char *)malloc(hex_digest_length);",
          "relevantPart": "hex_digest"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 212,
        "name": "Unchecked Return Value",
        "severity": "LOW",
        "code": {
          "location": "Code/C/os_injection.c",
          "line": 12,
          "column": 5,
          "source": "command = (char *) malloc(commandLength);",
          "relevantPart": "command"
        },
        "type": "codeScan",
        "cweId": 252
      },
      {
        "id": 213,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/hard_coded_password.py",
          "line": 23,
          "column": 16,
          "source": "password = \"password12\" # Weakness: using a hard-coded password; CWE-259",
          "relevantPart": "\"password12\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 214,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/hard_coded_password.py",
          "line": 11,
          "column": 25,
          "source": "expected_password = b\"password123\" # Weakness: using a hard-coded password; CWE-259",
          "relevantPart": "\"b\"password123\"\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 215,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/risky_crypto_md5.py",
          "line": 6,
          "column": 16,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 216,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/risky_crypto_sha1.py",
          "line": 6,
          "column": 16,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 217,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/hard_coded_password.py",
          "line": 23,
          "column": 16,
          "source": "password = \"password12\" # Weakness: using a hard-coded password; CWE-259",
          "relevantPart": "\"password12\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 218,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/hard_coded_password.py",
          "line": 11,
          "column": 25,
          "source": "expected_password = b\"password123\" # Weakness: using a hard-coded password; CWE-259",
          "relevantPart": "\"b\"password123\"\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 219,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/risky_crypto_md5.py",
          "line": 6,
          "column": 16,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 220,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/risky_crypto_sha1.py",
          "line": 6,
          "column": 16,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 269,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/PHP/risky_crypto_md5.php",
          "line": 11,
          "column": 18,
          "source": "$password = \"Insecure\"; # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 270,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/PHP/risky_crypto_sha1.php",
          "line": 11,
          "column": 18,
          "source": "$password = \"Insecure\"; # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 277,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/risky_crypto_sha1.rb",
          "line": 13,
          "column": 17,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 278,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/risky_crypto_md5.rb",
          "line": 13,
          "column": 17,
          "source": "password = \"Insecure\" # Weakness: could be detected as hard-coded password; CWE-259",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 284,
        "name": "Use of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Kotlin/RiskyCryptographicAlgorithm.kt",
          "line": 4,
          "column": 20,
          "source": "val password = \"Insecure\" // Warning: could be detected as hard-coded password",
          "relevantPart": "\"Insecure\""
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 289,
        "name": "Use of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Swift/vulnerable-vapor/Sources/App/Models/User.swift",
          "line": 9,
          "column": 16,
          "source": "static let kPassword : FieldKey = \"password\"",
          "relevantPart": "kPassword"
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 299,
        "name": "Use Of Hardcoded Password",
        "severity": "LOW",
        "code": {
          "location": "Code/Groovy/RiskyCryptographicAlgorithm.groovy",
          "line": 6,
          "column": 16,
          "source": "String password = \"Insecure\"; // Warning: could be detected as hard-coded password",
          "relevantPart": "password"
        },
        "type": "codeScan",
        "cweId": 259
      },
      {
        "id": 271,
        "name": "Improper Resource Access Authorization",
        "severity": "LOW",
        "code": {
          "location": "Code/C/format_string.c",
          "line": 10,
          "column": 9,
          "source": "fprintf(stderr, \"Please provide some input, to exploit for example: ./format_string.out %%s%%s%%s%%s%%s%%s \\n\");",
          "relevantPart": "fprintf"
        },
        "type": "codeScan",
        "cweId": 285
      },
      {
        "id": 272,
        "name": "Improper Resource Access Authorization",
        "severity": "LOW",
        "code": {
          "location": "Code/C/risky_crypto_sha1.c",
          "line": 37,
          "column": 9,
          "source": "fprintf(stderr, \"Please provide a password.\\n\");",
          "relevantPart": "fprintf"
        },
        "type": "codeScan",
        "cweId": 285
      },
      {
        "id": 279,
        "name": "Client Weak Cryptographic Hash",
        "severity": "LOW",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
          "line": 4,
          "column": 16,
          "source": "const hash = createHash(\"sha1\"); // Weakness: using SHA1 is Risky; CWE-327",
          "relevantPart": "createHash"
        },
        "type": "codeScan",
        "cweId": 310
      },
      {
        "id": 280,
        "name": "Client Weak Cryptographic Hash",
        "severity": "LOW",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
          "line": 4,
          "column": 16,
          "source": "const hash = createHash(\"md5\"); // Weakness: using MD5 is Risky; CWE-327",
          "relevantPart": "createHash"
        },
        "type": "codeScan",
        "cweId": 310
      },
      {
        "id": 286,
        "name": "Plain Text Transport Layer in Server",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/webAssembly/server/main.go",
          "line": 9,
          "column": 14,
          "source": "err := http.ListenAndServe(\"127.0.0.1:8080\", http.FileServer(http.Dir(\"../assets\")))",
          "relevantPart": "ListenAndServe"
        },
        "type": "codeScan",
        "cweId": 319
      },
      {
        "id": 297,
        "name": "Use Of HTTP Sensitive Data Exposure",
        "severity": "LOW",
        "code": {
          "location": "Code/JavaScript/Node/reflected_xss.js",
          "line": 7,
          "column": 19,
          "source": "let server = http.createServer(function (request, response) {",
          "relevantPart": "createServer"
        },
        "type": "codeScan",
        "cweId": 319
      },
      {
        "id": 235,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 26,
          "column": 30,
          "source": "hashedLoginPassword := md5.Sum([]byte(strings.TrimSpace(loginPass)))",
          "relevantPart": "Sum"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 236,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakMD5.go",
          "line": 51,
          "column": 23,
          "source": "hashedPassword = md5.Sum([]byte(strings.TrimSpace(password))) // Weakness CWE-328, CWE-759",
          "relevantPart": "Sum"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 237,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 26,
          "column": 31,
          "source": "hashedLoginPassword := sha1.Sum([]byte(strings.TrimSpace(loginPass)))",
          "relevantPart": "Sum"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 238,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakSha1.go",
          "line": 51,
          "column": 24,
          "source": "hashedPassword = sha1.Sum([]byte(strings.TrimSpace(password))) // Weakness CWE-328, CWE-759",
          "relevantPart": "Sum"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 239,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakRC4.go",
          "line": 15,
          "column": 4,
          "source": "c.XORKeyStream(data, data)",
          "relevantPart": "XORKeyStream"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 240,
        "name": "Use Of Broken Or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/weakRC4.go",
          "line": 20,
          "column": 15,
          "source": "cryptCipher2.XORKeyStream(data, data)\t",
          "relevantPart": "XORKeyStream"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 252,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/risky_crypto_md5.py",
          "line": 10,
          "column": 71,
          "source": "message = \"MD5\\t-> Value: {}; Hexdigest: {}\".format(password, md5.hexdigest())",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 253,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python2/risky_crypto_sha1.py",
          "line": 10,
          "column": 73,
          "source": "message = \"SHA1\\t-> Value: {}; Hexdigest: {}\".format(password, sha1.hexdigest())",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 254,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/risky_crypto_md5.py",
          "line": 10,
          "column": 71,
          "source": "message = \"MD5\\t-> Value: {}; Hexdigest: {}\".format(password, md5.hexdigest())",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 255,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Python/Python3/risky_crypto_sha1.py",
          "line": 10,
          "column": 73,
          "source": "message = \"SHA1\\t-> Value: {}; Hexdigest: {}\".format(password, sha1.hexdigest())",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 275,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/risky_crypto_sha1.rb",
          "line": 6,
          "column": 21,
          "source": "hexdigest = sha1.hexdigest",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 276,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/risky_crypto_md5.rb",
          "line": 6,
          "column": 20,
          "source": "hexdigest = md5.hexdigest",
          "relevantPart": "hexdigest"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 288,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Scala/RiskyCryptographicAlgorithmMd5.scala",
          "line": 6,
          "column": 35,
          "source": "val md5Digest = MessageDigest.getInstance(\"MD5\") // Weakness: using MD5 is risky; CWE-327",
          "relevantPart": "getInstance"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 300,
        "name": "Use of Broken or Risky Cryptographic Algorithm",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/MD5.java",
          "line": 9,
          "column": 56,
          "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"MD5\"); // Weakness: using MD5 is risky; CWE-327",
          "relevantPart": "getInstance"
        },
        "type": "codeScan",
        "cweId": 327
      },
      {
        "id": 281,
        "name": "Reversible One Way Hash",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/MD5.java",
          "line": 9,
          "column": 57,
          "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"MD5\"); // Weakness: using MD5 is risky; CWE-327",
          "relevantPart": "\"\"MD5\"\"",
          "calls": {
            "location": "Code/Java/MD5.java",
            "line": 9,
            "column": 56,
            "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"MD5\"); // Weakness: using MD5 is risky; CWE-327",
            "relevantPart": "getInstance"
          }
        },
        "type": "codeScan",
        "cweId": 328
      },
      {
        "id": 282,
        "name": "Reversible One Way Hash",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/Sha1.java",
          "line": 9,
          "column": 57,
          "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\"); // Weakness: using SHA1 is Risky; CWE-327",
          "relevantPart": "\"\"SHA1\"\"",
          "calls": {
            "location": "Code/Java/Sha1.java",
            "line": 9,
            "column": 56,
            "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\"); // Weakness: using SHA1 is Risky; CWE-327",
            "relevantPart": "getInstance"
          }
        },
        "type": "codeScan",
        "cweId": 328
      },
      {
        "id": 298,
        "name": "Reversible One Way Hash",
        "severity": "LOW",
        "code": {
          "location": "Code/Groovy/RiskyCryptographicAlgorithm.groovy",
          "line": 7,
          "column": 34,
          "source": "MessageDigest sha1Digest = MessageDigest.getInstance(\"SHA1\"); // Weakness: using SHA1 is Risky; CWE-327",
          "relevantPart": "getInstance"
        },
        "type": "codeScan",
        "cweId": 328
      },
      {
        "id": 296,
        "name": "Missing CSP Header",
        "severity": "LOW",
        "code": {
          "location": "Code/JavaScript/Node/Express.js/reflected_xss.js",
          "line": 21,
          "column": 14,
          "source": "response.send(message);",
          "relevantPart": "send"
        },
        "type": "codeScan",
        "cweId": 346
      },
      {
        "id": 259,
        "name": "No Protection From Forgery",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 1,
          "column": 49,
          "source": "class MessagesController < ApplicationController",
          "relevantPart": "MessagesController"
        },
        "type": "codeScan",
        "cweId": 352
      },
      {
        "id": 260,
        "name": "No Protection From Forgery",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/messages_controller.rb",
          "line": 1,
          "column": 1000,
          "source": "class MessagesController < ApplicationController",
          "relevantPart": "MessagesController"
        },
        "type": "codeScan",
        "cweId": 352
      },
      {
        "id": 261,
        "name": "No Protection From Forgery",
        "severity": "LOW",
        "code": {
          "location": "Code/Ruby/Rails/xss-persistent/app/controllers/application_controller.rb",
          "line": 1,
          "column": 1,
          "source": "class ApplicationController < ActionController::Base",
          "relevantPart": "ApplicationController"
        },
        "type": "codeScan",
        "cweId": 352
      },
      {
        "id": 241,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
            "line": 28,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
              "line": 28,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar8",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                "line": 28,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar8"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 242,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
          "line": 28,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
            "line": 28,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
              "line": 28,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar24",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                "line": 28,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar24"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 243,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
          "line": 30,
          "column": 36,
          "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
          "relevantPart": "ciphertext",
          "calls": {
            "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
            "line": 30,
            "column": 36,
            "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
            "relevantPart": "ciphertext",
            "calls": {
              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
              "line": 30,
              "column": 33,
              "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
              "relevantPart": "CxLeftShiftVar16",
              "calls": {
                "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                "line": 30,
                "column": 15,
                "source": "std::cout << \"ciphertext: \" << ciphertext << \"\\n\";",
                "relevantPart": "CxLeftShiftVar16"
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 244,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                      "line": 24,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                        "line": 24,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                          "line": 25,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                            "line": 25,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                              "line": 25,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar23",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_gcm_fixed_nonce.cpp",
                                                "line": 25,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar23"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 245,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                      "line": 24,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                        "line": 24,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                          "line": 25,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                            "line": 25,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                              "line": 25,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar7",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_cbc_fixed_iv.cpp",
                                                "line": 25,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar7"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 246,
        "name": "Privacy Violation",
        "severity": "LOW",
        "code": {
          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
          "line": 20,
          "column": 39,
          "source": "std::string decrypt(const std::string ciphertextString, const std::string keyString, const Botan::secure_vector<uint8_t> initializationVector, const std::string algorithm) {",
          "relevantPart": "ciphertextString",
          "calls": {
            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
            "line": 21,
            "column": 61,
            "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
            "relevantPart": "ciphertextString",
            "calls": {
              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
              "line": 21,
              "column": 50,
              "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
              "relevantPart": "hex_decode",
              "calls": {
                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                "line": 21,
                "column": 30,
                "source": "const std::vector<uint8_t> ciphertext = Botan::hex_decode(ciphertextString);",
                "relevantPart": "ciphertext",
                "calls": {
                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                  "line": 28,
                  "column": 68,
                  "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                  "relevantPart": "ciphertext",
                  "calls": {
                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                    "line": 28,
                    "column": 79,
                    "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                    "relevantPart": "data",
                    "calls": {
                      "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                      "line": 28,
                      "column": 33,
                      "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                      "relevantPart": "secure_vector",
                      "calls": {
                        "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                        "line": 28,
                        "column": 33,
                        "source": "Botan::secure_vector<uint8_t> plaintextBuffer(ciphertext.data(), ciphertext.data() + ciphertext.size());",
                        "relevantPart": "plaintextBuffer",
                        "calls": {
                          "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                          "line": 31,
                          "column": 18,
                          "source": "cipher->finish(plaintextBuffer);",
                          "relevantPart": "plaintextBuffer",
                          "calls": {
                            "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                            "line": 33,
                            "column": 80,
                            "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                            "relevantPart": "plaintextBuffer",
                            "calls": {
                              "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                              "line": 33,
                              "column": 96,
                              "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                              "relevantPart": "size",
                              "calls": {
                                "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                "line": 33,
                                "column": 15,
                                "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                "relevantPart": "plaintext",
                                "calls": {
                                  "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                  "line": 33,
                                  "column": 15,
                                  "source": "std::string plaintext(reinterpret_cast<char const*>(plaintextBuffer.data()), plaintextBuffer.size());",
                                  "relevantPart": "plaintext",
                                  "calls": {
                                    "location": "Code/C++/crypto/botan/symetric_encryption_decryption.h",
                                    "line": 35,
                                    "column": 10,
                                    "source": "return plaintext;",
                                    "relevantPart": "plaintext",
                                    "calls": {
                                      "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                      "line": 26,
                                      "column": 22,
                                      "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                      "relevantPart": "decrypt",
                                      "calls": {
                                        "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                        "line": 26,
                                        "column": 10,
                                        "source": "auto plaintext = decrypt(text, key, initializationVector, algorithm);",
                                        "relevantPart": "plaintext",
                                        "calls": {
                                          "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                          "line": 27,
                                          "column": 35,
                                          "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                          "relevantPart": "plaintext",
                                          "calls": {
                                            "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                            "line": 27,
                                            "column": 35,
                                            "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                            "relevantPart": "plaintext",
                                            "calls": {
                                              "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                              "line": 27,
                                              "column": 32,
                                              "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                              "relevantPart": "CxLeftShiftVar15",
                                              "calls": {
                                                "location": "Code/C++/crypto/botan/aes_cbc_predictable_iv.cpp",
                                                "line": 27,
                                                "column": 15,
                                                "source": "std::cout << \"plaintext: \" << plaintext << \"\\n\";",
                                                "relevantPart": "CxLeftShiftVar15"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "type": "codeScan",
        "cweId": 359
      },
      {
        "id": 287,
        "name": "Race Condition In Cross Functionality",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/sync.go",
          "line": 8,
          "column": 2,
          "source": "login++",
          "relevantPart": "login"
        },
        "type": "codeScan",
        "cweId": 362
      },
      {
        "id": 292,
        "name": "Missing Jailbreak Check",
        "severity": "LOW",
        "code": {
          "location": "Code/Swift/vulnerable-ios/vulnerable-ios/Info.plist",
          "line": 1,
          "column": 0,
          "source": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "relevantPart": "MethodDecl"
        },
        "type": "codeScan",
        "cweId": 693
      },
      {
        "id": 295,
        "name": "Potential Clickjacking on Legacy Browsers",
        "severity": "LOW",
        "code": {
          "location": "Code/Go/webAssembly/assets/index.html",
          "line": 1,
          "column": 1,
          "source": "<!DOCTYPE html>",
          "relevantPart": "<"
        },
        "type": "codeScan",
        "cweId": 693
      },
      {
        "id": 294,
        "name": "Incorrect Permission Assignment For Critical Resources",
        "severity": "LOW",
        "code": {
          "location": "Code/Java/XSS/src/main/java/XSS/App.java",
          "line": 44,
          "column": 29,
          "source": "try (Writer writer = response.getWriter()) {",
          "relevantPart": "writer"
        },
        "type": "codeScan",
        "cweId": 732
      },
      {
        "id": 256,
        "name": "Client Hardcoded Domain",
        "severity": "LOW",
        "code": {
          "location": "Code/TypeScript/Deno/oak/reflected_xss.ts",
          "line": 1,
          "column": 1,
          "source": "import { Application, Router } from \"https://deno.land/x/oak/mod.ts\";",
          "relevantPart": "ts"
        },
        "type": "codeScan",
        "cweId": 829
      },
      {
        "id": 257,
        "name": "Client Hardcoded Domain",
        "severity": "LOW",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_md5.ts",
          "line": 1,
          "column": 1,
          "source": "import { createHash } from \"https://deno.land/std@0.95.0/hash/mod.ts\";",
          "relevantPart": "ts"
        },
        "type": "codeScan",
        "cweId": 829
      },
      {
        "id": 258,
        "name": "Client Hardcoded Domain",
        "severity": "LOW",
        "code": {
          "location": "Code/TypeScript/Deno/risky_crypto_sha1.ts",
          "line": 1,
          "column": 1,
          "source": "import { createHash } from \"https://deno.land/std@0.95.0/hash/mod.ts\";",
          "relevantPart": "ts"
        },
        "type": "codeScan",
        "cweId": 829
      },
      {
        "id": 290,
        "name": "Missing Device Lock Verification",
        "severity": "LOW",
        "code": {
          "location": "Code/Swift/vulnerable-ios/vulnerable-ios/Info.plist",
          "line": 1,
          "column": 0,
          "source": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
          "relevantPart": "MethodDecl"
        },
        "type": "codeScan",
        "cweId": 829
      },
      {
        "id": 302,
        "name": "Empty Methods",
        "severity": "INFO",
        "code": {
          "location": "Code/Java/SQLInjection/app/build.gradle",
          "line": 38,
          "column": 13,
          "source": "tasks.named('test') {",
          "relevantPart": "Lambda"
        },
        "type": "codeScan",
        "cweId": 398
      },
      {
        "id": 301,
        "name": "Third Party Keyboard Enabled",
        "severity": "INFO",
        "code": {
          "location": "Code/Swift/vulnerable-ios/vulnerable-ios/AppDelegate.swift",
          "line": 13,
          "column": 1,
          "source": "class AppDelegate: UIResponder, UIApplicationDelegate {",
          "relevantPart": "AppDelegate"
        },
        "type": "codeScan",
        "cweId": 829
      }
    ]
  }
}
