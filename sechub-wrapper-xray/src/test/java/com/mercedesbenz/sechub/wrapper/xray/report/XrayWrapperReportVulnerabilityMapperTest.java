package com.mercedesbenz.sechub.wrapper.xray.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;

import org.cyclonedx.model.Bom;
import org.cyclonedx.model.vulnerability.Vulnerability;
import org.junit.jupiter.api.Test;

class XrayWrapperReportVulnerabilityMapperTest {

    @Test
    void mapVulnerabilities_valid_test_input() {
        /* prepare */
        File file = new File("src/test/resources/xray-report-examples/Docker_SBOM_Export_CycloneDX.json");
        HashMap<String, CycloneDXVulnerabilityHelper> vulnerabilityHashMap = new HashMap<>();
        CycloneDXVulnerabilityHelper vulnerability01 = new CycloneDXVulnerabilityHelper();
        vulnerability01.getVulnerability().setId("CVE-2021-37750");
        vulnerability01.getVulnerability().setBomRef("testBomRef01");
        vulnerabilityHashMap.put("CVE-2021-37750", vulnerability01);
        CycloneDXVulnerabilityHelper vulnerability02 = new CycloneDXVulnerabilityHelper();
        vulnerability02.getVulnerability().setId("CVE-2019-17594");
        vulnerability02.getVulnerability().setBomRef("testBomRef02");
        vulnerabilityHashMap.put("CVE-2019-17594", vulnerability02);

        /* execute */
        Bom bom = XrayWrapperReportVulnerabilityMapper.mapVulnerabilities(file, vulnerabilityHashMap);

        /* test */
        List<Vulnerability> vulnerabilities = bom.getVulnerabilities();
        for (Vulnerability vulnerability : vulnerabilities) {
            if (Objects.equals(vulnerability.getId(), "CVE-2021-37750")) {
                assertEquals("testBomRef01", vulnerability.getBomRef());
            }
            if (Objects.equals(vulnerability.getId(), "CVE-2019-17594")) {
                assertEquals("testBomRef02", vulnerability.getBomRef());
            }
        }
    }

    @Test
    void mapVulnerabilities_throws_illegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> XrayWrapperReportVulnerabilityMapper.mapVulnerabilities(null, null));
    }

    @Test
    void mapVulnerabilities_throws_() {
        /* prepare */
        HashMap<String, CycloneDXVulnerabilityHelper> vulnerabilityHashMap = new HashMap<>();
        File file = new File("src/test/resources/invalid-json-examples/invalid_json.json");

        /* execute + test */
        assertThrows(XrayWrapperReportException.class, () -> XrayWrapperReportVulnerabilityMapper.mapVulnerabilities(file, vulnerabilityHashMap));
    }
}