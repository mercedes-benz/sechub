package com.mercedesbenz.sechub.wrapper.xray.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.cyclonedx.model.Bom;
import org.cyclonedx.model.vulnerability.Vulnerability;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class XrayWrapperReportVulnerabilityMapperTest {

    XrayWrapperReportVulnerabilityMapper vulnerabilityMapperToTest;

    @BeforeEach
    void beforeEach() {
        vulnerabilityMapperToTest = new XrayWrapperReportVulnerabilityMapper();
    }

    @Test
    void mapVulnerabilities_valid_test_input() throws XrayWrapperReportException {
        /* prepare */
        File file = new File("src/test/resources/xray-report-examples/Docker_SBOM_Export_CycloneDX.json");
        Map<String, Vulnerability> vulnerabilityMap = new HashMap<>();
        Vulnerability vulnerability01 = new Vulnerability();
        vulnerability01.setId("CVE-2021-37750");
        vulnerability01.setBomRef("testBomRef01");
        vulnerabilityMap.put("CVE-2021-37750", vulnerability01);
        Vulnerability vulnerability02 = new Vulnerability();
        vulnerability02.setId("CVE-2019-17594");
        vulnerability02.setBomRef("testBomRef02");
        vulnerabilityMap.put("CVE-2019-17594", vulnerability02);

        /* execute */
        Bom bom = vulnerabilityMapperToTest.mapVulnerabilities(file, vulnerabilityMap);

        /* test */
        List<Vulnerability> vulnerabilities = bom.getVulnerabilities();
        for (Vulnerability vulnerability : vulnerabilities) {
            if (Objects.equals(vulnerability.getId(), "CVE-2021-37750")) {
                assertEquals("testBomRef01", vulnerability.getBomRef());
            }
            if (Objects.equals(vulnerability.getId(), "CVE-2019-17594")) {
                assertEquals("testBomRef02", vulnerability.getBomRef());
            }
        }
        assertEquals(2, vulnerabilities.size());
    }

    @Test
    void mapVulnerabilities_null_cycloneDXReport_throws_xrayWrapperReportException() {
        /* prepare */
        Map<String, Vulnerability> vulnerabilityMap = new HashMap<>();

        /* execute */
        XrayWrapperReportException exception = assertThrows(XrayWrapperReportException.class,
                () -> vulnerabilityMapperToTest.mapVulnerabilities(null, vulnerabilityMap));

        /* test */
        assertEquals("Error occurred during report handling: Cannot parse JSON: argument \"src\" is null", exception.getMessage());
    }

    @Test
    void mapVulnerabilities_throws_xrayWrapperReportException() {
        /* prepare */
        File file = new File("src/test/resources/invalid-json-examples/invalid_json.json");

        /* execute */
        XrayWrapperReportException exception = assertThrows(XrayWrapperReportException.class, () -> vulnerabilityMapperToTest.mapVulnerabilities(file, null));

        /* test */
        assertEquals("Error occurred during report handling: Cannot read CycloneDX report", exception.getMessage());
    }
}