package com.mercedesbenz.sechub.xraywrapper.report;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Objects;

import org.junit.Assert;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

class XrayWrapperReportVulnerabilityMapperTest {

    @Test
    public void test_mapVulnerabilities() throws IOException {
        /* prepare */
        File file = new File("src/test/resources/xray-report-examples/Docker_SBOM_Export_CycloneDX.json");
        HashMap<String, CycloneDXVulnerabilityBuilder> vulnerabilityHashMap = new HashMap<>();
        CycloneDXVulnerabilityBuilder vulnerability01 = new CycloneDXVulnerabilityBuilder("");
        vulnerability01.setId("CVE-2021-37750");
        vulnerability01.addBom_ref("testBomRef01");
        vulnerabilityHashMap.put("CVE-2021-37750", vulnerability01);
        CycloneDXVulnerabilityBuilder vulnerability02 = new CycloneDXVulnerabilityBuilder("");
        vulnerability02.setId("CVE-2019-17594");
        vulnerability02.addBom_ref("testBomRef02");
        vulnerabilityHashMap.put("CVE-2019-17594", vulnerability02);

        /* execute */
        ObjectNode node = XrayWrapperReportVulnerabilityMapper.mapVulnerabilities(file, vulnerabilityHashMap);

        /* test */
        ArrayNode arraynode = (ArrayNode) node.get("vulnerabilities");
        for (JsonNode object : arraynode) {
            if (Objects.equals(object.get("id").asText(), "CVE-2021-37750")) {
                assertEquals("testBomRef01", object.get("bom-ref").asText());
            }
            if (Objects.equals(object.get("id").asText(), "CVE-2019-17594")) {
                assertEquals("testBomRef02", object.get("bom-ref").asText());
            }
        }
    }

    @Test
    public void test_mapVulnerabilities_null() throws IOException {
        Assert.assertThrows(IllegalArgumentException.class, () -> XrayWrapperReportVulnerabilityMapper.mapVulnerabilities(null, null));
    }
}