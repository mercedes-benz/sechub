package com.mercedesbenz.sechub.xraywrapper.report;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.List;

import org.cyclonedx.model.vulnerability.Vulnerability;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

class CycloneDXVulnerabilityHelperTest {

    ObjectMapper mapper;
    CycloneDXVulnerabilityHelper vulnerability;

    @BeforeEach
    public void beforeEach() {
        mapper = new ObjectMapper();
        vulnerability = new CycloneDXVulnerabilityHelper();
    }

    @Test
    public void test_addCwe() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals(1, vulnerability.getVulnerability().getCwes().size());
    }

    @Test
    public void test_addCwe_noInfo() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-noinfo");

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals(0, vulnerability.getVulnerability().getCwes().size());
    }

    @Test
    public void test_addCwe_multiple() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");
        cwe.add("CEW-892");
        cwe.add("CEW-883");
        List<Integer> list = new ArrayList<>();
        list.add(123);
        list.add(892);
        list.add(883);

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals(list, vulnerability.getVulnerability().getCwes());
    }

    @Test
    public void test_addAffects_versions() {
        /* prepare */
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        vul_versions.add("8.0");
        vul_versions.add("11.0");
        fixed_version.add("17.02");
        fixed_version.add("12.02");

        /* execute */
        vulnerability.addAffects(ref, vul_versions, fixed_version);

        /* test */
        List<Vulnerability.Affect> affects = vulnerability.getVulnerability().getAffects();
        Vulnerability.Affect affect = affects.get(0);
        assertEquals(1, affects.size());
        assertEquals(4, affect.getVersions().size());
    }

    @Test
    public void test_addAffects_range() {
        /* prepare */
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        vul_versions.add("8.0");
        vul_versions.add("<17.02");
        fixed_version.add("17.02");
        fixed_version.add("<8.0.02");

        /* execute */
        vulnerability.addAffects(ref, vul_versions, fixed_version);

        /* test */
        List<Vulnerability.Affect> affects = vulnerability.getVulnerability().getAffects();
        Vulnerability.Affect affect = affects.get(0);
        assertEquals(1, affects.size());
        assertEquals(4, affect.getVersions().size());
        assertEquals("vers:testref/<17.02", affect.getVersions().get(1).getRange());
    }

    @Test
    public void test_addRating() {
        /* prepare */
        Double score = 10.0;
        String severity = "high";
        String method = "CVSSv2";
        String vector = "vector";
        String source = "NVD";

        /* execute */
        vulnerability.addRating(score, severity, method, vector, source);
        Vulnerability.Rating rating = vulnerability.getVulnerability().getRatings().get(0);

        /* test */
        assertEquals("CVSSv2", rating.getMethod().getMethodName());
    }

    @Test
    public void test_addBom_ref() {
        /* prepare */
        String bomref = "bomref";

        /* execute */
        vulnerability.getVulnerability().setBomRef(bomref);
        String s = vulnerability.getVulnerability().getBomRef();

        /* test */
        assertEquals(bomref, s);
    }

    @Test
    public void test_addSource() {
        /* prepare */
        String name = "myname";
        String url = "myurl";

        /* execute */
        vulnerability.addSource(url, name);
        String s = vulnerability.getVulnerability().getSource().getUrl();

        /* test */
        assertEquals(url, s);
    }
}