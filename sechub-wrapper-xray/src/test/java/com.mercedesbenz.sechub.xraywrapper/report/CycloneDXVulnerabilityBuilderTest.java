package com.mercedesbenz.sechub.xraywrapper.report;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

class CycloneDXVulnerabilityBuilderTest {

    ObjectMapper mapper;
    CycloneDXVulnerabilityBuilder vulnerability;

    @BeforeEach
    public void beforeEach() {
        mapper = new ObjectMapper();
        vulnerability = new CycloneDXVulnerabilityBuilder("id");
    }

    @Test
    public void test_addCwe() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals("[123]", vulnerability.getVulnerability().get("cwes").toString());
    }

    @Test
    public void test_addCwe_noInfo() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-noinfo");

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals("[]", vulnerability.getVulnerability().get("cwes").toString());
    }

    @Test
    public void test_addCwe_multiple() {
        /* prepare */
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");
        cwe.add("CEW-892");
        cwe.add("CEW-883");

        /* execute */
        vulnerability.addCWE(cwe);

        /* test */
        assertEquals("[123,892,883]", vulnerability.getVulnerability().get("cwes").toString());
    }

    @Test
    public void test_addAffects_versions() {
        /* prepare */
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        String purls = "tests://mytest";
        vul_versions.add("8.0");
        vul_versions.add("11.0");
        fixed_version.add("17.02");
        fixed_version.add("12.02");

        /* execute */
        vulnerability.addAffects(ref, vul_versions, fixed_version, purls);

        /* test */
        String ref_vul = vulnerability.getVulnerability().get("affects").toString();
        assertTrue(ref_vul.contains(ref));
        assertTrue(ref_vul.contains("{\"version\":\"8.0\",\"status\":\"affected\"}"));
    }

    @Test
    public void test_addAffects_range() {
        /* prepare */
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        String purls = "tests://mytest";
        vul_versions.add("8.0");
        vul_versions.add("<17.02");
        fixed_version.add("17.02");
        fixed_version.add("<8.0.02");

        /* execute */
        vulnerability.addAffects(ref, vul_versions, fixed_version, purls);

        /* test */
        String ref_vul = vulnerability.getVulnerability().get("affects").toString();
        assertTrue(ref_vul.contains(ref));
        assertTrue(ref_vul.contains("{\"range\":\"tests://mytest@<17.02\",\"status\":\"affected\"}"));
    }

    @Test
    public void test_addRating() {
        /* prepare */
        Float score = 10.0F;
        String severity = "high";
        String method = "CVSSv2";
        String vector = "vector";
        String source = "NVD";

        /* execute */
        vulnerability.addRating(score, severity, method, vector, source);
        String rating = vulnerability.getVulnerability().get("ratings").toString();

        /* test */
        assertTrue(rating.contains("\"method\":\"CVSSv2\""));
    }

    @Test
    public void test_addBom_ref() {
        /* prepare */
        String bomref = "bomref";

        /* execute */
        vulnerability.addBom_ref(bomref);
        String s = vulnerability.getVulnerability().get("bom-ref").asText();

        /* test */
        assertEquals(bomref, s);
    }

    @Test
    public void test_addSource() {
        /* prepare */
        String name = "myname";
        String url = "myurl";

        /* execute */
        vulnerability.addSource(url, name);
        String s = vulnerability.getVulnerability().get("source").get("url").asText();

        /* test */
        assertEquals(url, s);
    }
}