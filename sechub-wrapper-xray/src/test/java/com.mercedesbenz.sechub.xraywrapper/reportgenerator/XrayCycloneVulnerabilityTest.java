package com.mercedesbenz.sechub.xraywrapper.reportgenerator;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

class XrayCycloneVulnerabilityTest {

    ObjectMapper mapper = new ObjectMapper();

    @Test
    public void testSetCwe() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");

        // execute
        vul.setCwe(cwe);

        // assert
        assertEquals("[123]", vul.getVulnerability().get("cwes").toString());
    }

    @Test
    public void testSetCweNoInfo() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-noinfo");

        // execute
        vul.setCwe(cwe);

        // assert
        assertEquals("[]", vul.getVulnerability().get("cwes").toString());
    }

    @Test
    public void testSetCweMultiple() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        ArrayNode cwe = mapper.createArrayNode();
        cwe.add("CEW-123");
        cwe.add("CEW-892");
        cwe.add("CEW-883");

        // execute
        vul.setCwe(cwe);

        // assert
        assertEquals("[123,892,883]", vul.getVulnerability().get("cwes").toString());
    }

    @Test
    public void testAddAffectsVersion() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        String purls = "tests://mytest";
        vul_versions.add("8.0");
        vul_versions.add("11.0");
        fixed_version.add("17.02");
        fixed_version.add("12.02");

        // execute
        vul.addAffects(ref, vul_versions, fixed_version, purls);
        vul.putAffects();

        // assert
        String ref_vul = vul.getVulnerability().get("affects").toString();
        assertTrue(ref_vul.contains(ref));
        assertTrue(ref_vul.contains("{\"version\":\"8.0\",\"status\":\"affected\"}"));
    }

    @Test
    public void testAddAffectsRangeMulti() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        ArrayNode vul_versions = mapper.createArrayNode();
        ArrayNode fixed_version = mapper.createArrayNode();
        String ref = "testref";
        String purls = "tests://mytest";
        vul_versions.add("8.0");
        vul_versions.add("<17.02");
        fixed_version.add("17.02");
        fixed_version.add("<8.0.02");

        // execute
        vul.addAffects(ref, vul_versions, fixed_version, purls);
        vul.putAffects();

        // assert
        String ref_vul = vul.getVulnerability().get("affects").toString();
        assertTrue(ref_vul.contains(ref));
        assertTrue(ref_vul.contains("{\"range\":\"tests://mytest@<17.02\",\"status\":\"affected\"}"));
    }

    @Test
    public void testSetRating() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        String score = "10";
        String severity = "high";
        String method = "CVSSv2";
        String vector = "vector";
        String source = "NVD";

        // execute
        vul.setRating(score, severity, method, vector, source);

        String rating = vul.getVulnerability().get("ratings").toString();
        // assert
        assertTrue(rating.contains("\"method\":\"CVSSv2\""));

    }

    @Test
    public void testSetRatingInvalidFloat() {
        // prepare
        XrayCycloneVulnerability vul = new XrayCycloneVulnerability("id");
        String score = "invalid";
        String severity = "high";
        String method = "CVSSv2";
        String vector = "vector";
        String source = "NVD";

        // execute
        vul.setRating(score, severity, method, vector, source);

        String rating = vul.getVulnerability().get("ratings").toString();

        // assert
        assertTrue(rating.contains("\"score\":0.0"));

    }
}