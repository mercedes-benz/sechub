// SPDX-License-Identifier: MIT
package com.mercedesbenz.sechub.wrapper.xray.report;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.cyclonedx.exception.ParseException;
import org.cyclonedx.model.Bom;
import org.cyclonedx.model.vulnerability.Vulnerability;
import org.cyclonedx.parsers.JsonParser;

public class XrayWrapperReportVulnerabilityMapper {

    /**
     * Maps vulnerabilities from the security report (vulnerability ID plus
     * vulnerability) to the cycloneDX vulnerabilities via CVE ID
     *
     * @param cycloneDXreport           cycloneDX report
     * @param cycloneDXVulnerabilityMap map with vulnerability ID and vulnerability
     * @return CycloneDX SBOM with additional information
     * @throws XrayWrapperReportException
     */
    public Bom mapVulnerabilities(File cycloneDXreport, Map<String, Vulnerability> cycloneDXVulnerabilityMap) throws XrayWrapperReportException {
        JsonParser jsonParser = new JsonParser();
        Bom cycloneDXBom;
        List<Vulnerability> mappedCycloneVulnerabilities = new ArrayList<>();
        try {
            cycloneDXBom = jsonParser.parse(cycloneDXreport);
        } catch (ParseException e) {
            throw new XrayWrapperReportException("Cannot read CycloneDX report");
        } catch (IllegalArgumentException e) {
            throw new XrayWrapperReportException("Cannot parse JSON: " + e.getMessage());
        }
        List<Vulnerability> cycloneVulnerabilities = cycloneDXBom.getVulnerabilities();

        if (!cycloneVulnerabilities.isEmpty()) {
            for (Vulnerability cycloneVulnerability : cycloneVulnerabilities) {
                String id = cycloneVulnerability.getId();
                Vulnerability vulnerability = cycloneDXVulnerabilityMap.get(id);
                if (vulnerability != null) {
                    Vulnerability.Analysis analysis = cycloneVulnerability.getAnalysis();
                    if (analysis != null) {
                        vulnerability.setAnalysis(analysis);
                    }
                    mappedCycloneVulnerabilities.add(vulnerability);
                }
            }
        }
        cycloneDXBom.setVulnerabilities(mappedCycloneVulnerabilities);
        return cycloneDXBom;
    }
}
