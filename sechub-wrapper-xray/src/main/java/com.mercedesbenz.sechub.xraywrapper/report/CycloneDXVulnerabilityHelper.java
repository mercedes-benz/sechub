package com.mercedesbenz.sechub.xraywrapper.report;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import org.cyclonedx.model.vulnerability.Vulnerability;
import org.cyclonedx.model.vulnerability.Vulnerability.Source;

import java.util.ArrayList;
import java.util.List;

/**
 * builds a cycloneDX vulnerability according to CycloneDX standard 1.4 @see <a
 * href="https://cyclonedx.org/docs/1.4/json/"/a> examples: <a
 * href="https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/Use-Cases/Case-10/vex.json#L48"/a>
 * <a
 * href="https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/CISA-Use-Cases/Case-7/vex.json#L29"/a>
 * <a
 * href="https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/Use-Cases/Case-5/vex.json#L35"/a>
 */

public class CycloneDXVulnerabilityHelper {

    Vulnerability vulnerability;

    public CycloneDXVulnerabilityHelper() {
        this.vulnerability = new Vulnerability();
        this.vulnerability.setId("default");
    }

    public Vulnerability getVulnerability() {
        return vulnerability;
    }

    public void addCWE(ArrayNode cweArray) {
        List<Integer> cwes = new ArrayList<>();
        for (JsonNode node : cweArray) {
            String s = node.asText();
            if (s.contains("noinfo"))
                continue;
            try {
                s = s.split("-")[1];
                cwes.add(Integer.parseInt(s));
            } catch (NumberFormatException e) {
                break;
            }
        }
        this.vulnerability.setCwes(cwes);
    }

    public void addSource(String sourceUrl, String sourceName) {
        Source source = new Source();
        source.setName(sourceName);
        source.setUrl(sourceUrl);
        this.vulnerability.setSource(source);
    }

    public void addRating(Double score, String severity, String method, String vector, String sourceName) {
        Vulnerability.Rating rating = new Vulnerability.Rating();

        String sourceUrl = "";
        String id = this.vulnerability.getId();
        if (!id.contains("XRAY")) {
            sourceUrl = "https://nvd.nist.gov/vuln/detail/" + id;
        }

        Source source = new Source();
        source.setName(sourceName);
        source.setUrl(sourceUrl);
        rating.setSource(source);

        rating.setScore(score);

        rating.setSeverity(Vulnerability.Rating.Severity.fromString(severity));

        rating.setMethod(Vulnerability.Rating.Method.fromString(method));

        rating.setVector(vector);

        this.vulnerability.addRating(rating);

    }

    public void addAffects(String ref, ArrayNode vulnerableVersions, ArrayNode fixedVersions) {
        Vulnerability.Affect affect = new Vulnerability.Affect();
        List<Vulnerability.Affect> affects = new ArrayList<>();
        List<Vulnerability.Version> versions = new ArrayList<>();
        affect.setRef(ref);
        String pkg = ref.split(":")[0];
        transformVersions(vulnerableVersions, "affected", pkg, versions);
        transformVersions(fixedVersions, "unaffected", pkg, versions);
        affect.setVersions(versions);
        affects.add(affect);
        this.vulnerability.setAffects(affects);

    }

    private void transformVersions(ArrayNode securityVersions, String status, String pkg, List<Vulnerability.Version> versions) {
        // "All Versions", "< 1.19.10", "1.20.0-0 ≤ Version < 1.20.5", "1.2.34"
        // cycloneDX using Version Range Spec (vers) vers:npm/1.2.3|>=2.0.0|<5.0.0
        pkg = "vers:" + pkg + "/";
        if (securityVersions != null) {
            for (JsonNode entry : securityVersions) {
                String versionString = entry.asText();
                Vulnerability.Version version = new Vulnerability.Version();
                if (versionString.equals("All Versions")) {
                    version.setRange(pkg + ">=0.0.0");

                } else if (versionString.contains("Version")) {
                    versionString = versionString.replace(" ", "");
                    String[] split = versionString.split("Version");
                    version.setRange(pkg + split[0] + "|" + split[1]);

                } else if (versionString.contains("<") | versionString.contains("≤")) {
                    versionString = versionString.replace(" ", "");
                    version.setRange(pkg + versionString);

                } else {
                    version.setVersion(versionString);
                }
                version.setStatus(Vulnerability.Version.Status.fromString(status));
                versions.add(version);
            }
        }
    }
}
