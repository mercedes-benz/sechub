package com.mercedesbenz.sechub.xraywrapper.report;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.cyclonedx.exception.ParseException;
import org.cyclonedx.model.Bom;
import org.cyclonedx.model.vulnerability.Vulnerability;
import org.cyclonedx.parsers.JsonParser;

import com.mercedesbenz.sechub.xraywrapper.cli.XrayWrapperExitCode;

public class XrayWrapperReportVulnerabilityMapper {

    /*
     * public static ObjectNode mapVulnerabilities(File cyclonreport,
     * HashMap<String, CycloneDXVulnerabilityBuilder> vulnerabilityHashMap) throws
     * XrayWrapperReportException { ObjectMapper mapper = new ObjectMapper();
     * JsonNode rootNode; try { rootNode = new
     * ObjectMapper().readTree(cyclonreport); } catch (IOException e) { throw new
     * XrayWrapperReportException("Can not read CycloneDX report as JSON",
     * XrayWrapperExitCode.IO_ERROR); } JsonNode vulCyclone =
     * rootNode.get("vulnerabilities"); ArrayNode arryNode =
     * mapper.createArrayNode();
     *
     * if (vulCyclone.isArray()) { for (JsonNode node : vulCyclone) { String id =
     * node.get("id").asText(); CycloneDXVulnerabilityBuilder vul =
     * vulnerabilityHashMap.get(id); if (vul != null) { JsonNode analysis =
     * node.get("analysis"); if (analysis != null) { vul.addAnalysis(analysis); } //
     * rewrite the node arryNode.add(vul.getVulnerabilityNode()); } } } ObjectNode
     * root = (ObjectNode) rootNode; root.set("vulnerabilities", arryNode); return
     * root; }
     *
     */

    public static Bom mapVulnerabilities(File cyclonreport, HashMap<String, CycloneDXVulnerabilityBuilder> vulnerabilityHashMap)
            throws XrayWrapperReportException {
        JsonParser jsonParser = new JsonParser();
        Bom cycloneBom;
        List<Vulnerability> mappedCycloneVulnerabilities = new ArrayList<>();
        try {
            cycloneBom = jsonParser.parse(cyclonreport);
        } catch (ParseException e) {
            throw new XrayWrapperReportException("Can not read CycloneDX report as BOM file", XrayWrapperExitCode.JSON_NOT_PROCESSABLE);
        }
        List<Vulnerability> cycloneVulnerabilities = cycloneBom.getVulnerabilities();

        if (!cycloneVulnerabilities.isEmpty()) {
            for (Vulnerability cycloneVulnerability : cycloneVulnerabilities) {
                String id = cycloneVulnerability.getId();
                CycloneDXVulnerabilityBuilder vulnerability = vulnerabilityHashMap.get(id);
                if (vulnerability != null) {
                    Vulnerability.Analysis analysis = cycloneVulnerability.getAnalysis();
                    if (analysis != null) {
                        vulnerability.getVulnerability().setAnalysis(analysis);
                    }
                    // rewrite the node
                    mappedCycloneVulnerabilities.add(vulnerability.getVulnerability());
                }
            }
        }
        cycloneBom.setVulnerabilities(mappedCycloneVulnerabilities);
        return cycloneBom;
    }
}
