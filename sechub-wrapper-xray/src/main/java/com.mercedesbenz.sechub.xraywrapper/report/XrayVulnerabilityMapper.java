package com.mercedesbenz.sechub.xraywrapper.report;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.mercedesbenz.sechub.xraywrapper.cli.XrayWrapperExitCode;

public class XrayVulnerabilityMapper {

    public static ObjectNode mapVulnerabilities(File cyclonreport, HashMap<String, XrayCycloneVulnerabilityBuilder> vulnerabilityHashMap)
            throws XrayWrapperReportException {
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = null;
        try {
            rootNode = new ObjectMapper().readTree(cyclonreport);
        } catch (IOException e) {
            throw new XrayWrapperReportException("Error: can not read CycloneDX report as JSON", XrayWrapperExitCode.IO_ERROR);
        }
        JsonNode vulCyclone = rootNode.get("vulnerabilities");
        ArrayNode arryNode = mapper.createArrayNode();

        if (vulCyclone.isArray()) {
            for (JsonNode node : vulCyclone) {
                String id = node.get("id").asText();
                XrayCycloneVulnerabilityBuilder vul = vulnerabilityHashMap.get(id);
                if (vul != null) {
                    JsonNode analysis = node.get("analysis");
                    if (analysis != null) {
                        vul.addAnalysis(analysis);
                    }
                    // rewrite the node
                    arryNode.add(vul.getVulnerability());
                }
            }
        }
        ObjectNode root = (ObjectNode) rootNode;
        root.set("vulnerabilities", arryNode);
        return root;
    }
}
