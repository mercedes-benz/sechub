package com.mercedesbenz.sechub.xraywrapper.reportgenerator;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class XrayCycloneVulnerability {

    private String id;

    private ObjectNode vulnerability;

    private ObjectNode source;

    private ObjectMapper objectMapper;

    private ArrayNode affects;

    public XrayCycloneVulnerability(String id) {
        this.id = id;
        this.objectMapper = new ObjectMapper();
        this.vulnerability = objectMapper.createObjectNode();
        this.source = objectMapper.createObjectNode();
        this.affects = objectMapper.createArrayNode();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
        this.vulnerability.put("id", id);
    }

    public ObjectNode getVulnerability() {
        return vulnerability;
    }

    public void setBom_ref(String bomref) {
        this.vulnerability.put("bom-ref", bomref);
    }

    /**
     * Set CWEs as Integer Array
     *
     * @param cwe
     */
    public void setCwe(ArrayNode cwe) {
        ArrayNode arrayNode = objectMapper.createArrayNode();
        for (JsonNode node : cwe) {
            String s = node.asText();
            if (s.contains("noinfo"))
                continue;
            try {
                s = s.split("-")[1];
                arrayNode.add(Integer.parseInt(s));
            } catch (NumberFormatException e) {
                break;
            }
        }
        this.vulnerability.set("cwes", arrayNode);
    }

    public void setSource(String url_string, String name_string) {
        this.source.put("url", url_string);
        this.source.put("name", name_string);
        this.vulnerability.set("source", this.source);
    }

    /**
     * Adds ratings of vulnerabilities
     *
     * @param score
     * @param severity
     * @param method
     * @param vector
     * @param source_name
     */
    public void setRating(String score, String severity, String method, String vector, String source_name) {
        ArrayNode arrayRating = objectMapper.createArrayNode();
        ObjectNode insideNode = objectMapper.createObjectNode();
        ObjectNode source = objectMapper.createObjectNode();

        String url = "https://nvd.nist.gov/vuln/detail/" + this.getId();
        source.put("name", source_name);
        source.put("url", url);

        // add score etc.
        Float score_fl = 0.0F;
        try {
            score_fl = Float.parseFloat(score);
        } catch (NumberFormatException e) {
            // todo: log default score 0.0
        }
        insideNode.set("source", source);
        insideNode.put("score", score_fl);
        insideNode.put("severity", severity);
        insideNode.put("method", method);
        insideNode.put("vector", vector);

        arrayRating.add(insideNode);
        this.vulnerability.set("ratings", arrayRating);
    }

    public void setDescription(String description) {
        this.vulnerability.put("description", description);
    }

    public void setAnalysis(JsonNode analysis) {
        this.vulnerability.set("analysis", analysis);
    }

    // example
    // https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/Use-Cases/Case-10/vex.json#L48
    // https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/CISA-Use-Cases/Case-7/vex.json#L29
    // https://github.com/CycloneDX/bom-examples/blob/7d529848e2f8bd65d03aec9eab16f139fd445ff4/VEX/Use-Cases/Case-5/vex.json#L35

    /**
     * Adds affected and unaffected versions of the components
     *
     * @param ref
     * @param vul_versions
     * @param fixed_versions
     */
    public void addAffects(String ref, ArrayNode vul_versions, ArrayNode fixed_versions, String purls) {
        ObjectNode component = objectMapper.createObjectNode();
        component.put("ref", ref);
        ArrayNode versions = objectMapper.createArrayNode();

        // todo: not correct format ( correct: vers:semver/<1.5.0|>=7.0.) but valid
        if (vul_versions != null)
            putVersions(vul_versions, versions, "affected", purls);
        if (fixed_versions != null)
            putVersions(fixed_versions, versions, "unaffected", purls);

        component.set("versions", versions);
        this.affects.add(component);
    }

    /**
     * Checks if the array nodes contains ranges or versions and put them into the
     * cyclone object
     *
     * @param arrayNode
     * @param versions
     * @param status
     */
    private void putVersions(ArrayNode arrayNode, ArrayNode versions, String status, String purls) {
        boolean range = false;
        StringBuilder cyclonVersion = new StringBuilder(purls);
        for (JsonNode node : arrayNode) {
            // only ≤ and < are used in Xray report
            String s = node.asText();
            // versions are a range
            if (s.contains("<") | s.contains("≤") | s.contains("All Versions") | s.contains(">") | s.contains("≥")) {
                range = true;
                s = s.replace(" ", "");
                cyclonVersion.append("@").append(s);
            } else {
                ObjectNode cyclonArrayNode = objectMapper.createObjectNode();
                cyclonArrayNode.put("version", s);
                cyclonArrayNode.put("status", status);
                versions.add(cyclonArrayNode);
            }
        }
        if (range) {
            ObjectNode cyclonArrayNode = objectMapper.createObjectNode();
            cyclonArrayNode.put("range", cyclonVersion.toString());
            cyclonArrayNode.put("status", status);
            versions.add(cyclonArrayNode);
        }
    }

    public void putAffects() {
        this.vulnerability.set("affects", this.affects);
    }

}
