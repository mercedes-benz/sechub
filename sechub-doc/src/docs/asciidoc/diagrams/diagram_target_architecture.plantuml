' SPDX-License-Identifier: MIT
@startuml
hide fields
'skinparam linetype polyline
skinparam linetype ortho
interface ProductExecutor{
     + List<ProductResult> execute()
     + ScanType getScanType()
     + int getVersion()
     + boolean isMultipleConfigurationAllowed()
}
class SerecoReportProductExecutor implements ProductExecutor

class ProductExecutorData{
    List<NetworkTargetInfo> networkTargetInfoList;
    NetworkTargetProductServerDataProvider NetworkTargetProductServerDataProvider;

    ProductExecutorContext productExecutorContext;
    SecHubExecutionContext sechubExecutionContext;
    UUIDTraceLogID traceLogId;
    NetworkTargetProductServerDataSuppport networkTargetProdcutServerDataSupport;

    NetworkLocationProvider networkLocationProvider;
    NetworkTargetInfo currentNetworkTargetInfo;
    String traceLogIdAsString;
    Set<String> codeUploadFileSytemFolderPathes;

}

ProductExecutorData ..>NetworkLocationProvider
ProductExecutorData ..>NetworkTargetProductServerDataProvider
ProductExecutorData ..>NetworkTargetInfo


abstract class AbstractProductExecutor{

    # abstract void customize(ProductExecutorData data);
    # abstract List<ProductResult> executeByAdapter(ProductExecutorData data)
}
AbstractProductExecutor -> ProductExecutorData : creates + customizes
AbstractProductExecutor --> NetworkTargetResolver

note top of AbstractProductExecutor
            The base class for mostly all product executors (except for Sereco).
            The child classes must implmemnt the `customize` method and
            configure the product executor data object accordingly.
             
            It will handle automatically target specific parts
            for scan types where it is necessary (WebScan, InfraScan).
            
            All other scan types (e.g. CodeScan) do not
            need to setup specific product executor data
            (like NetworkLocationProvider).
            
            
end note
interface NetworkTargetProductServerDataProvider {
    String getIdentifierWhenInternetTarget();

    String getIdentifierWhenIntranetTarget();

    String getBaseURLWhenInternetTarget();

    String getBaseURLWhenIntranetTarget();

    String getUsernameWhenInternetTarget();

    String getUsernameWhenIntranetTarget();

    String getPasswordWhenInternetTarget();

    String getPasswordWhenIntranetTarget();

    boolean hasUntrustedCertificateWhenIntranetTarget();
    
    boolean hasUntrustedCertificateWhenInternetTarget();
}

interface NetworkLocationProvider{
     List<URI> getURIs();

     List<InetAddress> getInetAdresses();
}

interface NetworkTargetResolver{
            + NetworkTarget resolveTarget(URI uri);
            + NetworkTarget resolveTarget(InetAddress inetAdress);
}

class NetworkTarget{
  + getURI()
  + getInetAdress()
  + NetworkTargetType getType()
}

note top of NetworkTarget
  Represents a network target 
  to use for a dedicated network type
end note

enum NetworkTargetType {
  INTERNET
  INTRANET
  ILLEGAL
  UNKNOWN
}

class NetworkTargetRegistry

class NetworkTargetInfoFactory {
    + NetworkTargetInfo createInfo()
}

class NetworkTargetInfo{
    + NetworkTargetType getNetworkTargetType()
    + Set<URI> getNetworkTargetURIs()
    + Set<InetAddress> getNetworkTargetIPs()
}

note top of NetworkTargetInfo
    Represents (final) information about which 
    URIs /IPs are for a dedicated network
    target type (e.g. INTERNET). 
end note
      
interface NetworkTargetProductServerDataProvider
class NetworkTargetProductServerDataSuppport{
    +String getIdentifier(NetworkTargetType target)
    +boolean isAbletoScan(NetworkTargetType target)
    +String getBaseURL(NetworkTargetType type)
    +String getUserId(NetworkTargetType type)
    +String getPassword(NetworkTargetType target)
}
    

NetworkTargetInfoFactory --> NetworkLocationProvider : uses
NetworkTargetInfoFactory --> NetworkTargetProductServerDataSuppport : uses data support

ProductExecutor <|-- AbstractProductExecutor
AbstractProductExecutor --> NetworkTargetProductServerDataSuppport: create+use (if necessary)
AbstractProductExecutor --> NetworkTargetInfoFactory: create+use (if necessary)
AbstractProductExecutor ..> NetworkTargetInfo

NetworkTargetInfoFactory -> NetworkTargetRegistry: internally created + used
NetworkTargetProductServerDataSuppport ->  NetworkTargetProductServerDataProvider: uses
NetworkTargetInfoFactory o-- NetworkTargetResolver : uses

NetworkTargetRegistry "1" *-- "n" NetworkTarget : contains
NetworkTargetRegistry --> NetworkTargetInfo : provides
NetworkTargetResolver --> NetworkTarget
NetworkTarget *-- NetworkTargetType

note top of NetworkLocationProvider
  Data normally comes from 
  sechub configuration
end note  
note top of NetworkTargetProductServerDataProvider 
   Data normally comes from an
   install setup
end note 

@enduml