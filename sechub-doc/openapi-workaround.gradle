// SPDX-License-Identifier: MIT

// available in standard library of Groovy
// http://docs.groovy-lang.org/latest/html/gapi/groovy/json/JsonSlurper.html
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

task generateOpenapi() {
    /*
     * Generate the OpenAPI file and perform some post processing steps
     *
     * At the moment this is necessary to remove `oneOf` from several schemas.
     * This is necessary, because arrays cannot be properly declared in Spring RESTDoc:
     * - https://github.com/ePages-de/restdocs-api-spec/issues/147
     */
    group 'sechub'
    description 'Generate the OpenAPI file'
    
    dependsOn 'openapi3'
    
    doLast {
        def openApiFile = "$buildDir/api-spec/openapi3.json"
        
        // Documenting an array of strings in RestDoc is currently not supported
        // - https://github.com/spring-projects/spring-restdocs/issues/505
        // - https://github.com/ePages-de/restdocs-api-spec/issues/147
        // 
        // To solve this issue, this task takes the OpenAPI file and adjusts it.
        //
        // The steps are:
        //
        // 1. read in the generated OpenAPI file in `/sechub-doc/build/api-spec/openapi3.json`
        // 2. get the values which contain a `oneOf` element
        // 3. overwrite the `oneOf` with `string`
        // 4. write the modified JSON structure back into the generated OpenAPI 3 file
        //
        // This is not a clean solution, but it solves the problem.
        
        // Load JSON
        def jsonSlurper = new JsonSlurper() 
        File jsonFile = new File(openApiFile)
        def jsonObject = jsonSlurper.parse(jsonFile)
        
        // Type definitions
        def stringType = new HashMap<>()
        stringType.put("type", "string")
        
        // Replace oneOf in schemas
        def projectSchema = jsonObject.components.schemas.Project
        projectSchema.properties.whiteList.properties.uris.items = stringType
        
        def projectDetailsSchema = jsonObject.components.schemas.ProjectDetails
        projectDetailsSchema.properties.whiteList.items = stringType
        projectDetailsSchema.properties.users.items = stringType
        
        def scanJobSchema = jsonObject.components.schemas.ScanJob
        scanJobSchema.properties.infraScan.properties.uris.items = stringType
        scanJobSchema.properties.infraScan.properties.ips.items = stringType
        scanJobSchema.properties.codeScan.properties.fileSystem.properties.folders.items = stringType
        scanJobSchema.properties.codeScan.properties.fileSystem.properties.files.items = stringType
        scanJobSchema.properties.codeScan.properties.use.items = stringType
        scanJobSchema.properties.webScan.properties.includes.items = stringType
        scanJobSchema.properties.webScan.properties.excludes.items = stringType
        scanJobSchema.properties.webScan.properties.headers.items.properties.onlyForUrls.items = stringType
        
        def userDetailsSchema = jsonObject.components.schemas.UserDetails
        userDetailsSchema.properties.projects.items = stringType
        userDetailsSchema.properties.ownedProjects.items = stringType
        
        def executionProfileCreateSchema = jsonObject.components.schemas.ExecutionProfileCreate
        executionProfileCreateSchema.properties.configurations.items = stringType
        executionProfileCreateSchema.properties.projectIds.items = stringType
        
        def executionProfileFetchSchema = jsonObject.components.schemas.ExecutionProfileFetch
        executionProfileFetchSchema.properties.projectIds.items = stringType
        
        def listOfProjectsSchema = jsonObject.components.schemas.ListOfProjects
        listOfProjectsSchema.items = stringType
        
        def listOfUsersSchema = jsonObject.components.schemas.ListOfUsers
        listOfUsersSchema.items = stringType

        def projectWhiteListSchema = jsonObject.components.schemas.ProjectWhitelistUpdate
        projectWhiteListSchema.properties.whiteList.properties.uris.items=stringType
        
        // Write JSON
        def json = JsonOutput.toJson(jsonObject)
        def pretty = JsonOutput.prettyPrint(json)
 
        new File(openApiFile).write(pretty)
    }
}
