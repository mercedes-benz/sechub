// SPDX-License-Identifier: MIT

subprojects {
    if (! projectType.springBootProjects.contains(project)){
		return;
    }
    apply plugin: 'io.spring.dependency-management'
    dependencyManagement {
         imports {
             mavenBom "$springBootMavenBomCoordinates"
         }
    }
    
    ext['junit-jupiter.version'] = '5.6.0'

    logger.info("found spring boot relevant project:$project")
    
    if (projectType.bootableSpringApplicationProjects.contains(project)){
       apply plugin: 'org.springframework.boot' 
       
       springBoot {
             // creates build-info.properties in META-INF folder which is auto injected in spring
             // see https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-build-info
             buildInfo() 
        }     
    }


	dependencies {

        testCompile(library.springboot_starter_test)
        compile(library.springboot_starter_json)
        

	    if (projectType.springBootAdapterProjects.contains(project)){
            // next line: compile only, because spring boot does add android-json on test compile as lightweight imp
            //compile(library.openjson)

            /* REST */
            compile(library.jackson_JDK8)
            compile(library.springboot_starter_web)


            if (! project.name.equals('sechub-adapter')){
                compile project(':sechub-adapter')
            }

            testCompile library.wiremock
            testCompile project(':sechub-testframework')

        }

        if (projectType.springBootSecHubServerProjects.contains(project)){
            compile(library.springboot_starter_web)
            compile(library.springboot_starter_validation)
            testCompile project(':sechub-testframework')

            /* when not the kernel project we add kernel testframework as test dependency */
            if (! project.name.equals('sechub-shared-kernel')){
                testCompile project(':sechub-shared-kernel-testframework')
            }

            /* REST */
            compile(library.jackson_JDK8)

            /* database */
            compile(library.database_postgres)
            compile(library.database_h2)
            compile(library.springboot_starter_data_jpa)
            //compile(library.springboot_starter_actuator)

            /* security */
            compile(library.springboot_starter_security)
            testCompile(library.springframework_security_test)

            /* develop */
           // currently deactivated: compile(library.springboot_devtoolssf)
        }
       if (projectType.springDocProjects.contains(project)){
            compile(library.springboot_starter_web)
       }
    }
}
