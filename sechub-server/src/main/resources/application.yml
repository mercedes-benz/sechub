# SPDX-License-Identifier: MIT
sechub:
  targettype:
    detection:
      intranet:
        hostname:
          endswith: intranet.example.org
  security:
    diffiehellman:
      length: 2048 # JDK uses per default 1024, we set here to 2048 which is more secure

    # TODO: Albert: Move this into separate properties files

    # This will configure the SecHub Server to function as a 'resource server'.
    # In resource server mode the SecHub Server will only validate tokens and not issue them.
    # Validation can be done in two modes: 'jwt' or 'opaque'.
    # In jwt mode the SecHub Server will validate the tokens using public keys from the issuer.
    # In opaque token mode the SecHub Server will call an introspection uri to validate the token for every request.
    #
    # For classic mode the server will accept basic auth credentials.
    server:
      modes:
        - oauth2
        - classic
      oauth2:
        mode: jwt
        jwt:
          jwk-set-uri: http://localhost:8080/realms/local-realm/protocol/openid-connect/certs

    # Here the SecHub Server can be configured to offer a login page.
    # With this the SecHub Server will become an authentication issuer providing the client with tokens that he can
    # use to authenticate against the SecHub Server for subsequent requests.
    login:
      enabled: true
      login-page: /login
      redirect-uri: https://www.google.com
      modes:
        - oauth2
        - classic
      oauth2:
        client-id: web-ui-server-local
        client-secret: n8Ka5Wnkl9tv3rbPzeHt8KQ7CsEy7o5x
        provider: keycloak
        redirect-uri: https://localhost:8443/login/oauth2/code/keycloak
        issuer-uri: http://localhost:8080/realms/local-realm
        authorization-uri: http://localhost:8080/realms/local-realm/protocol/openid-connect/auth
        token-uri: http://localhost:8080/realms/local-realm/protocol/openid-connect/token
        user-info-uri: http://localhost:8080/realms/local-realm/protocol/openid-connect/userinfo
        jwk-set-uri: http://localhost:8080/realms/local-realm/protocol/openid-connect/certs
    encryption:
      secret-key: aB3xYz8KpL9mQw2VcT1sNj7FuW4vEp0Z

spring:
  profiles:
    group:
      prod: "server, initial_admin_created,real_products, postgres"
      dev: "localserver, initial_admin_predefined, admin_access"
      integrationtest: "localserver,initial_admin_static,mocked_notifications,admin_access"
      test: "mocked_products,mocked_notifications,h2,test"
    
  jackson:
    # https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-customize-the-jackson-objectmapper
    mapper: 
      # see also JSONConverter class (used by sechub internally), we try have spring setup
      # and JSONConverter in same way 
      accept_case_insensitive_enums: true
    serialization:
      write_single_elem_arrays_unwrapped: false
    default-property-inclusion: "non_absent"
  batch:
    job:
      # we do not want to have jobs started automatically (parameters needed etc.)
      enabled: false
    ##  Spring Boot Batch Schema file generation:
    jdbc:
      initialize-schema: always
  jpa:
     # when not defined: spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering.
    open-in-view: false
    hibernate:
      # https://www.baeldung.com/spring-boot-data-sql-and-schema-sql
      ddl-auto: none
      properties:
        hibernate:
          jdbc.time_zone: UTC
          # Avoiding  "java.sql.SQLFeatureNotSupportedException: method org.postgresql.jdbc.PgConnection.createClob() is not implemented yet.":
          # https://github.com/spring-projects/spring-boot/issues/12007:
          jdbc.lob.non_contextual_creation: true
  datasource:
    initialization-mode: always
  main:
    # see https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#bean-overriding
    allow-bean-definition-overriding: true
  servlet: 
    # MultiPart file-size limits,
    # https://spring.io/guides/gs/uploading-files/
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB
      resolve-lazily: true
      enabled: true
  web:
    resources:
      static-locations: classpath:/static

# --------------------------------------
# - Security
# --------------------------------------
security:
  basic:
    enabled: false # turn off standard login screen...

# --------------------------------------
# - SSL setup  (default)
# --------------------------------------
server:
  error:
    path: "/error"
  port:
    8443
  ssl:
    enabled: true # always enabled
    protocol: TLS
    enabled-protocols: TLSv1.2,TLSv1.3
    # keystore, alias etc. must be defined outside
    ciphers: 
     - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
     - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
     - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
     - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
     - TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
     - TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
     - TLS_AES_128_GCM_SHA256
     - TLS_AES_256_GCM_SHA384
     - TLS_AES_128_CCM_SHA256
     - ECDHE-ECDSA-CHACHA20-POLY1305-SHA256
     - ECDHE-ECDSA-CHACHA20-POLY1305
     - ECDHE-ECDSA-AES256-SHA384
     - ECDHE-ECDSA-AES128-SHA256
     - ECDHE-RSA-CHACHA20-POLY1305
     - DHE-RSA-AES256-GCM-SHA384
     - DHE-RSA-AES128-GCM-SHA256
     - ECDHE-RSA-AES256-GCM-SHA384
     - ECDHE-RSA-AES128-GCM-SHA256

# Spring Boot Actuators and Metrics
management:
  server:
    port:
       10250
    ssl:
      enabled:
         false
  endpoints:
    web:
      exposure:
        include: "prometheus,health"
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true