# SPDX-License-Identifier: MIT
sechub.config.scheduling.enable=false
# ---------------
# common setup
# ---------------
# use mock profile, so we can do nearly integration tests with
# standard JUNIT + spring without real stuff
# we use h2 for tests , more info about setup can be found at http://www.baeldung.com/spring-testing-separate-data-source
spring.profiles.active=mocked_products,mocked_notifications,h2,test
sechub.server.baseurl=http://localhost
sechub.storage.sharedvolume.upload.dir=temp

# create SQL schema on every test suite call into build folder
# so can be used as a template when writing update scripts etc.
# for flyway - unfortunately the tests do not run correctly, with those settings, so we
# must only temporary activate the next 5 lines when necessary:
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=build/test-sql/created.sql

# always drop and recreate ddl for tests
spring.jpa.hibernate.ddl-auto=create-drop

#
# Special: For junit tests we do not need this but we test
# ProductionConfigurationSettingsTest.java that in prod server.ssl.enabled is
# true
server.ssl.enabled=false
# ---------------------------------
# Setup test target type strategies
# ---------------------------------
sechub.target.resolve.strategy.uri: intranet-hostname-ends-with:intranet.example.org,intranet.example.com|intranet-hostname-starts-with:192.
sechub.target.resolve.strategy.ip: intranet-ip-pattern:192.168.*.*

sechub.notification.smtp.hostname=mail.example.org
# ------------------
# Mock initial admin
# ------------------
sechub.initialadmin.userid=test-user
sechub.initialadmin.email=test-user@example.org

spring.datasource.initialization-mode=never
# ------------------------------
# Flyway turned off for testing!
# ------------------------------
spring.flyway.enabled=false

# -----------------
# Mock adapters
# -----------------
# enable mocked adapters to check if the parameters are as expected
# just a sanity check that parameters are loaded etc.
sechub.adapter.mock.sanitycheck.enabled=true
# ---------------
# netsparker
# ---------------
sechub.adapter.netsparker.userid=netsparkerUserId
sechub.adapter.netsparker.apitoken=netsparkerAPIToken
sechub.adapter.netsparker.policyid=policyId
sechub.adapter.netsparker.baseurl=netsparkerBaseUrl
sechub.adapter.netsparker.licenseid=licenseId

# ---------------
# checkmarx
# ---------------
sechub.adapter.checkmarx.baseurl=checkmarxBaseURL
sechub.adapter.checkmarx.userid=checkmarxUserId
sechub.adapter.checkmarx.password=checkmarxAPIToken
sechub.adapter.checkmarx.newproject.teamid=checkmarxNewProjectTeamId

# ---------------
# nessus
# ---------------
sechub.adapter.nessus.intranet.userid=nessusIntranetUserId
sechub.adapter.nessus.internet.userid=nessusInternetUserId
sechub.adapter.nessus.intranet.password=nessusIntranetPassword
sechub.adapter.nessus.internet.password=nessusInternetPassword
sechub.adapter.nessus.defaultpolicyid=nessusDefaultPolicyId
sechub.adapter.nessus.intranet.baseurl=nessusIntranetBaseURL
sechub.adapter.nessus.internet.baseurl=nessusInternetBaseURL
#sechub.adapter.nessus.scanresultcheck.period.minutes:-1=
#sechub.adapter.nessus.scanresultcheck.timeout.minutes:-1=
#sechub.adapter.nessus.trustall:false=
#sechub.adapter.nessus.proxy.hostname:=
#sechub.adapter.nessus.proxy.port:0=
# ---------------
# email
# ---------------
sechub.notification.email.from=sechub@example.org
sechub.notification.email.administrators=sechub-admin-test@example.org

# scheduler
sechub.config.trigger.nextjob.initialdelay=100
sechub.config.trigger.nextjob.delay=300
