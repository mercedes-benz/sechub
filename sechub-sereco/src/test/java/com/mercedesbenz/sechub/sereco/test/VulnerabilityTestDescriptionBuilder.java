// SPDX-License-Identifier: MIT
package com.mercedesbenz.sechub.sereco.test;

import com.mercedesbenz.sechub.sereco.metadata.SerecoCodeCallStackElement;
import com.mercedesbenz.sechub.sereco.metadata.SerecoVulnerability;
import com.mercedesbenz.sechub.sereco.metadata.SerecoWeb;
import com.mercedesbenz.sechub.sereco.metadata.SerecoWebAttack;
import com.mercedesbenz.sechub.sereco.metadata.SerecoWebRequest;
import com.mercedesbenz.sechub.sereco.metadata.SerecoWebResponse;

public class VulnerabilityTestDescriptionBuilder {
    private static final String INDENTION = "  ";

    public String describe(SerecoVulnerability vulnerability) {
        if (vulnerability == null) {
            return "null";
        }
        StringBuilder sb = new StringBuilder();
        /* first row */
        if (vulnerability.getSeverity() != null) {
            sb.append("severity=");
            sb.append(vulnerability.getSeverity());
        }
        if (vulnerability.getClassification() != null) {
            sb.append(",cwe=");
            sb.append(vulnerability.getClassification().getCwe());
        }
        if (vulnerability.getType() != null) {
            sb.append(",type=");
            sb.append(vulnerability.getType());
        }
        sb.append("\n");

        /* additional rows */
        if (vulnerability.getScanType() != null) {
            sb.append("- scanType:");
            sb.append(vulnerability.getScanType());
            sb.append("\n");
        }
        if (vulnerability.getCode() != null) {
            sb.append("- code:");
            sb.append("\n");
            SerecoCodeCallStackElement callstackElement = vulnerability.getCode();
            String indention = INDENTION;
            while (callstackElement != null) {
                sb.append(indention);
                sb.append("- location:");
                sb.append(callstackElement.getLocation());
                sb.append(", line:");
                sb.append(callstackElement.getLine());
                sb.append(", column:");
                sb.append(callstackElement.getColumn());
                sb.append("\n");
                sb.append(indention);
                sb.append("- relevant:");
                if (callstackElement.getRelevantPart() != null) {
                    sb.append(callstackElement.getRelevantPart());
                }
                sb.append("\n");
                sb.append(indention);
                sb.append("- source:");
                if (callstackElement.getSource() != null) {
                    sb.append(callstackElement.getSource());
                }
                sb.append("\n");
                indention = indention + INDENTION;

                callstackElement = callstackElement.getCalls();
            }
            sb.append("\n");
        }
        SerecoWeb web = vulnerability.getWeb();
        if (web != null) {
            SerecoWebAttack attack = web.getAttack();
            if (attack != null) {
                sb.append(INDENTION);
                sb.append("- attack:");
                sb.append(attack);
                sb.append("\n");
            }
            SerecoWebRequest request = web.getRequest();
            if (request != null) {
                sb.append(INDENTION);
                sb.append("- request:");
                sb.append(request);
                sb.append("\n");
            }
            SerecoWebResponse response = web.getResponse();
            if (response != null) {
                sb.append(INDENTION);
                sb.append("- response:");
                sb.append(response);
                sb.append("\n");
            }
        }
        if (vulnerability.getDescription() != null) {
            sb.append("- description:");
            sb.append(vulnerability.getDescription());
            sb.append("\n");
        }
        if (vulnerability.getClassification() != null) {
            sb.append("- classification:");
            sb.append(vulnerability.getClassification());
            sb.append("\n");
        }
        /* code parts not inside toString */
        return sb.toString();

    }
}
