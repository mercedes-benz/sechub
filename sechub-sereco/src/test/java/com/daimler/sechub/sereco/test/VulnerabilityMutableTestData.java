// SPDX-License-Identifier: MIT
package com.daimler.sechub.sereco.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import com.daimler.sechub.sereco.metadata.SerecoSeverity;

/**
 * This test data class has getter methods and a change method. By calling
 * change methods with keys the getters will always return same value for
 * unchanged fields. For changed fields always different values as to former
 * call will be returned
 * 
 * @author Albert Tregnaghi
 *
 */
public class VulnerabilityMutableTestData {
    
    private List<VulnerabilityTestDataKey> touchedFields = new ArrayList<>();
    private SerecoSeverity lastChangedSeverity = SerecoSeverity.HIGH;
    private Map<VulnerabilityTestDataKey, AtomicInteger> intMap = new HashMap<>();

    public SerecoSeverity getSeverity() {
        if (touchedFields.contains(VulnerabilityTestDataKey.SEVERITY)) {
            int index = lastChangedSeverity.ordinal();
            index++;
            if (index >= SerecoSeverity.values().length) {
                index = 0;
            }
            lastChangedSeverity = SerecoSeverity.values()[index];
            /* mus change on every call */
            return lastChangedSeverity;
        }
        return SerecoSeverity.HIGH;
    }

    public String get(VulnerabilityTestDataKey field) {
        if (isTouched(field)) {
            return field.name() + System.nanoTime();
        }
        return field.name();
    }
    
    public int getInt(VulnerabilityTestDataKey field) {
        AtomicInteger integer = intMap.computeIfAbsent(field, k -> new AtomicInteger());
        if (isTouched(field)) {
            return integer.incrementAndGet();
        }
        return integer.get();
    }
    private boolean isTouched(VulnerabilityTestDataKey field) {
        return touchedFields.contains(field);
    }

    /**
     * Change the field, so every get field call will result in a new value!
     * 
     * @param field
     * @return
     */
    public VulnerabilityMutableTestData touch(VulnerabilityTestDataKey field) {
        touchedFields.add(field);
        return this;
    }

    public boolean hasTouchedFields() {
        return !touchedFields.isEmpty();
    }
   
    @Override
    public String toString() {
        return "VulnerabilityTestData [touched=" + hasTouchedFields() + ", touched=" + touchedFields + "]";
    }

}