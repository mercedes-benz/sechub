// SPDX-License-Identifier: MIT
buildscript{

	apply from: "${rootProject.projectDir}/gradle/libraries.gradle"
	apply from: "${rootProject.projectDir}/gradle/projects.gradle"

    def customMavenRepoURL4plugins = System.getenv('CUST_MVN_URL_PLUGINS')
    if (customMavenRepoURL4plugins!=null){
        repositories {
            maven { url "${customMavenRepoURL4plugins}" } // e.g. a corporate nexus or artifactory...
        }
    }else{
    	repositories {
    	     mavenCentral()
    	}
    }

	dependencies{
		classpath gradleApi()
		classpath "org.ajoberstar.grgit:grgit-gradle:${libraryVersion.grgit}" // necessary for version calculation
		classpath "com.epages:restdocs-api-spec-gradle-plugin:${libraryVersion.restDocsApiSpec}"
        classpath "org.owasp:dependency-check-gradle:${libraryVersion.dependency_check}"
	}
}


plugins {
    // asciidoc
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
    
    // open api
    id 'org.openapi.generator' version '6.2.1'
    
    // spring
    id 'org.springframework.boot' version '2.7.6' apply false
    
    // spotless code formatter
    // (see https://github.com/diffplug/spotless)
    id 'com.diffplug.spotless' version '6.11.0'
    
    // versions plugin for checking new available library versions etc. 
    // (see https://github.com/ben-manes/gradle-versions-plugin)
    id 'com.github.ben-manes.versions' version '0.44.0'
    
    // Details about every gradle plugin can be found at 
    // https://plugins.gradle.org/plugin/${pluginId}
}

// old style apply necessary here - to have same version as in classpath dependency
apply plugin: 'org.owasp.dependencycheck'

/* check buildsystem */
def githubActor = System.getenv('GITHUB_ACTOR')

def atGitHubActions = false

if (githubActor == null || githubActor.isEmpty()){
    /* not inside github actions */
    atGitHubActions = false
}else{
    atGitHubActions = true
}

/* define global `buildDoneByGitHubActions` - so sub projects can reuse this information*/
ext.buildDoneByGitHubActions=atGitHubActions
ext.springBootMavenBomCoordinates = org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES

ext {
    git = org.ajoberstar.grgit.Grgit.open(currentDir: project.rootDir) // necessary for version calculation
}

/* own clean task - we need this because root project has not included a module providing the task */
task internalCleanRootBuildFolder(type: Delete){

    doFirst {
        def rootBuildFolder = file("${project.projectDir}/build")
        if (! rootBuildFolder.exists()){
            rootBuildFolder.mkdirs();
        } 
        delete rootBuildFolder.listFiles() // so we do NOT clear buildSrc/build here!
    }

}

tasks.clean.dependsOn.internalCleanRootBuildFolder

apply from: rootProject.file('gradle/gradle_version_plugin.gradle')

allprojects {
    apply from: rootProject.file('gradle/spotless.gradle')

    def customMavenRepoURL = System.getenv('CUST_MVN_URL')
    if (customMavenRepoURL!=null){
        repositories {
            maven { url "${customMavenRepoURL}" } // e.g. a corporate nexus or artifactory...
        }
    }else{
        repositories {
             mavenCentral()
        }
    }

    /* every project has got this additional task */
    task prepareGitPush(dependsOn: spotlessApply){
    
    }
}



spotless {
	groovyGradle {
		target '*.gradle', 'gradle/*.gradle'
	}
	format 'dotfiles', {
		target '.gitignore', '.gitattributes', '.editorconfig'
		indentWithSpaces(2)
		trimTrailingWhitespace()
		endWithNewline()
	}
}

apply from: "${rootProject.projectDir}/gradle/build-versioning.gradle"
apply from: "${rootProject.projectDir}/gradle/build-java.gradle"
apply from: "${rootProject.projectDir}/gradle/build-spring.gradle"
apply from: "${rootProject.projectDir}/gradle/build-maven.gradle"
apply from: "${rootProject.projectDir}/gradle/build-eclipse.gradle"
apply from: "${rootProject.projectDir}/gradle/build-report.gradle"
